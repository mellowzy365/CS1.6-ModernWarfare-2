/* Plugin generated by AMXX-Studio */

/*============================== Modern Warfare 2 BETA ===========================================
Available ScoreStreak :										

Name				Recruitment							

UAV				3 Points Kill without dead
Care Package			4 Ponits Kill without dead
Airstrike			6 Points Kills without dead
Sentry Gun			5 Points Kill without dead
Tactical Nuke			25 Kills or more without dead

Available Perks :

Ninja/Dead Silence
No Recoil
Fast Reload
Cold Blooded

Other Features :

Press E Automatically Stab Knife
Press SHIFT Sprint Mode
Iron Sight Model Fixed
Fast Throw Nade ::
Grenade (PRESS H)
Flashbang (PRESS F)

NB : Not Recommended for Server

=============================================================================================*/

#include <amxmodx>
#include <engine>
#include <amxmisc>
#include <fakemeta>
#include <fakemeta_util>
#include <hamsandwich>
#include <cstrike>
#include <fun>
#include <xs>
#include <metadrawer>
#include <gamemaster>
#include <mw2_natives>

#define PLUGIN 				"Modern Warfare 2 Beta"
#define VERSION 			"1.0"
#define AUTHOR 				"D.Moder | Mellowzy | Infractm"

//Hit
#define	RESULT_HIT_NONE 		0
#define	RESULT_HIT_PLAYER		1
#define	RESULT_HIT_WORLD		2

#define nuke_caller 			"models/scorestreaks/nuke_caller.mdl"
#define nuke_alert		 	"scorestreaks/nuke_friend.wav"
#define nuke_explo 			"scorestreaks/nuke_explo.mp3"
#define nuke_give 			"mw/nuke_give2.wav"

#define uav_give 			"mw/uav_give.wav"
#define uav_online 			"scorestreaks/uav_friendly.wav"

#define sentry_give 			"mw/sentrygun_give.wav"
#define sentry_online 			"scorestreaks/sentrygun_friend2.wav"
#define sentry_model 			"models/scorestreaks/cod_sentrygun.mdl"

#define sentry_start 			"scorestreaks/sentrygun_starts.wav"
#define sentry_shoot 			"scorestreaks/sentry_shoot.wav"
#define sentry_stop 			"scorestreaks/sentrygun_stops.wav"
#define sentry_gone 			"scorestreaks/sentrygun_gone.wav"

#define predm_give 			"scorestreaks/predator_give.wav"
#define predm_friend 			"scorestreaks/predator_friend.wav"

#define airs_model 			"models/scorestreaks/cod_plane.mdl"
#define airs_bomb 			"models/w_hegrenade.mdl"
#define airs_fly 			"scorestreaks/jet_fly.wav"
#define airs_give 			"mw/air_give.wav"
#define airs_friend 			"scorestreaks/air_friend.wav"

#define carepackage_give 		"scorestreaks/carepackage_give2.wav"
#define carepackage_online 		"scorestreaks/carepackage_friend.wav"

#define reloading 			"reloading/reloading.wav"

#define TASK_COUNTDOWN 			102121921029
#define TASK_ANIMATION 			821928182918

#define TASK_UAV 			992118281
#define TASK_SENTRY 			99211822221

#define TASK_FLY_AIRS 			00121102913
#define TASK_DROPBOMB_AIRS 		121291092192091

#define TASK_MUST_RELOAD		091829031339922

#define AIRS_BOMB_RANGE 		120.0
#define AIRS_BOMB_DAMAGE 		1500.0

#define POINT_KILL 			50 //Normal Kill
#define POINT_KILL_HS 			100 //HeadShot Kill

#define UAV_Points 			3 //Point for unlock UAV
#define CarePackage_Point 		4 //Point for unlock CarePackage
#define AirStrike_Point 		6//Point for unlock AirStrike
#define PredMissile_Point 		5 //Point for unlock PredMissile
#define Sentrygun_Point 		5 //Point for unlock Sentrygun
#define TacticalNuke_Point 		25 //Point for unlock Tactical Nuke
#define Point_StealthBomber 		9 //point unlock stealth bomber

#define sentry_damage 			100.0
#define sentry_health 			350.0

// uav
#define UAV_DUR 			30.0 	// how long uav stays on in seconds
#define USUR 				0.40 	// User Screen(hud) Update Rate in sec. (0.20 and above no lags)

// predator missile
#define PREDATOR_SPEED 			700 	// predator missile speed normal
#define ATTN_PREDATOR 			0.1 	// explosion sound range (used in emit_sound)
#define ROCKET_MDL 			"models/scorestreaks/cod_predator.mdl"
#define PR_FLY_START 			"scorestreaks/pr_fly.wav"
#define PR_FLY_STOP 			"scorestreaks/pr_fly_stop.wav"
#define PR_EXPL_SOUND			"scorestreaks/pr_explo_3.wav"
#define RDR_PREDATOR 			2.50 // predator missile
#define RDR_PRECISION 			1.50 // precision airstrike
#define DAMAGE_MULTI 			1.5 // damage multiplier (when having StoppingPower or DangerClose on)
#define DAMAGE_STAB			750.0

// easier switching
#define SET_origin(%1,%2) 		entity_set_origin(%1, %2) // bugfix
#define GET_owner(%1) 			entity_get_edict(%1, EV_ENT_owner)
#define SET_owner(%1,%2) 		entity_set_edict(%1, EV_ENT_owner, %2)
#define GET_classname(%1,%2) 		entity_get_string(%1, EV_SZ_classname, %2, charsmax(%2))
#define SET_classname(%1,%2) 		entity_set_string(%1, EV_SZ_classname, %2)
#define SET_viewmodel(%1,%2) 		entity_set_string(%1, EV_SZ_viewmodel, %2)
#define GET_dmgtime(%1) 		entity_get_float(%1, EV_FL_dmgtime)
#define SET_dmgtime(%1,%2) 		entity_set_float(%1, EV_FL_dmgtime, %2)
#define SET_nextthink(%1,%2) 		entity_set_float(%1, EV_FL_nextthink, %2)
#define GET_health(%1) 			entity_get_float(%1, EV_FL_health)
#define SET_health(%1,%2) 		entity_set_float(%1, EV_FL_health, %2)
#define GET_takedamage(%1) 		entity_get_float(%1, EV_FL_takedamage)
#define SET_takedamage(%1,%2) 		entity_set_float(%1, EV_FL_takedamage, %2)
#define SET_armorvalue(%1,%2) 		entity_set_float(%1, EV_FL_armorvalue, %2)
#define SET_frame(%1,%2) 		entity_set_float(%1, EV_FL_frame, %2)
#define SET_framerate(%1,%2) 		entity_set_float(%1, EV_FL_framerate, %2)
#define SET_maxspeed(%1,%2) 		entity_set_float(%1, EV_FL_maxspeed, %2)
#define SET_gravity(%1,%2) 		entity_set_float(%1, EV_FL_gravity, %2)
#define GET_flFallVelocity(%1) 		entity_get_float(%1, EV_FL_flFallVelocity)
#define GET_velocity(%1,%2) 		entity_get_vector(%1, EV_VEC_velocity, %2)
#define SET_velocity(%1,%2) 		entity_set_vector(%1, EV_VEC_velocity, %2)
#define GET_absmax(%1,%2) 		entity_get_vector(%1, EV_VEC_absmax, %2)
#define GET_angles(%1,%2) 		entity_get_vector(%1, EV_VEC_angles, %2)
#define SET_angles(%1,%2) 		entity_set_vector(%1, EV_VEC_angles, %2)
#define GET_mins(%1,%2) 		entity_get_vector(%1, EV_VEC_mins, %2)
#define GET_v_angle(%1,%2) 		entity_get_vector(%1, EV_VEC_v_angle, %2)
#define SET_punchangle(%1,%2) 		entity_set_vector(%1, EV_VEC_punchangle, %2)
#define GET_origin(%1,%2) 		entity_get_vector(%1, EV_VEC_origin, %2)
#define SET_body(%1,%2) 		entity_set_int(%1, EV_INT_body, %2)
#define SET_sequence(%1,%2) 		entity_set_int(%1, EV_INT_sequence, %2)
#define GET_button(%1) 			entity_get_int(%1, EV_INT_button)
#define SET_button(%1,%2) 		entity_set_int(%1, EV_INT_button, %2)
#define GET_flags(%1) 			entity_get_int(%1, EV_INT_flags)
#define SET_flags(%1,%2) 		entity_set_int(%1, EV_INT_flags, %2)
#define GET_spawnflags(%1) 		entity_get_int(%1, EV_INT_spawnflags)
#define SET_spawnflags(%1,%2) 		entity_set_int(%1, EV_INT_spawnflags, %2)
#define GET_effects(%1) 		entity_get_int(%1, EV_INT_effects)
#define SET_effects(%1,%2) 		entity_set_int(%1, EV_INT_effects, %2)
#define SET_colormap(%1,%2) 		entity_set_int(%1, EV_INT_colormap, %2)
#define SET_watertype(%1,%2) 		entity_set_int(%1, EV_INT_watertype, %2)
#define SET_movetype(%1,%2) 		entity_set_int(%1, EV_INT_movetype, %2)
#define GET_solid(%1) 			entity_get_int(%1, EV_INT_solid)
#define SET_solid(%1,%2) 		entity_set_int(%1, EV_INT_solid, %2)
#define SET_flTimeStepSound(%1,%2) 	entity_set_int(%1, EV_INT_flTimeStepSound, %2)
#define GET_frags(%1) 			floatround(entity_get_float(%1, EV_FL_frags))
#define SET_frags(%1,%2) 		entity_set_float(%1, EV_FL_frags, float(%2))
#define SET_SENTRY_TILT_TURRET(%1,%2) 	set_pev(%1, pev_controller_1, %2)
#define GET_SENTRY_STATE(%1)		pev(%1, pev_iuser1)
#define SET_SENTRY_STATE(%1,%2)		set_pev(%1, pev_iuser1, %2)
#define GET_ENTITY_KEY(%1)		pev(%1, pev_impulse)
#define SET_ENTITY_KEY(%1,%2)		set_pev(%1, pev_impulse, %2)

#define SENTRY_KEY 9911991213191301
#define SAMETEAM(%1,%2) 	(get_user_team(%1) == get_user_team(%2))
#define eng_get_user_health(%1) floatround(GET_health(%1))
#define XACCURATE 			// doubles accuracy (comment to disable)
#define emit_sound_amb(%1,%2,%3,%4,%5) 	engfunc(EngFunc_EmitAmbientSound, 0, %1, %2, %3, %4, 0, %5)

// user ent values set/get
#define GET_NADE_TYPE(%1) 		entity_get_int(%1, EV_INT_flTimeStepSound)
#define SET_NADE_TYPE(%1,%2) 		entity_set_int(%1, EV_INT_flTimeStepSound, %2)
#define GET_ATTACHED(%1) 		entity_get_edict(%1, EV_ENT_euser1)
#define SET_ATTACHED(%1,%2) 		entity_set_edict(%1, EV_ENT_euser1, %2)
#define GET_STUCK(%1) 			entity_get_int(%1, EV_INT_iuser1)
#define SET_STUCK(%1,%2) 		entity_set_int(%1, EV_INT_iuser1, %2)
#define GET_TRIGGERED(%1) 		entity_get_int(%1, EV_INT_iuser2)
#define SET_TRIGGERED(%1,%2) 		entity_set_int(%1, EV_INT_iuser2, %2)
#define GET_COUNTS_KS(%1) 		entity_get_int(%1, EV_INT_iuser4)
#define SET_COUNTS_KS(%1,%2) 		entity_set_int(%1, EV_INT_iuser4, %2)
#define GET_CP_CONTAINS(%1) 		entity_get_int(%1, EV_INT_iuser1)
#define SET_CP_CONTAINS(%1,%2) 		entity_set_int(%1, EV_INT_iuser1, %2)
#define GET_SENTRY_ACTIVE(%1) 		entity_get_int(%1, EV_INT_iuser2)
#define SET_SENTRY_ACTIVE(%1,%2) 	entity_set_int(%1, EV_INT_iuser2, %2)
#define GET_SENTRY_TARGET(%1) 		entity_get_int(%1, EV_INT_iuser3)
#define SET_SENTRY_TARGET(%1,%2) 	entity_set_int(%1, EV_INT_iuser3, %2)
#define SET_SENTRY_TILT_TURRET(%1,%2) 	set_pev(%1, pev_controller_1, %2) 	// has to be pev_

// sentries (credits to The_Thing)
#define SENTRY_HEALTH 			200 	// Health
#define SENTRY_LIFE 			20.0 	// Seconds
#define SENTRY_RANGE 			3096.0 	// Range
#define SENTRY_RETARGET 		1.0 	// change target delay
#define SENTRY_DAMAGE 			38.0 	// sentry bullet damage
#define SENTRY_BLT			"models/rshell.mdl"

//plane & carepackage
#define PLANE_Z 			500.0 	// plane height from ground
#define PACKAGE_HELI_MODEL		"models/props/helicopter_blackhawk-new.mdl"
#define STEALTH_FLYBY_SOUND		"scorestreaks/heli1.wav"
#define PACKAGE_PACK_MODEL		"models/scorestreaks/cod_carepackage.mdl"
#define PICKUP_SOUND 			"items/gunpickup2.wav"

// care packare
#define CP_RESUPPLY 			-5 				// resupply
#define CP_TAKE_SPEED 			floatround(USUR * 100.0) 	// taking speed for owner
#define CP_STEAL_SPEED 			floatround(USUR * 25.0) 	// taking speed for others

// CS Teams
#define TEAM_UNASSIGNED 		0
#define TEAM_T 				1
#define TEAM_CT 			2
#define TEAM_SPECTATOR 			3

//heal
#define HEAL_AMOUNT 			45.0
#define TASK_RESTORE_HP 		2900188001

// CS zoom (cstrike.h)
#define CS_FIRST_ZOOM			0x28
#define CS_SECOND_AWP_ZOOM		0xA
#define CS_SECOND_NONAWP_ZOOM		0xF
#define CS_AUGSG552_ZOOM		0x37
#define CS_NO_ZOOM			0x5A

//metadrawer
#define MAX_TEXT_CHANNEL		256
#define MAX_IMAGE_CHANNEL		512

#define MAX_WEAPONS     		24

#define PA_LOW  25.0
#define PA_HIGH 50.0
#define ATTN_LOUD 	0.25 		// grenade sound range
// stealth
#define MAXBOMBS 		5 	// amount of bombs dropped from stealth bomber
#define BOMBSPACE 		150 	// space between each bomb

//events
#define RANGERWIN "MW/rangerwin.wav"
#define RANGERLOSE "MW/rangerdefeat.wav"
#define OPFORWIN "MW/opforwin.wav"
#define OPFORLOSE "MW/opfordefeat.wav"

#define weapon(%1) get_user_weapon(%1, clip, ammo)

new const MESSAGE[ ] = "Cover me... I'm reloading!";

new const SOUNDS[ ][ ] = {
	"radio/reloading01.wav",
	"radio/reloading02.wav"
};

new const ambience_s[] = "sound/ambience/background2.mp3";

new const Float:g_iMaxClip[ CSW_P90 + 1 ] = {
	0.0, 13.0, 0.0, 10.0, 1.0,  7.0, 1.0, 30.0, 30.0, 1.0, 30.0, 
	20.0, 25.0, 30.0, 35.0, 25.0, 12.0, 20.0, 10.0, 30.0, 100.0, 
	8.0, 30.0, 30.0, 20.0, 2.0, 7.0, 30.0, 30.0, 0.0, 50.0 };

const m_iTeam            = 114;
const m_pPlayer          = 41;
const m_fInReload        = 54;
const m_fInSpecialReload = 55;
const m_flTimeWeaponIdle = 48;

// stuff for Display_Fade
const UNIT_SECOND 	= (1<<12)
const FFADE_IN 		= 0x0000
const FFADE_OUT 	= 0x0001
const FFADE_MODULATE 	= 0x0002
const FFADE_STAYOUT 	= 0x0004

new const Float:g_fWeaponsSpeed[ ]={
	000.0,
	250.0, 000.0, 260.0, 250.0, 240.0, 
	250.0, 250.0, 240.0, 250.0, 250.0,                
	250.0, 250.0, 210.0, 240.0, 240.0,    
	250.0, 250.0, 210.0, 250.0, 220.0,              
	230.0, 230.0, 250.0, 210.0, 250.0,            
	250.0, 235.0, 221.0, 250.0, 245.0 
};

new Float:gfPitch[33];
new Float:gfYaw[33];
new clip
new ammo
new Float:gfMoveOffset[33][2];
new giMoves[33];
new bool:gFast[33];
new gZmeczenie[33];
//pcvary
new pSpeed,pZmeczenie;

// catch shot event (credits to VEN)
new g_fwid, g_guns_eventids_bitsum
new const g_guns_events[][] = {
	"events/awp.sc",
	"events/g3sg1.sc",
	"events/ak47.sc",
	"events/scout.sc",
	"events/m249.sc",
	"events/m4a1.sc",
	"events/sg552.sc",
	"events/aug.sc",
	"events/sg550.sc",
	"events/m3.sc",
	"events/xm1014.sc",
	"events/usp.sc",
	"events/mac10.sc",
	"events/ump45.sc",
	"events/fiveseven.sc",
	"events/p90.sc",
	"events/deagle.sc",
	"events/p228.sc",
	"events/glock18.sc",
	"events/mp5n.sc",
	"events/tmp.sc",
	"events/elite_left.sc",
	"events/elite_right.sc",
	"events/galil.sc",
	"events/famas.sc"
}
new const weapon_name[][] = {
	//pistol
".45 USP", //usp45 //0
"Glock-18", //glock //1
"Desert Eagle", //deagle//2
"M9", //p228 3
".44 Magnum Akimbo", //elite 4
"Fiveseven", //fiveseven 5

	//Shotgun
	
"Spass-12", //m3 6
"Striker", //xm1014 7

	//SMG
"Mp5k", //mp5 8
"Tmp", //9
"P90", //10
"Mini Uzi", //mac10 11
"Vector", //ump45 12

	//AR
	
"Famas",//13
"Remington ACR",//sg552 14
"Ak-47", //15
"Tar-21", // galil 16
"M4a1", //17
"Aug HBAR", //aug 18
"Intervention", //scout 19
"Barret M82", //awp 20
"M14 EBR", //sg550 21
"WA2000", //g3sg1 22

	//LMG
"RPD", //m249 23

	//SHIELD
"Knife",//24
"M26 Grenade",//25
"Flashbang",//26
"Smokegrenade",//27

"C4"//28
}


// func_breakable materials
//    0 = Glass, 1 = Wood, 2 = Metal, 3 = Flesh, 4 = Cinder Block
//    5 = Ceiling Tile, 6 = Computer, 7 = Unbreakable Glass, 8 = Rocks
new const material_Computer[] = "6"
// unreloadables
const NOCLIP_WPN_BS	= ((1<<2)|(1<<CSW_HEGRENADE)|(1<<CSW_SMOKEGRENADE)|(1<<CSW_FLASHBANG)|(1<<CSW_KNIFE)|(1<<CSW_C4))
const SHOTGUNS_BS	= ((1<<CSW_M3)|(1<<CSW_XM1014))
new const hitmark_s[][] = 
{
	"hitmark/hitmark_0.wav",
	"hitmark/hitmark_1.wav",
	"hitmark/hitmark_2.wav",
	"hitmark/hitmark_3.wav"
}
/*new const scope_model[][] ={
	//rifle
	"models/cod/v_sight_ak47.mdl", //1
	"models/cod/v_sight_famas.mdl", //2
	"models/cod/v_sight_tar21.mdl", //3
	"models/cod/v_sight_arc.mdl", //4
	
	//smg
	"models/cod/v_sight_mac10.mdl", //5
	"models/cod/v_sight_mp5.mdl", //6
	"models/cod/v_sight_p90.mdl", //7
	"models/cod/v_sight_tmp.mdl", //8
	"models/cod/v_sight_vector.mdl", //9
	
	//sg
	"models/cod/v_sight_m3.mdl", //10
	"models/cod/v_sight_striker.mdl", //11
	
	//handgun
	"models/cod/v_sight_deagle.mdl", //12
	"models/cod/v_sight_colt.mdl", //13
	
	"models/cod/v_sight_rpd.mdl", //14
	
	//updates
	"models/cod/v_sight_m4a1.mdl", //15
	"models/cod/v_sight_glock18.mdl", //16
	"models/cod/v_sight_usp.mdl", //17
	"models/cod/v_sight_aug.mdl" //18
	
}*/
new const multikill[][] = {
	"multikill/Headshot.wav"
}
new const ks_spr[][] = {
	"sprites/ks/air_pack.spr",
	"sprites/ks/emp_pack.spr",
	"sprites/ks/predator_pack.spr",
	"sprites/ks/sentry_pack.spr",
	"sprites/ks/uav_pack.spr"
}

// pdata offsets
const EXTRAOFFSET 		= 5
const EXTRAOFFSET_WEAPONS 	= 4
const OFFSET_MAPZONE 		= 235
const OFFSET_ZOOMTYPE 		= 363
const OFFSET_CSDEATHS 		= 444
const OFFSET_HE_AMMO 		= 388
const m_rgpPlayerItems_Slot0 	= 367
const m_pNext 			= 42
const m_iId 			= 43
const m_pActiveItem 		= 373
const m_pPlayer 		= 41
const m_fInReload 		= 54
const m_flNextAttack 		= 83
const m_flNextPrimaryAttack 	= 46
const m_flNextSecondaryAttack 	= 47
const m_iShotsFired 		= 64

const IC_FLASHLIGHT = 100
new TKills,CTKills,g_iRounds

// Task offsets
enum (+= 100)
{
	TASK_MAINLOOP = 2000,
	TASK_GIVESTUFF,
	TASK_RESPAWN,
	TASK_GODMODE_OFF,
	TASK_PHURT,
	TASK_PBETTER,
	TASK_MELEE,
	TASK_MELEE_Q,
	TASK_ANNOUNCE,
	TASK_DEATH,
	TASK_CLAYMORE_EXPLODE,
	TASK_TACTICAL_INSERTION,
	TASK_MESSAGE_BONUS,
	TASK_SEMTEX_STICK,
	TASK_CLASS_CHANGE,
	TASK_ONTARGET,
	TASK_TARGET_RESET,
	TASK_SENTRY_ACTIVATE,
	TASK_SENTRY_DEACTIVATE,
	TASK_SENTRY_REMOVE,
	TASK_PRED_FLY,
	TASK_CAREPACKAGE,
	TASK_UN_EMP,
	TASK_PRECISIONAIRSTRIKE,
	TASK_STEALTHBOMBER,
	TASK_TACTICAL_NUKE
}
enum _:iKillType
{
	KILL_NONE = 0,
	KILL_STREAK,
	KILL_NUKE
}
enum _:Perk_Type
{
	PERK_NONE = 0,
	PERK_RED,
	PERK_GREEN,
	PERK_BLUE
}
enum _:Perks_Name
{
	NONE = 0,
	DEAD_SILENCE, //green perk
	SLEIGHT_OF_HAND, //blue perk
	STEADY_AIM, //green perk
	COLD_BLOODED, //red perk
	DANGER_CLOSE //red perk
}

new bool:g_UsePerk[33],g_PerkType[33],g_PerkName[33], g_iKillCount[33]
new g_currentweapon[33],g_HasAirstrike[33],PointStealth[33], HadStealth[33]
new const sentrybase_classname[] = "sentrybase", sentry_classname[] = "sentry", sentryblt_classname[] =  "sentrybullet"
new stealth_classname[] = "cod_stealth", package_classname[] = "care_package"
new const pred_classname[] = "predator_missile"
new const airs_classname[] = "airstrike_codmw", bomb_classname[] = "bomb_down"
new g_iKill[33], g_Enable[33], g_CountDown, g_usinglaptop[33],laser,spr_smoke,spr_white, g_iKillMode[33],po_start_hp
new g_HasNukeCaller[33], bool:hasUAV[4], Float:uavEndTime[4],g_HasUAV[33], g_HasSentry[33],m_iBlood[2],has_sentry[33], g_HasCarePackage[33]
new g_MyPoints[33],PointNuke[33],PointUAV[33], PointSentry[33],PointCarePackage[33],PointAIRS[33],g_maxplayers
new bool:is_bullet_kill[33],g_msgDeathMsg,id_nuker
new Float:cpd_time[33], cpd_taking_package[33], cpd_progress[33],g_PredMissile[33], PointPredM[33], bool:takepck[33]
new bool:g_bLocation, g_iMsgTextMsg, g_iMsgSendAudio, g_szLocation[ 33 ][ 32 ];
new g_pChat, g_pPercent,bool:radar[2],bool:IsDefusing[33]
new user_ctrl_pred[33], user_pred_speed[33],Float:melee_time[33],bool:had_knife[33]
new const Float:GL_POWER[] = { 2.0, 1500.0, 110.0, 250.0 } // (delay,speed,damage,range)
new spr_explosion, GameNewRound,sprite_blast
new RangerOrigin[3],OpforOrigin[3], MainKiller[5];
new user_stealth[33],bool:enable_radar[33]
new g_IsScope[33], g_EntitySentry[33],roundended[33]
new SteadyAim[33],Ninja[33],SOH[33],DangerClose[33]

// Equipments stuff

new player_c4[33][2] 		// stores ent#
new player_claymore[33][2] 	// stores ent# (only 2 of them per person)
new player_ti[33] 		// stores ent# (only 1)

const FFADE_IN 		= 0x0000
const FFADE_OUT 	= 0x0001
const FFADE_MODULATE 	= 0x0002
const FFADE_STAYOUT 	= 0x0004
new x,y

public plugin_init() {
	register_plugin(PLUGIN, VERSION, AUTHOR)
	md_init()
	
	register_event("DeathMsg", "Event_Death", "a")
	register_event("HLTV", "Event_NewRound", "a", "1=0", "2=0")
	register_event("SendAudio", "eEndRound", "a", "2&%!MRAD_terwin", "2&%!MRAD_ctwin", "2&%!MRAD_rounddraw")
	register_event("Damage","event_Damage","b","2!0","3=0","4!0")
	register_event("CurWeapon","event_CurWeapon","be","1=1")
	register_message(get_user_msgid("HideWeapon"), "msgHideHealth")
	register_touch("bomb2", "*", "touchedbomb2");
	
	// catch shot event (credits to VEN)
	unregister_forward(FM_PrecacheEvent, g_fwid, 1)
	register_forward(FM_PlaybackEvent, "fw_PlaybackEvent")
	
	register_logevent("Event_RoundStart", 2, "1=Round_Start")
	
	register_forward(FM_ClientCommand , "Fw_ClientCommand")
	register_forward(FM_UpdateClientData, "fwUpdateClientData", 1)
	register_forward(FM_CmdStart,"fw_CmdStart")
	
	RegisterHam(Ham_Spawn, "player", "PlayerSpawn",1)
	RegisterHam(Ham_Killed, "player", "PlayerDeath")
	RegisterHam(Ham_Player_PreThink, "player", "fw_Player_PreThink")
	RegisterHam(Ham_TakeDamage, "player", "Ham_TakeDamage_Pre", 0)
	
	RegisterHam(Ham_Weapon_SecondaryAttack, "weapon_scout", "fw_ScoutSecondaryAttack_Post", 1)
	RegisterHam(Ham_Weapon_SecondaryAttack, "weapon_awp", "fw_ScoutSecondaryAttack_Post", 1)
	RegisterHam(Ham_Weapon_SecondaryAttack, "weapon_g3sg1", "fw_ScoutSecondaryAttack_Post", 1)
	RegisterHam(Ham_Weapon_SecondaryAttack, "weapon_sg550", "fw_ScoutSecondaryAttack_Post", 1)
	RegisterHam(Ham_Weapon_SecondaryAttack, "weapon_m4a1", "fw_M4A1SecondaryAttack", 1)
	RegisterHam(Ham_Weapon_SecondaryAttack, "weapon_usp", "fw_USPSecondaryAttack", 1)
	RegisterHam(Ham_Weapon_SecondaryAttack, "weapon_famas", "fw_USPSecondaryAttack", 1)
	
	RegisterHam(Ham_Weapon_PrimaryAttack, "weapon_glock18", "CGLOCK18_PrimaryAttack_Post", true)
	RegisterHam(Ham_Weapon_PrimaryAttack, "weapon_ump45", "CVECTOR_PrimaryAttack_Post", true)
	RegisterHam(Ham_Weapon_PrimaryAttack, "weapon_mac10", "CUZI_PrimaryAttack_Post", true)
	RegisterHam(Ham_Weapon_PrimaryAttack, "weapon_awp", "CAWP_PrimaryAttack_Post", true)
	
	RegisterHam(Ham_TraceAttack, "player", "fw_TraceAttack_Intervention")
	RegisterHam(Ham_Item_Deploy, "weapon_hegrenade", "CThrowable_Deploy", 1)
	RegisterHam(Ham_Item_Deploy, "weapon_flashbang", "CThrowable_Deploy", 1)
	
	register_logevent("EVENT_CTWIN", 6, "3=CTs_Win", "3=All_Hostages_Rescued")
	register_logevent("EVENT_TWIN", 6, "3=Terrorists_Win", "3=Target_Bombed")
	register_message(get_user_msgid("DeathMsg"), "message_DeathMsg")
	
	// 2 = CSW_SHIELD = UNDEFINED | PUT SHOTGUNS HERE TO SKIP IN LOOP AND REGISTER MANUALLY
	new const NO_RELOAD = ( 1 << 2 ) | ( 1 << CSW_KNIFE ) | ( 1 << CSW_C4 ) | ( 1 << CSW_M3 ) |
		( 1 << CSW_XM1014 ) | ( 1 << CSW_HEGRENADE ) | ( 1 << CSW_FLASHBANG ) | ( 1 << CSW_SMOKEGRENADE );
	
	new szWeaponName[ 20 ];
	for( new i = CSW_P228; i <= CSW_P90; i++ ) {
		if( NO_RELOAD & ( 1 << i ) )
			continue;
		
		get_weaponname( i, szWeaponName, 19 );
		
		RegisterHam( Ham_Weapon_Reload, szWeaponName, "FwdHamWeaponReload", 1 );
	}
	
	RegisterHam( Ham_Weapon_Reload, "weapon_m3",     "FwdHamShotgunReload", 1 );
	RegisterHam( Ham_Weapon_Reload, "weapon_xm1014", "FwdHamShotgunReload", 1 );
	
	new sWeapon[32]
	for(new i=1; i<=CSW_P90; i++)
		if(!(NOCLIP_WPN_BS&(1<<i)) && !(SHOTGUNS_BS&(1<<i)) && get_weaponname(i, sWeapon, charsmax(sWeapon)))
			RegisterHam(Ham_Weapon_Reload, sWeapon, "Weapon_Reload", 1)
	
	#if defined XACCURATE
	register_forward(FM_StartFrame, "fw_StartFrame")
	#endif
	
	g_maxplayers = get_maxplayers()
	g_msgDeathMsg 	= get_user_msgid("DeathMsg")
	
	g_pChat    = register_cvar( "rr_chat",    "1" );
	g_pPercent = register_cvar( "rr_percent", "55" );
	
	g_iMsgTextMsg   = get_user_msgid( "TextMsg" );
	g_iMsgSendAudio = get_user_msgid( "SendAudio" );
	
	pSpeed = register_cvar("sprint_szybkosc","450.0")
	pZmeczenie = register_cvar("sprint_zmeczenie","9999");
	
	register_concmd("open_ks_menu", "killstreak_menu")
	register_concmd("open_pk_menu", "perk_menu")
	register_concmd("+fast_run","startMove")
	register_concmd("-fast_run","stopMove")
	register_concmd("auto_nade_h", "auto_nade_h")
	register_concmd("auto_nade_f", "auto_nade_f")
	register_concmd("maxlvl", "crx_maxlvl")
	
	register_concmd("hudt", "hud_test")
	x = register_cvar("pos_x", "0.4")
	y = register_cvar("pos_y", "0.4")
	
	#if !defined XACCURATE
	set_task(0.1, "fw_StartFrame", _, _, _, "b")
	#endif
	
	// uav loop
	set_task(2.0,"radar_scan",_,_,_,"b");
	
	// sentry think
	#if defined XACCURATE
	set_task(0.1, "sentry_think", _, _, _, "b")
	#endif
	
	//set_task(1.0,"msg_hideheatlh",_,_,_,"b")
	
	set_cvar_num("mp_consistency", 0)
	
	new szModName[ 6 ];
	get_modname( szModName, 5 );
	
	if( equal( szModName, "czero" ) )
		register_event( "Location", "EventLocation", "be" );

}
public pred(id)
{
	use_pred(id)
}
public md_init()
{
	md_loadimage("gfx/crosshairs/vertical.tga")
	md_loadimage("gfx/crosshairs/horizontal.tga")
	
	md_loadimage("gfx/killstreaks/carepack_air.tga")
	md_loadimage("gfx/killstreaks/carepack_predator.tga")
	md_loadimage("gfx/killstreaks/carepack_sentrygun.tga")
	md_loadimage("gfx/killstreaks/carepack_uav.tga")
	md_loadimage("gfx/killstreaks/carepack_stealth.tga")
	md_loadimage("gfx/killstreaks/killstreak_carepackage.tga")
	md_loadimage("gfx/killstreaks/killstreak_air.tga")
	md_loadimage("gfx/killstreaks/killstreak_nuke.tga")
	md_loadimage("gfx/killstreaks/killstreak_sentry2.tga")
	md_loadimage("gfx/killstreaks/killstreak_predator.tga")
	md_loadimage("gfx/killstreaks/killstreak_stealth.tga")
	md_loadimage("gfx/killstreaks/killstreak_uav.tga")
	md_loadimage("gfx/nukeon.tga")
	md_loadimage("gfx/killstreaks/fuzz_radar.tga")
	
	md_loadimage("gfx/killstreaks/sentry/sentry_deployed.tga")
	
	//bloodscreen
	md_loadimage("gfx/bloodscr/bloodlvl3.tga")
	
	//hitmark
	md_loadimage("gfx/hitmark.tga")
	md_loadimage("gfx/chwpn.tga")
	
	//hudteam
	md_loadimage("gfx/opforhud.tga")
	md_loadimage("gfx/rangerhud.tga")
	
	//roundstart
	md_loadimage("gfx/roundstart/instructions.tga")
	md_loadimage("gfx/roundstart/opforlogo.tga")
	md_loadimage("gfx/roundstart/rangerlogo.tga")
	
	//roundend
	md_loadimage("gfx/roundend/rangerlogo.tga")
	md_loadimage("gfx/roundend/opforlogo.tga")
	md_loadimage("gfx/roundend/victory.tga")
	md_loadimage("gfx/roundend/defeat.tga")
	
	//killmark
	md_loadimage("gfx/killmark/defaultkill2.tga")
	md_loadimage("gfx/killmark/doublekill2.tga")
	md_loadimage("gfx/killmark/triplekill2.tga")
	md_loadimage("gfx/killmark/multikill2.tga")
	md_loadimage("gfx/killmark/headshot.tga")
	
	//font
	md_loadfontfile("gfx/test/BankGothic Md BT Medium.ttf")
	
	for(new i = 0; i < MAX_TEXT_CHANNEL;i++)
	{
		md_initfont(i, "BankGothic Md BT", 22, FS_ANTIALIAS | FS_DROPSHADOW)
	}
	
	md_loadsprite("sprites/overviews/iEnemy.spr")
	md_loadimage("gfx/rightside.tga")
	md_loadimage("gfx/nuke/nukeeffect2.tga")
}
public plugin_precache()
{
	precache_generic(ambience_s)
	
	precache_sound(nuke_alert)
	precache_sound(nuke_explo)
	precache_model(nuke_caller)
	precache_sound(nuke_give)
	precache_sound(uav_give)
	precache_sound(uav_online)
	
	precache_sound(sentry_give)
	precache_sound(sentry_online)
	
	precache_model(sentry_model)
	precache_sound(sentry_start)
	precache_sound(sentry_shoot)
	precache_sound(sentry_stop)
	precache_sound(sentry_gone)
	
	precache_sound(carepackage_give)
	precache_sound(carepackage_online)
	
	precache_sound(predm_give)
	precache_sound(predm_friend)
	
	precache_model(PACKAGE_HELI_MODEL)
	precache_sound(STEALTH_FLYBY_SOUND)
	precache_model(PACKAGE_PACK_MODEL)
	precache_sound(PICKUP_SOUND)
	
	precache_model(ROCKET_MDL)
	precache_sound(PR_FLY_START)
	precache_sound(PR_FLY_STOP)
	precache_sound(PR_EXPL_SOUND)
	
	precache_generic("sprites/overviews/iEnemy.spr")
	
	precache_model("models/p_hegrenade.mdl");
	sprite_blast = precache_model("sprites/dexplo.spr");
	
	precache_model(airs_model)
	precache_model(airs_bomb)
	precache_sound(airs_fly)
	precache_sound(airs_give)
	precache_sound(airs_friend)
	
	precache_sound("mw/nuke_friend.wav");
	precache_sound("mw/nuke_enemy.wav");
	precache_sound("mw/nuke_give.wav");
	
	precache_sound("mw/jet_fly1.wav");
	precache_sound("mw/heli_fly.wav");
	//precache_sound("mw/jet_fly2.wav");
	
	precache_sound("mw/emp_effect.wav");
	precache_sound("mw/emp_friend.wav");
	precache_sound("mw/emp_enemy.wav");
	precache_sound("mw/emp_give.wav");
	
	precache_sound("mw/counter_friend.wav");
	precache_sound("mw/counter_enemy.wav");
	precache_sound("mw/counter_give.wav");
	
	precache_sound("mw/air_friend.wav");
	precache_sound("mw/air_enemy.wav");
	precache_sound("mw/air_give.wav");
	
	precache_sound("mw/stealth_give.wav");
	precache_sound("mw/stealth_give.wav");
	
	precache_sound("mw/predator_friend.wav");
	precache_sound("mw/predator_enemy.wav");
	precache_sound("mw/predator_give.wav");
	
	precache_sound("mw/uav_friend.wav");
	precache_sound("mw/uav_enemy.wav");
	precache_sound("mw/uav_give.wav");
	
	precache_sound("mw/carepackage_friend.wav");
	precache_sound("mw/carepackage_enemy.wav");
	precache_sound("mw/carepackage_give.wav");
	
	precache_sound("mw/firemw.wav");
	precache_sound("mw/plant.wav");
	precache_sound("mw/select.wav");
	precache_sound("mw/sentrygun_starts.wav");
	precache_sound("mw/sentrygun_stops.wav");
	precache_sound("mw/sentrygun_gone.wav");
	precache_sound("mw/sentrygun_friend.wav");
	precache_sound("mw/sentrygun_enemy.wav");
	precache_sound("mw/sentrygun_give.wav");
	precache_sound("mw/deployingsentry.wav");
	precache_sound("mw/sentrydeployed.wav");
	
	precache_model("models/v_knife3.mdl")
	
	for(new i = 0; i < 4; i++)
		precache_sound(hitmark_s[i])
	for(new i = 0; i < sizeof(multikill);i++)
		precache_sound(multikill[i])
	for(new i = 0; i < sizeof(ks_spr);i++)
		precache_model(ks_spr[i])
	
	precache_sound("weapons/explode1.wav")
	
	spr_white = precache_model("sprites/white.spr")
	spr_explosion 	= precache_model("sprites/fexplo1.spr")
	
	for( new i; i < sizeof SOUNDS; i++ )
		precache_sound( SOUNDS[ i ] );
	
	precache_model("models/null.mdl")
	
	spr_smoke 	= precache_model("sprites/smoke_ia.spr")
	
	laser = precache_model("sprites/laserbeam.spr")
	
	server_cmd("bind b open_ks_menu")
	server_cmd("bind i open_pk_menu")
	server_cmd("bind t buy")
	server_cmd("bind shift +sprint ; -sprint")
	server_cmd("bind f drop")
	server_cmd("bind h auto_nade_f")
	server_cmd("bind g auto_nade_h")
	server_cmd("bind e +use ; -use")
	
	m_iBlood[0] = precache_model("sprites/blood.spr")
	m_iBlood[1] = precache_model("sprites/bloodspray.spr")
	
	// catch shot event (credits to VEN)
	g_fwid = register_forward(FM_PrecacheEvent, "fw_PrecacheEvent", 1)
}
public EventLocation( const id ) { // Condition Zero
	if( !g_bLocation )
		g_bLocation = true;
	
	if( read_data( 1 ) == id )
		read_data( 2, g_szLocation[ id ], 31 );
}

public FwdHamWeaponReload( const iWeapon )
	if( get_pdata_int( iWeapon, m_fInReload, 4 ) ) // m_fInReload is set to TRUE in DefaultReload( )
		DoRadio( get_pdata_cbase( iWeapon, m_pPlayer, 4 ) );

public FwdHamShotgunReload( const iWeapon ) {
	if( get_pdata_int( iWeapon, m_fInSpecialReload, 4 ) != 1 )
		return;
	
	// The first set of m_fInSpecialReload to 1. m_flTimeWeaponIdle remains 0.55 set from Reload( )
	new Float:flTimeWeaponIdle = get_pdata_float( iWeapon, m_flTimeWeaponIdle, 4 );
	
	if( flTimeWeaponIdle != 0.55 )
		return;
	
	DoRadio( get_pdata_cbase( iWeapon, m_pPlayer, 4 ) );
}
public message_DeathMsg()
{
	new killer = get_msg_arg_int(1);
	if(MainKiller[0] & (1<<killer))
	{
		set_msg_arg_string(4, "blank");
		return PLUGIN_CONTINUE;
	}
	if(MainKiller[1] & (1<<killer))
	{
		set_msg_arg_string(4, "sentry");
		return PLUGIN_CONTINUE;
	}
	if(MainKiller[2] & (1<<killer))
	{
		set_msg_arg_string(4, "predator");
		return PLUGIN_CONTINUE;
	}
	if(MainKiller[3] & (1<<killer))
	{
		set_msg_arg_string(4, "nuke");
		return PLUGIN_CONTINUE;
	}
	if(MainKiller[4] & (1<<killer))
	{
		set_msg_arg_string(4, "airstrike");
		return PLUGIN_CONTINUE;
	}
	return PLUGIN_CONTINUE;
}
DoRadio( const id ) {
	new iClip, iWeapon  = get_user_weapon( id, iClip );
	new Float:flPercent = floatmul( float( iClip ) / g_iMaxClip[ iWeapon ], 100.0 );
	new Float:flCvar    = get_pcvar_float( g_pPercent );
	
	if( flPercent > flCvar )
		return;
	
	new iPlayers[ 32 ], szId[ 3 ], szName[ 32 ], iNum, iPlayer, iTeam = get_pdata_int( id, m_iTeam, 5 );
	get_players( iPlayers, iNum, "c" );
	get_user_name( id, szName, 31 );
	num_to_str( id, szId, 2 );
	
	new szSound[ 32 ];
	copy( szSound, 31, SOUNDS[ random( sizeof( SOUNDS ) ) ] );
	
	new bool:bChat = bool:!!get_pcvar_num( g_pChat );
	
	for( new i; i < iNum; i++ ) {
		iPlayer = iPlayers[ i ];
		
		if( iTeam != get_pdata_int( iPlayer, m_iTeam, 5 ) )
			continue;
		
		if( bChat ) {
			emessage_begin( MSG_ONE_UNRELIABLE, g_iMsgTextMsg, _, iPlayer );
			ewrite_byte( 5 );
			ewrite_string( szId );
			ewrite_string( g_bLocation ? "#Game_radio_location" : "#Game_radio" );
			ewrite_string( szName );
			
			if( g_bLocation )
				ewrite_string( g_szLocation[ id ] );
			
			ewrite_string( MESSAGE );
			emessage_end( );
		}
		
		emessage_begin( MSG_ONE_UNRELIABLE, g_iMsgSendAudio, _, iPlayer );
		ewrite_byte( id );
		ewrite_string( szSound );
		ewrite_short( PITCH_NORM );
		emessage_end( );
	}
}

public PlayerSpawn(id){
	if(!is_user_alive(id)) return
	
	g_CountDown = 10;
	PointNuke[id] = 0;
	g_usinglaptop[id] = 0
	g_HasNukeCaller[id] = 0;
	PointUAV[id] = 0;
	PointSentry[id] = 0;
	enable_radar[id] = false;
	PointCarePackage[id] = 0;
	PointStealth[id] = 0
	PointPredM[id] = 0;
	PointAIRS[id] = 0;
	IsDefusing[id] = false
	teamhud(id)
	cek_team_status(id)
}
public PlayerDeath(id){
	g_CountDown = 10;
	g_usinglaptop[id] = 0
	PointNuke[id] = 0;
	PointUAV[id] = 0;
	PointSentry[id] = 0;
	PointCarePackage[id] = 0;
	PointStealth[id] = 0;
	enable_radar[id] = false;
	PointPredM[id] = 0;
	PointAIRS[id] = 0;
	g_iKillCount[id] = 0;
	IsDefusing[id] = false
	g_iKill[id] = 0
	removetext(id)
	removeimage(id)
	md_removedrawing(id, 1, 1)
}
public GameLoop(taskid)
{
	static id; id = taskid - TASK_MAINLOOP
	
	// picking up care package?
	care_package_check(id)
}
public client_connect(id)
{
	reset_player_vars(id)
	reset_player_effect(id)
	remove_all_effect(id)
	GameNewRound = 0;
}
public client_disconnected(id){
	removetext(id)
	removeimage(id)
	GameNewRound = 0;
	reset_player_vars(id)
	reset_player_effect(id)
	remove_all_effect(id)
}

public removetext(id)
{
	for(new i = 0; i < MAX_TEXT_CHANNEL;i++)
	{
		md_removedrawing(id, 0, i);
	}
}
public removeimage(id)
{
	for(new i = 0; i < MAX_IMAGE_CHANNEL;i++){
		md_removedrawing(id, 1, i)
	}
}

public client_putinserver(id) 
{
	reset_player_vars(id)
	reset_player_effect(id)
	remove_all_effect(id)
	remove_hud(id)
	crx_maxlvl(id)
	
	set_task(USUR, "GameLoop", TASK_MAINLOOP+id, _, _, "b")
	if(is_user_bot(id))
	{
		set_task(0.1, "Do_Register_HamBot", id)
	}
}
public teamhud(id)
{
	if(get_user_team(id) == TEAM_T){
		md_drawimage(id, 2, 0, "gfx/opforhud.tga", 0.0, 0.0, 0, 0, 255,255,255,255, 0.0, 0.0, 9999.0, ALIGN_BOTTOM)
	}
	if(get_user_team(id) == TEAM_CT){
		md_drawimage(id,2, 0, "gfx/rangerhud.tga", 0.0, 0.0, 0, 0, 255,255,255,255, 0.0, 0.0, 9999.0, ALIGN_BOTTOM)
	}
	md_drawimage(id, 5, 0, "gfx/rightside.tga", 0.5, 0.0, 0, 0, 255,255,255,255, 0.0, 0.0, 0.0, ALIGN_BOTTOM)
	set_task(1.0, "teamhud",id)
}
public Do_Register_HamBot(id)
{
	RegisterHamFromEntity(Ham_TraceAttack, id, "fw_TraceAttack_Intervention")
}
public reset_player_effect(id)
{
	remove_task(TASK_MAINLOOP+id)
	remove_task(TASK_CAREPACKAGE+id)
	for(new i = 0; i < MAX_TEXT_CHANNEL;i++){
		md_removedrawing(id, 0, i)
	}
}
public reset_player_vars(id)
{
	g_iKill[id] = 0
	g_iRounds = 0;
	g_MyPoints[id] = 0;
	had_knife[id] = false
	melee_time[id] = 0.0
	g_UsePerk[id] = false;
	g_PerkType[id] = PERK_NONE;
	g_PerkName[id] = NONE;
	PointNuke[id] = 0;
	PointPredM[id] = 0;
	PointAIRS[id] = 0;
	PointUAV[id] = 0;
	PointSentry[id] = 0;
	PointCarePackage[id] = 0;
	takepck[id] = false;
	g_CountDown = 10;
	g_Enable[id] = 0;
	g_iKillMode[id] = KILL_NONE;
	g_IsScope[id] = 0;
	g_iKillCount[id] = 0;
	g_HasUAV[id] = 0;
	g_HasCarePackage[id] = 0
	g_HasSentry[id] = 0
	g_PredMissile[id] = 0
	g_HasAirstrike[id] = 0
	IsDefusing[id] = false
	PointStealth[id] = 0;
	HadStealth[id] = 0;
	user_stealth[id] = 0;
	enable_radar[id] = false;
	SteadyAim[id] = 0
	Ninja[id] = 0
	SOH[id] = 0
	DangerClose[id] = 0
}
public remove_all_effect(id)
{
	client_cmd(id, "mp_footsteps 1")
	engclient_cmd(id, "mp_footsteps 1")
	client_cmd(id, "mp_consistency 0")
	engclient_cmd(id, "mp_consistency 0")
	client_cmd(id,"bind shift +speed");
	engclient_cmd(id,"bind shift +speed");
}
public Fw_ClientCommand(id)
{
	new sCmd[32]
	read_argv(0,sCmd,31)
	
	if(equal(sCmd,"lastinv") || equal(sCmd,"weapon_",7)){
		if(g_usinglaptop[id]) {
			return FMRES_SUPERCEDE
		}
		if(g_IsScope[id])
		{
			g_IsScope[id] = 0;
		}
	}else if(equal(sCmd,"drop") || equal(sCmd,"weapon_",7)){
		if(g_IsScope[id])
		{
			g_IsScope[id] = 0;
		}
	}
	
	return FMRES_IGNORED
}

public Event_NewRound(){
	
	id_nuker = 0
	GameNewRound = 1
	
	remove_entity_name(sentrybase_classname)
	remove_entity_name(sentry_classname)
	remove_entity_name(sentryblt_classname)
	remove_entity_name("care_package")
	
	hasUAV[TEAM_T] = false
	hasUAV[TEAM_CT] = false
	uavEndTime[TEAM_T] = 0.0
	uavEndTime[TEAM_CT] = 0.0
	
	//g_iRounds++
	
	TKills = 0;
	CTKills = 0;
	
	// clean up sentry guns
	sentry_cleanup()
	new players[32],num,a;
	get_players(players, num, "gh")
	for(a=0;a<num;a++)
	{
		a = players[a]
		if(!is_user_connected(a)) continue;
		reset_player_vars(a)
		crx_maxlvl(a)
		md_removedrawing(a, 5, 1)
		remove_all_effect(a)
		remove_entity_name("care_package")
	}
}
public cek_team_status(id)
{
	if(!is_user_alive(id)) return
	if(!GameNewRound) return
	if(get_user_team(id) == TEAM_T)
	{
		md_drawimage(0, 1, 0, "gfx/roundstart/opforlogo.tga", 0.4,  0.1, 0, 0, 255,255,255,255, 0.0, 0.3, 3.0, ALIGN_NORMAL)
	}
	if(get_user_team(id) == TEAM_CT){
		md_drawimage(0, 1, 0, "gfx/roundstart/rangerlogo.tga", 0.4,  0.1, 0, 0, 255,255,255,255, 0.0, 0.3, 3.0, ALIGN_NORMAL)
	}
	
	set_task(1.07, "cek_team_status", id,_,_,"b")
}
	
public Event_RoundStart(id)
{
	set_task(2.0, "message_open", id)
	//set_task(5.0, "bot_misc", id)
	GameNewRound = 0;
	roundended[id] = 0
	if(is_user_alive(id) && !is_user_bot(id) && pev(id, pev_takedamage) == DAMAGE_NO)
	{
		set_pev(id, pev_takedamage, DAMAGE_AIM)
	}
	//set_task(1.0,"remove_hud", id,_,_,"b")
	client_cmd(0, "mp3 play %s",ambience_s)
	set_task(342.0, "background", id, _, _, "b")
	//client_cmd(0, "bot_prefix [AI]")
	client_cmd(0, "MP3Volume 0.5")
	md_drawimage(0, 1, 0, "gfx/roundstart/instructions.tga", 0.3,  0.1, 0, 0, 255,255,255,255, 0.3, 0.3, 3.0, ALIGN_NORMAL)
}
public crx_maxlvl(id)
{
	if(!is_user_connected(id)) return;
	
	new Name[32];
	get_user_name( id, Name, charsmax(Name) );
	get_user_info( id, "name", Name, charsmax(Name) );
	client_cmd(id, "crxranks_give_xp %s 250000", Name)
}
public background(id)
{
	if(!roundended[id])
		client_cmd(0, "mp3 play %s",ambience_s)
	return PLUGIN_CONTINUE;
}
public eEndRound()
{
	for ( new i = 1; i <= g_maxplayers; i++ )
	{
		roundended[i] = true;
	}
	return PLUGIN_CONTINUE;
}
public event_defusing()
{
	new p[32],num,a;
	get_players(p,num,"a")
	for(a = 0;a<num;a++)
	{
		a = p[a];
		if(!is_user_connected(a)) return
		
		IsDefusing[a] = true;
	}
}
public msgHideHealth()
{
	set_msg_arg_int(1, ARG_BYTE, (1<<3))
	set_msg_arg_int(1, ARG_BYTE, 8)
}
public msg_hideheatlh(id)
{
	if(!is_user_connected(id)) return
	
	message_begin(MSG_ONE, get_user_msgid("HideWeapon"), _, id)
	write_byte(8)
	message_end()
}
public hud_timeleft()
{
	new sztime[32],gtime[32]
	new g_roundtime = get_timeleft()
	get_time("%M : %S", gtime,charsmax(gtime))
	
	formatex(sztime, 31, "%02d : %02d", (g_roundtime / 60), (g_roundtime % 60))
	md_drawtext(0, 7, sztime, 0.07, 0.83, 0, 0, 255,255,255,255, 0.0, 0.2, 0.0, ALIGN_NORMAL)
}
public message_open(id)
{
	client_print(id, print_chat, "[CODMW2] Welcome to CS 1.6 Modern Warfare 2")
	set_task(3.0, "message_open2", id)
}
public message_open2(id)
{
	client_print(id, print_chat,"[CODMW2] Press B key to open Killstreak Menu");
	set_task(2.0, "message_open3", id)
}
public message_open3(id)
{
	client_print(id, print_chat,"[CODMW2] Press I key to open Perks Menu");
}
public Event_Death()
{	
	new Attacker = read_data(1)
	new Victim = read_data(2)
	new HeadShot = read_data(3)
	
	if(g_iKillMode[Attacker] == KILL_NUKE || g_iKillMode[Attacker] == KILL_STREAK)
		return
		
	if(Attacker == Victim || !is_user_connected(Attacker)) return
	
	g_iKill[Attacker] ++
	g_iKillCount[Attacker] ++
	g_iKillMode[Attacker] = KILL_NONE
	
	PointUAV[Attacker] = g_iKill[Attacker]
	PointSentry[Attacker] = g_iKill[Attacker]
	PointCarePackage[Attacker] = g_iKill[Attacker]
	PointPredM[Attacker] = g_iKill[Attacker]
	PointAIRS[Attacker] = g_iKill[Attacker]
	PointNuke[Attacker] = g_iKill[Attacker]
	//PointStealth[Attacker] = g_iKill[Attacker]
	
	//killmark
	if(g_iKillCount[Attacker] == 1)
	{
		md_drawimage(Attacker, 3, 0, "gfx/killmark/defaultkill2.tga", 0.6,  0.2, 0, 0, 255,255,255,255, 0.0, 0.3, 1.0, ALIGN_NORMAL)
	}else if(g_iKillCount[Attacker] == 2){
		PlaySound(Attacker, multikill[0])
		md_drawimage(Attacker, 3, 0, "gfx/killmark/doublekill2.tga", 0.6,  0.2, 0, 0, 255,255,255,255, 0.0, 0.3, 1.0, ALIGN_NORMAL)
	}else if(g_iKillCount[Attacker] == 3){
		PlaySound(Attacker, multikill[0])
		md_drawimage(Attacker, 3, 0, "gfx/killmark/triplekill2.tga", 0.6,  0.2, 0, 0, 255,255,255,255, 0.0, 0.3, 1.0, ALIGN_NORMAL)
	}else if(g_iKillCount[Attacker] > 3){
		PlaySound(Attacker, multikill[0])
		md_drawimage(Attacker, 3, 0, "gfx/killmark/multikill2.tga", 0.6,  0.2, 0, 0, 255,255,255,255, 0.0, 0.3, 1.0, ALIGN_NORMAL)
	}
	
	new szNewName[32], Killmsg[32]
	get_user_name( Victim, szNewName, charsmax(szNewName) );
	get_user_info( Victim, "name", szNewName, charsmax(szNewName) );
	
	format(Killmsg, 31, "You Killed %s", szNewName)
	
	//set_hudmessage(50, 100, 100, -1.0, 0.7, 0, 6.0, 1.5)
	//ShowSyncHudMsg(Attacker,CreateHudSyncObj(), "You Killed %s",szNewName)
	md_drawtext(Attacker, 4, Killmsg, 0.4, 0.8, 0, 0, 255,255,255,255, 0.0, 0.5, 1.5, ALIGN_NORMAL)
	
	if(HeadShot){
		g_MyPoints[Attacker] += POINT_KILL_HS
		
		//set_hudmessage(0, 255, 0, 0.4, 0.4, 0, 6.0, 1.5)
		//ShowSyncHudMsg(Attacker, CreateHudSyncObj(), "Headshot + %i",POINT_KILL_HS)
		md_drawimage(Attacker, 3, 0, "gfx/killmark/headshot.tga", 0.6,  0.2, 0, 0, 255,255,255,255, 0.0, 0.3, 1.0, ALIGN_NORMAL)
		
		PlaySound(Attacker, multikill[0])
		
		
	}else{
		//set_hudmessage(0, 255, 0, 0.4, 0.4, 0, 6.0, 1.5)
		//ShowSyncHudMsg(Attacker, CreateHudSyncObj(), "Normal Kill + %i",POINT_KILL)
		g_MyPoints[Attacker] += POINT_KILL
	}
	
	if(!g_Enable[Attacker] && PointNuke[Attacker] == TacticalNuke_Point){
		PlaySound(Attacker, nuke_give)
		md_drawimage(Attacker, 0, 0, "gfx/killstreaks/killstreak_nuke.tga", 0.01,  0.1, 0, 0, 255,255,255,255, 0.0, 0.3, 1.0, ALIGN_NORMAL)
		//client_print(Attacker, print_center, "%i Kill Streak Tactical Nuke OPEN [B] to use menu",TacticalNuke_Point)
	}
	
	if(!g_HasUAV[Attacker] && PointUAV[Attacker] == UAV_Points)
	{
		md_drawimage(Attacker, 0, 0, "gfx/killstreaks/killstreak_uav.tga", 0.01,  0.1, 0, 0, 255,255,255,255, 0.0, 0.3, 1.0, ALIGN_NORMAL)
		//client_print(Attacker, print_center, "%i Kill Streak UAV OPEN [B] to use menu",UAV_Points)
		//emit_sound(Attacker, CHAN_VOICE, "mw/uav_give.wav", VOL_NORM,ATTN_NORM,0,PITCH_NORM)
		PlaySound(Attacker, "mw/uav_give.wav")
	}
	if(!g_HasSentry[Attacker] && PointSentry[Attacker] == Sentrygun_Point)
	{
		md_drawimage(Attacker, 0, 0, "gfx/killstreaks/killstreak_sentry2.tga", 0.01,  0.1, 0, 0, 255,255,255,255, 0.0, 0.3, 1.0, ALIGN_NORMAL)
		//emit_sound(Attacker, CHAN_VOICE, "mw/sentrygun_give.wav", VOL_NORM,ATTN_NORM,0,PITCH_NORM)
		PlaySound(Attacker, "mw/sentrygun_give.wav")
		//client_print(Attacker, print_center, "%i Kill Streak Sentrygun OPEN [B] to use menu",Sentrygun_Point)
	}
	if(!g_HasCarePackage[Attacker] && PointCarePackage[Attacker] == CarePackage_Point)
	{
		md_drawimage(Attacker, 0, 0, "gfx/killstreaks/killstreak_carepackage.tga", 0.01,  0.1, 0, 0, 255,255,255,255, 0.0, 0.3, 1.0, ALIGN_NORMAL)
		//emit_sound(Attacker, CHAN_VOICE,"mw/carepackage_give.wav", VOL_NORM,ATTN_NORM,0,PITCH_NORM)
		PlaySound(Attacker, "mw/carepackage_give.wav")
		//client_print(Attacker, print_center, "%i Kill Streak Carepackage OPEN [B] to use menu",CarePackage_Point)
	}
	if(!g_PredMissile[Attacker] && PointPredM[Attacker] == PredMissile_Point)
	{
		md_drawimage(Attacker, 0, 0, "gfx/killstreaks/killstreak_predator.tga", 0.01,  0.1, 0, 0, 255,255,255,255, 0.0, 0.3, 1.0, ALIGN_NORMAL)
		//emit_sound(Attacker, CHAN_VOICE, "mw/predator_give.wav", VOL_NORM,ATTN_NORM,0,PITCH_NORM)
		PlaySound(Attacker, "mw/predator_give.wav")
		//client_print(Attacker, print_center, "%i Kill Streak Predator Missile OPEN [B] to use menu",PredMissile_Point)
	}
	if(!g_HasAirstrike[Attacker] && PointAIRS[Attacker] == AirStrike_Point)
	{
		md_drawimage(Attacker, 0, 0, "gfx/killstreaks/killstreak_air.tga", 0.01,  0.1, 0, 0, 255,255,255,255, 0.3, 0.0, 1.0, ALIGN_NORMAL)
		//emit_sound(Attacker, CHAN_VOICE, "mw/air_give.wav", VOL_NORM,ATTN_NORM,0,PITCH_NORM)
		PlaySound(Attacker, "mw/air_give.wav")
		//client_print(Attacker, print_center, "%i Kill Streak Precision Airstrike OPEN [B] to use menu",AirStrike_Point)
	}
	if(!HadStealth[Attacker] && PointStealth[Attacker] == Point_StealthBomber)
	{
		md_drawimage(Attacker, 0, 0, "gfx/killstreaks/killstreak_stealth.tga", 0.01,  0.1, 0, 0, 255,255,255,255, 0.0, 0.3, 1.0, ALIGN_NORMAL)
		//emit_sound(Attacker, CHAN_VOICE, "mw/stealth_give.wav", VOL_NORM,ATTN_NORM,0,PITCH_NORM)
		PlaySound(Attacker, "mw/stealth_give.wav")
	}
	
	if(!g_Enable[Attacker] && PointNuke[Attacker] >= TacticalNuke_Point){
		g_Enable[Attacker] = 1;
	}
	if(!g_HasUAV[Attacker] && PointUAV[Attacker] >= UAV_Points){
		g_HasUAV[Attacker] = 1;
	}
	if(!g_HasSentry[Attacker] && PointSentry[Attacker] >= Sentrygun_Point){
		g_HasSentry[Attacker] = 1;
	}
	if(!g_HasCarePackage[Attacker] && PointCarePackage[Attacker] >= CarePackage_Point){
		g_HasCarePackage[Attacker] = 1;
	}
	
	if(!g_PredMissile[Attacker] && PointPredM[Attacker] >= PredMissile_Point){
		g_PredMissile[Attacker] = 1
	}
	
	if(!g_HasAirstrike[Attacker] && PointAIRS[Attacker] >= AirStrike_Point){
		g_HasAirstrike[Attacker] = 1;
	}
	if(!HadStealth[Attacker] && PointStealth[Attacker] >= Point_StealthBomber)
	{
		HadStealth[Attacker] = 1
	}
	
	
}
public bot_misc(id)
{
	//bot autouse?
	if(is_user_bot(id) && is_user_connected(id))
	{
		new rand = random_num(0,4)
		switch(rand)
		{
			case 0:
			{
				new num, players[32];
				get_players(players, num, "gh")
				for(new a = 0; a < num; a++)
				{
					new i = players[a]
					if(get_user_team(id) != get_user_team(i))
					{
						client_cmd(i, "spk mw/sentrygun_enemy.wav")
					}
					else
					{
						client_cmd(i, "spk mw/sentrygun_friend.wav")
					}
				}
			}
			case 1:
			{
				new num, players[32];
				get_players(players, num, "gh")
				for(new a = 0; a < num; a++)
				{
					new i = players[a]
					if(get_user_team(id) != get_user_team(i))
					{
						client_cmd(i, "spk mw/carepackage_enemy.wav")
					}
					else
					{
						client_cmd(i, "spk mw/carepackage_friend.wav")
					}
				}
			}
			case 2:
			{
				new num, players[32];
				get_players(players, num, "gh")
				for(new a = 0; a < num; a++)
				{
					new i = players[a]
					if(get_user_team(id) != get_user_team(i))
					{
						client_cmd(i, "spk mw/air_enemy.wav")
						CreateStealth(i)
					}
					else
					{
						client_cmd(i, "spk mw/air_friend.wav")
						CreateStealth(i)
					}
				}
			}
			case 3:
			{
				new num, players[32];
				get_players(players, num, "gh")
				for(new a = 0; a < num; a++)
				{
					new i = players[a]
					if(get_user_team(id) != get_user_team(i))
					{
						client_cmd(i, "spk mw/uav_enemy.wav")
					}
					else
					{
						client_cmd(i, "spk mw/uav_friend.wav")
					}
				}
			}
		}
	}
	
	set_task(random_float(5.0,9.0), "bot_misc", id)
}
public Ham_TakeDamage_Pre(victim, inflictor, attacker, Float:Damage, bits)
{
	if(bits & (1<<24))
	{
		if(victim == attacker || !is_user_connected(attacker)) return HAM_SUPERCEDE
		
		SetHamParamFloat(4, Damage * 6)
	}
	return HAM_IGNORED
}
public fw_TraceAttack_Intervention(Victim, Attacker, Float:Damage, Float:Direction[3], Ptr, DamageBits)
{
	if(!is_user_connected(Attacker))
		return HAM_IGNORED	
	
	new weapon = get_user_weapon(Attacker)
	switch(weapon)
	{
		case CSW_KNIFE:SetHamParamFloat(3, DAMAGE_STAB)
		case CSW_SCOUT:SetHamParamFloat(3, 50.0 * random_float(1.5,2.0))
		case CSW_AWP:SetHamParamFloat(3, 75.0 * random_float(1.5,2.0))
		case CSW_SG550:SetHamParamFloat(3, 45.0 * random_float(1.5,2.0))
		case CSW_G3SG1:SetHamParamFloat(3, 45.0 * random_float(1.5,2.0))
	}
	
	return HAM_IGNORED
}
public hud_scoreboard()
{
	set_dhudmessage(0, 255, 0, -1.0, 0.0, 0, 6.0, 12.0)
	show_dhudmessage(0, "[TR][ROUNDS][CT]^n[%i]	[  %i  ]	[%i]", TKills, g_iRounds, CTKills);
}
// catch shot event (credits to VEN)
public fw_PlaybackEvent(flags, invoker, eventid)
{
	if (!(g_guns_eventids_bitsum & (1<<eventid)) || !(1 <= invoker <= g_maxplayers))
		return FMRES_IGNORED
	
	static id; id = invoker
	
	// tracer
	new vec1[3], vec2[3]
	get_user_origin(id, vec1, 1)
	get_user_origin(id, vec2, 3)
	
	// tracer effect
	message_begin(MSG_BROADCAST, SVC_TEMPENTITY)
	write_byte(TE_TRACER)
	write_coord(vec1[0])
	write_coord(vec1[1])
	write_coord(vec1[2])
	write_coord(vec2[0])
	write_coord(vec2[1])
	write_coord(vec2[2])
	message_end()
	
	return FMRES_HANDLED
}
public fw_PrecacheEvent(type, const name[])
{
	for (new i = 0; i < sizeof g_guns_events; ++i)
	{
		if (equal(g_guns_events[i], name))
		{
			g_guns_eventids_bitsum |= (1<<get_orig_retval())
			return FMRES_HANDLED
		}
	}
	
	return FMRES_IGNORED
}
// glock18 Full-Auto (credits to ConnorMcLeod)
public CGLOCK18_PrimaryAttack_Post(iGlock)
{
	if (!is_valid_ent(iGlock)) return
	if(get_pdata_int(iGlock, m_iShotsFired, EXTRAOFFSET_WEAPONS))
	{
		set_pdata_int(iGlock, m_iShotsFired, 0, EXTRAOFFSET_WEAPONS)
		set_pdata_float(iGlock, m_flNextPrimaryAttack, get_pdata_float(iGlock, m_flNextPrimaryAttack, EXTRAOFFSET_WEAPONS) + 0.11 - 0.2, EXTRAOFFSET_WEAPONS)
	}
}
//vector
public CVECTOR_PrimaryAttack_Post(vector)
{
	if (!is_valid_ent(vector)) return
	set_pdata_float(vector, m_flNextPrimaryAttack, get_pdata_float(vector, m_flNextPrimaryAttack, EXTRAOFFSET_WEAPONS) + 0.16 - 0.2, EXTRAOFFSET_WEAPONS)
}
public CUZI_PrimaryAttack_Post(uzi)
{
	if (!is_valid_ent(uzi)) return
	set_pdata_float(uzi, m_flNextPrimaryAttack, get_pdata_float(uzi, m_flNextPrimaryAttack, EXTRAOFFSET_WEAPONS) + 0.20 - 0.2, EXTRAOFFSET_WEAPONS)
}
public CFAMAS_PrimaryAttack_Post(famas)
{
	static id; id = pev(famas, pev_owner)
	if(!is_user_alive(id)) return
	if (!is_valid_ent(famas)) return
	new iClip = get_pdata_int(famas, 51, 4)
	if(!(iClip % 3))
	{
		if(!iClip)
			return
		
		set_pdata_float(id, 83, 0.3, 5)
		set_pdata_float(famas, 48, 0.5, 4)
	}
}
public CAWP_PrimaryAttack_Post(we)
{
	static id; id = pev(we, pev_owner)
	if (!is_valid_ent(we)) return

	set_pdata_float(id, 83, 0.3, 5)
}
public fw_ScoutSecondaryAttack_Post(iEnt)
{
	if (!is_valid_ent(iEnt)) return
	static id; id = GET_owner(iEnt)
	if (!is_valid_player(id)) return
	switch(get_pdata_int(id, OFFSET_ZOOMTYPE, EXTRAOFFSET))
	{
		/*case CS_FIRST_ZOOM:
		{
			set_pdata_int(id, OFFSET_ZOOMTYPE, CS_SECOND_AWP_ZOOM, EXTRAOFFSET)
			make_ScreenFade(id, 0.2, 0, 0, 0, 255);
		}
		case CS_SECOND_AWP_ZOOM:
		{
			set_pdata_int(id, OFFSET_ZOOMTYPE, CS_NO_ZOOM, EXTRAOFFSET)
		}*/
		case CS_FIRST_ZOOM:make_ScreenFade(id, 0.2, 0, 0, 0, 255);
	}
}	

public fw_Player_PreThink(id){
	if(!is_user_connected(id))
		return
	
	//set_task(0.3, "weapon_must_be_reload_LOL", id+TASK_MUST_RELOAD)
	// predator missile control
	if(is_user_connected(id) && user_ctrl_pred[id] > 0)
	{
		static ent; ent = user_ctrl_pred[id]
		if (is_valid_ent(ent))
		{
			static Float:Velocity[3], Float:Angle[3]
			velocity_by_aim(id, user_pred_speed[id], Velocity)
			GET_v_angle(id, Angle)
			SET_velocity(ent, Velocity)
			SET_angles(ent, Angle)
		}
		else
			attach_view(id, id)
	}
	
	// silent steps
	if (Ninja[id]){
		SET_flTimeStepSound(id, 999)
	}
	
	//No Recoil
	if (SteadyAim[id]) SET_punchangle(id, Float:{0.0,0.0,0.0})
	
	//sprint mode thanks to DARKGL
	if(gFast[id]){
		set_pev(id, pev_button, pev(id,pev_button) & ~IN_ATTACK) 
		set_pev(id, pev_button, pev(id,pev_button) & ~IN_ATTACK2) 
		if(gZmeczenie[id] >= get_pcvar_num(pZmeczenie)*10){
			stopMove(id);
		}
	}

	if(giMoves[id] > 0){
		giMoves[id]--;
		gfPitch[id] += gfMoveOffset[id][0];
		gfYaw[id] += gfMoveOffset[id][1];
		engfunc(EngFunc_CrosshairAngle, id, gfPitch[id], gfYaw[id]);
	}
	
}

public weapon_check(id)
{
	new WeaponId,szw[32]
	for(new a=CSW_P228;a<=CSW_P90;a++)
	{
		get_weaponname(a, szw, charsmax(szw))
	}
	
	WeaponId = fm_find_ent_by_owner(-1, szw, id)
	if(!pev_valid(WeaponId)) return
	
	static iClip ; iClip = get_pdata_int(WeaponId, 51, 4)
	
	if(iClip < 6)
	{
		md_drawtext(id, 7, "RELOAD", 0.45, 0.6, 0, 0, 255,255,255,255, 0.2, 0.2, 0.2, ALIGN_NORMAL)
	}else{
		return;
	}
	
}
public fwUpdateClientData(id, sw, cd_handle)
{
	if(!is_user_alive(id)){ 
		return FMRES_IGNORED
	}
	if (SteadyAim[id])
		set_cd(cd_handle, CD_PunchAngle, {0.0,0.0,0.0})  
	
	if(gFast[id]){
		set_cd(cd_handle, CD_ID, 0) 
		return FMRES_HANDLED 
	}  
	
	return FMRES_IGNORED
}
public startMove(id){
	if(!gFast[id] && is_user_alive(id) && cs_get_user_zoom(id) == CS_SET_NO_ZOOM){
		if(GameNewRound) return PLUGIN_CONTINUE
		
		gfPitch[id] = gfYaw[id] = 0.0;
		moveTo(id, 0.0, 20.0);
		gFast[id] = true;
		engfunc(EngFunc_SetClientMaxspeed, id, g_fWeaponsSpeed[get_user_weapon(id)]+get_pcvar_float(pSpeed));
		remove_task(id)
		set_task(0.1,"addZmeczenie",id,_,_,"b")
	}
	return PLUGIN_HANDLED
}
public addZmeczenie(id){
	gZmeczenie[id]++;
}

public odejZmecznie(id){
	if(gZmeczenie[id] > 0){
		gZmeczenie[id]--;
	}
}
public stopMove(id){
	if(gFast[id] && is_user_alive(id)){
		if(GameNewRound) return PLUGIN_CONTINUE
		moveTo(id, 0.0, 0.0);
		gFast[id] = false;
		engfunc(EngFunc_SetClientMaxspeed, id, g_fWeaponsSpeed[get_user_weapon(id)]);
		remove_task(id)
		set_task(0.2,"odejZmecznie",id,_,_,"b")
	}
	return PLUGIN_HANDLED
}

moveTo(id, Float:fPitch, Float:fYaw, moves=30){
	gfMoveOffset[id][0] = (fPitch - gfPitch[id])/moves;
	gfMoveOffset[id][1] = (fYaw - gfYaw[id])/moves;
	giMoves[id] = moves;
}
public restore_health(id)
{
	static Float:flTime,Float:Health,Float:MaxHealth
	if(!is_user_alive(id)) return
	
	pev(id, pev_health,Health)
	pev(id, pev_max_health,MaxHealth)
	pev(id, pev_fuser4, flTime)
	
	if(flTime < get_gametime()){
		if(Health < MaxHealth)
		{
			Health += 15.0
		} else {
			Health = 100.0
			return
		}
		set_pev(id, pev_health,Health)
		set_pev(id, pev_fuser4, get_gametime() + 1.0)
	}
	
	
}
public restore_health2(id)
{
	if(!is_user_alive(id)) return
	
	new Health = get_user_health(id)
	static Float:flTime
	pev(id, pev_fuser4, flTime)
	
	if(flTime < get_gametime()){
		if(Health < 100)
		{
			set_user_health(id, Health + 15)
		} else {
			set_user_health(id, 100)
			return
		}
		set_pev(id, pev_fuser4, get_gametime() + 1.0)
	}
	
	
}
public event_CurWeapon(id)
{
	if(!is_user_alive(id)){
		return
	}
	// get the weapon
	static wid
	wid = read_data(2)
	
	g_currentweapon[id] = wid
	
	static iOldWeap[33];
	
	new weapon = read_data(2);
	if(gFast[id] && iOldWeap[id] != weapon){
		new szName[64];
		get_weaponname(iOldWeap[id],szName,charsmax(szName));
		engclient_cmd(id,szName);
		engfunc(EngFunc_SetClientMaxspeed, id, g_fWeaponsSpeed[get_user_weapon(id)]+get_pcvar_float(pSpeed));
		return 
	}
	
	iOldWeap[id] = weapon;
	
	weapon_info(id,clip,ammo)
	switch(get_user_weapon(id,clip,ammo))
	{
		case CSW_GLOCK18:
		{
			new msgammo[256]
			format(msgammo, 100, "%d|  %d", clip,ammo)
			md_drawtext(id, 100, msgammo, 0.73, 0.88, 0, 0, 255,255,255,255, 0.0, 0.0, 0.0, ALIGN_NORMAL)
		}
		case CSW_USP:
		{
			new msgammo[256]
			format(msgammo, 100, "%d|  %d", clip,ammo)
			md_drawtext(id, 100, msgammo, 0.73, 0.88, 0, 0, 255,255,255,255, 0.0, 0.0, 0.0, ALIGN_NORMAL)
		}
		case CSW_DEAGLE:
		{
			new msgammo[256]
			format(msgammo, 100, "%d|  %d", clip,ammo)
			md_drawtext(id, 100, msgammo, 0.73, 0.88, 0, 0, 255,255,255,255, 0.0, 0.0, 0.0, ALIGN_NORMAL)
		}
		case CSW_P228:
		{
			new msgammo[256]
			format(msgammo, 100, "%d|  %d", clip,ammo)
			md_drawtext(id, 100, msgammo, 0.73, 0.88, 0, 0, 255,255,255,255, 0.0, 0.0, 0.0, ALIGN_NORMAL)
		}
		case CSW_ELITE:
		{
			new msgammo[256]
			format(msgammo, 100, "%d|  %d", clip,ammo)
			md_drawtext(id, 100, msgammo, 0.73, 0.88, 0, 0, 255,255,255,255, 0.0, 0.0, 0.0, ALIGN_NORMAL)
		}
		case CSW_FIVESEVEN:
		{
			new msgammo[256]
			format(msgammo, 100, "%d|  %d", clip,ammo)
			md_drawtext(id, 100, msgammo, 0.73, 0.88, 0, 0, 255,255,255,255, 0.0, 0.0, 0.0, ALIGN_NORMAL)
		}
		case CSW_M3:
		{
			new msgammo[256]
			format(msgammo, 100, "%d|  %d", clip,ammo)
			md_drawtext(id, 100, msgammo, 0.73, 0.88, 0, 0, 255,255,255,255, 0.0, 0.0, 0.0, ALIGN_NORMAL)
		}
		case CSW_XM1014:
		{
			new msgammo[256]
			format(msgammo, 100, "%d|  %d", clip,ammo)
			md_drawtext(id, 100, msgammo, 0.73, 0.88, 0, 0, 255,255,255,255, 0.0, 0.0, 0.0, ALIGN_NORMAL)
		}
		case CSW_MAC10:
		{
			new msgammo[256]
			format(msgammo, 100, "%d|  %d", clip,ammo)
			md_drawtext(id, 100, msgammo, 0.73, 0.88, 0, 0, 255,255,255,255, 0.0, 0.0, 0.0, ALIGN_NORMAL)
		}
		case CSW_TMP:
		{
			new msgammo[256]
			format(msgammo, 100, "%d|  %d", clip,ammo)
			md_drawtext(id, 100, msgammo, 0.73, 0.88, 0, 0, 255,255,255,255, 0.0, 0.0, 0.0, ALIGN_NORMAL)
		}
		case CSW_MP5NAVY:
		{
			new msgammo[256]
			format(msgammo, 100, "%d|  %d", clip,ammo)
			md_drawtext(id, 100, msgammo, 0.73, 0.88, 0, 0, 255,255,255,255, 0.0, 0.0, 0.0, ALIGN_NORMAL)
		}
		case CSW_UMP45:
		{
			new msgammo[256]
			format(msgammo, 100, "%d|  %d", clip,ammo)
			md_drawtext(id, 100, msgammo, 0.73, 0.88, 0, 0, 255,255,255,255, 0.0, 0.0, 0.0, ALIGN_NORMAL)
		}
		case CSW_P90:
		{
			new msgammo[256]
			format(msgammo, 100, "%d|  %d", clip,ammo)
			md_drawtext(id, 100, msgammo, 0.73, 0.88, 0, 0, 255,255,255,255, 0.0, 0.0, 0.0, ALIGN_NORMAL)
		}
		case CSW_M4A1:
		{
			new msgammo[256]
			format(msgammo, 100, "%d|  %d", clip,ammo)
			md_drawtext(id, 100, msgammo, 0.73, 0.88, 0, 0, 255,255,255,255, 0.0, 0.0, 0.0, ALIGN_NORMAL)
		}
		case CSW_AK47:
		{
			new msgammo[256]
			format(msgammo, 100, "%d|  %d", clip,ammo)
			md_drawtext(id, 100, msgammo, 0.73, 0.88, 0, 0, 255,255,255,255, 0.0, 0.0, 0.0, ALIGN_NORMAL)
		}
		case CSW_GALIL:
		{
			new msgammo[256]
			format(msgammo, 100, "%d|  %d", clip,ammo)
			md_drawtext(id, 100, msgammo, 0.73, 0.88, 0, 0, 255,255,255,255, 0.0, 0.0, 0.0, ALIGN_NORMAL)
		}
		case CSW_FAMAS:
		{
			new msgammo[256]
			format(msgammo, 100, "%d|  %d", clip,ammo)
			md_drawtext(id, 100, msgammo, 0.73, 0.88, 0, 0, 255,255,255,255, 0.0, 0.0, 0.0, ALIGN_NORMAL)
		}
		case CSW_AUG:
		{
			new msgammo[256]
			format(msgammo, 100, "%d|  %d", clip,ammo)
			md_drawtext(id, 100, msgammo, 0.73, 0.88, 0, 0, 255,255,255,255, 0.0, 0.0, 0.0, ALIGN_NORMAL)
		}
		case CSW_SG552:
		{
			new msgammo[256]
			format(msgammo, 100, "%d|  %d", clip,ammo)
			md_drawtext(id, 100, msgammo, 0.73, 0.88, 0, 0, 255,255,255,255, 0.0, 0.0, 0.0, ALIGN_NORMAL)
		}
		case CSW_G3SG1:
		{
			new msgammo[256]
			format(msgammo, 100, "%d|  %d", clip,ammo)
			md_drawtext(id, 100, msgammo, 0.73, 0.88, 0, 0, 255,255,255,255, 0.0, 0.0, 0.0, ALIGN_NORMAL)
		}
		case CSW_SG550:
		{
			new msgammo[256]
			format(msgammo, 100, "%d|  %d", clip,ammo)
			md_drawtext(id, 100, msgammo, 0.73, 0.88, 0, 0, 255,255,255,255, 0.0, 0.0, 0.0, ALIGN_NORMAL)
		}
		case CSW_SCOUT:
		{
			new msgammo[256]
			format(msgammo, 100, "%d|  %d", clip,ammo)
			md_drawtext(id, 100, msgammo, 0.73, 0.88, 0, 0, 255,255,255,255, 0.0, 0.0, 0.0, ALIGN_NORMAL)
		}
		case CSW_AWP:
		{
			new msgammo[256]
			format(msgammo, 100, "%d|  %d", clip,ammo)
			md_drawtext(id, 100, msgammo, 0.73, 0.88, 0, 0, 255,255,255,255, 0.0, 0.0, 0.0, ALIGN_NORMAL)
		}
		case CSW_M249:
		{
			new msgammo[256]
			format(msgammo, 100, "%d|  %d", clip,ammo)
			md_drawtext(id, 100, msgammo, 0.73, 0.88, 0, 0, 255,255,255,255, 0.0, 0.0, 0.0, ALIGN_NORMAL)
		}
		case CSW_KNIFE:
		{
			md_drawtext(id, 100, "", 0.73, 0.88, 0, 0, 255,255,255,255, 0.0, 0.0, 0.0, ALIGN_NORMAL)
		}
		case CSW_SMOKEGRENADE:
		{
			md_drawtext(id, 100, "", 0.73, 0.88, 0, 0, 255,255,255,255, 0.0, 0.0, 0.0, ALIGN_NORMAL)
		}
		case CSW_FLASHBANG:
		{
			md_drawtext(id, 100, "", 0.73, 0.88, 0, 0, 255,255,255,255, 0.0, 0.0, 0.0, ALIGN_NORMAL)
		}
		case CSW_HEGRENADE:
		{
			md_drawtext(id, 100, "", 0.73, 0.88, 0, 0, 255,255,255,255, 0.0, 0.0, 0.0, ALIGN_NORMAL)
		}
		case CSW_C4:
		{
			md_drawtext(id, 100, "", 0.73, 0.88, 0, 0, 255,255,255,255, 0.0, 0.0, 0.0, ALIGN_NORMAL)
		}
	}	
}
public fw_CmdStart(id, handle, seed)
{
	if(!is_user_alive(id)) return FMRES_IGNORED
	if(get_uc(handle, UC_Buttons) & IN_USE)
		cmd_melee(id)
	
	restore_health2(id)
	
	return FMRES_IGNORED
}
public remove_hud(id)
{
	if(!is_user_connected(id)) 
		return
		
	message_begin(MSG_ONE, get_user_msgid("HideWeapon"),_,id)
	write_byte(8)
	message_end()
}
public cmd_equipment(id)
{
	if (!is_user_alive(id))
		return
	
	new pred = user_ctrl_pred[id]
	if (is_valid_ent(pred))
	{
		if (user_pred_speed[id] == PREDATOR_SPEED)
		{
			user_pred_speed[id] = PREDATOR_SPEED * 2
			emit_sound(pred, CHAN_AUTO, PR_FLY_START, VOL_NORM, ATTN_STATIC, 0, PITCH_NORM)
		}
		return
	}
}
public auto_nade_h(id)
{
	if (user_has_weapon(id, CSW_HEGRENADE) || !user_ctrl_pred[id])
	{
		engclient_cmd(id, "weapon_hegrenade")
		set_pdata_float(id, m_flNextAttack, 0.0, EXTRAOFFSET)
		new g = fm_find_ent_by_owner(-1, "weapon_hegrenade", id)
		if(pev_valid(g))
			ExecuteHam(Ham_Weapon_PrimaryAttack, g)
	}
}
public auto_nade_f(id)
{
	if (user_has_weapon(id, CSW_FLASHBANG) || !user_ctrl_pred[id])
	{
		engclient_cmd(id, "weapon_flashbang")
		set_pdata_float(id, m_flNextAttack, 0.0, EXTRAOFFSET)
		new f = fm_find_ent_by_owner(-1, "weapon_flashbang", id)
		if(pev_valid(f))
			ExecuteHam(Ham_Weapon_PrimaryAttack, f)
	}
	//if uisng pred
	cmd_equipment(id)
}

public CThrowable_Deploy(ent)
{
	if(!pev_valid(ent)) return
	
	new id = pev(ent, pev_owner)
	
	set_pdata_float(id, m_flNextAttack, 0.0, EXTRAOFFSET)
}

#define TASK_MELEE1_Q 0099118821921
public cmd_melee(id)
{
	if(IsDefusing[id]==true)return
	if(get_pdata_float(id, 83, 5) > 0.0)  return
	for(new i = 1; i <= get_maxplayers();i++){
		if(!is_user_alive(i)) continue
		if(is_user_bot(id)) continue
		if(id==i)continue
		if(entity_range(id, i) > 120.0)continue
			
		do_stab_knife(id)
		had_knife[id] = true
		set_player_nextattack(id, 0.2)
	}
}
public do_stab_knife(id)
{
	if (!is_user_alive(id))
		return
	if(!had_knife[id]) return
	
	// switch to knife
	had_knife[id] = false
	engclient_cmd(id, "weapon_knife")
	SET_viewmodel(id, "models/v_knife3.mdl")
	
	set_weapon_anim(id, 4)
	emit_sound(id, CHAN_WEAPON, "weapons/knife_slash1.wav", VOL_NORM, ATTN_NORM,0,PITCH_NORM)
	
	new Float:fAngle = 90.0
	new Float:fDamage = DAMAGE_STAB
	new Float:fRange = 120.0
		
	new iHitResult = KnifeAttack_Global(id, true, fRange, fAngle, fDamage, 1.0)
	switch (iHitResult)
	{
		case RESULT_HIT_PLAYER : client_cmd(id, "spk %s", "weapons/knife_stab.wav") 
		case RESULT_HIT_WORLD : client_cmd(id, "spk %s", "weapons/knife_hitwall1.wav")
	}

	// switch back to previous weapon
	set_task(0.45, "melee_switch_back", id+TASK_MELEE1_Q)
}
public melee_switch_back(id){
	id -= TASK_MELEE1_Q
	if (is_user_alive(id))
		client_cmd(id, "lastinv")
	return PLUGIN_HANDLED
}


//======================================== KILLSTREAKS ================================================
//===================================================================================== UAV NEW ===========
//*************************************************************************************     ***********
new cd_active,bool:uav[32+1]
public CreateUVA(id)
{
	//static TimeUav[2];
	new team = get_user_team(id) == 1? 0: 1;
	uav[id] = false;
	radar[team] = true;
	
	if(!g_HasUAV[id]) return
	
	g_HasUAV[id] = 0;
	PointUAV[id] = 0;
	//use_uav(id)
	callfunc(id, "CreateUVA", "addon_killstreaks.amxx")
	PlaySound(id, "mw/select.wav")
	/*enable_radar[id] = true;
	
	new num, players[32];
	get_players(players, num, "gh")
	for(new a = 0; a < num; a++)
	{
		new i = players[a]
		if(get_user_team(id) != get_user_team(i))
			{
				client_cmd(i, "spk mw/uav_enemy.wav")
			}
		else
			{
				client_cmd(i, "spk mw/uav_friend.wav")
			}
	}
	radar_scan()
	new data[1];
	data[0] = team;
	set_task(UAV_DUR, "deluav", team, data, 1);
	set_task(UAV_DUR, "remove_scanner", team)
	set_task(UAV_DUR, "delete_radar", id)
	cd_active = id;
	set_task(2.5, "cooldownover")*/
}
public deluav(data[1])
{
	radar[data[0]] = false;
	for(new i = 0; i<32;i++)
	{
		md_removedrawing(0, 5, i)
	}
}
public delete_radar(id) enable_radar[id] = false;
public radar_scan()
{
	new num, players[32];
	get_players(players, num, "gh")
	for(new i=0; i<num; i++)
	{
		new id = players[i];
		if(!is_user_connected(id)) continue;
		if(!is_user_alive(id) || !radar[get_user_team(id) == 1? 0: 1])
			continue;
		
		radar_continue(id)
			
	}
}
public cooldownover()
{
	cd_active = 0;
}
radar_continue(id)
{
	if(!enable_radar[id])
		return PLUGIN_CONTINUE
	new num, players[32];
	new PlayerCoords[3], PlayerCoords1[3],PlayerCoords2[3], PlayerCoords3[3];
	new PlayerCoords4[3], PlayerCoords5[3], PlayerCoords6[3], PlayerCoords7[3];
	new PlayerCoords8[3], PlayerCoords9[3], PlayerCoords10[3], PlayerCoords11[3];
	new PlayerCoords12[3], PlayerCoords13[3], PlayerCoords14[3], PlayerCoords15[3];
	new PlayerCoords16[3], PlayerCoords17[3], PlayerCoords18[3], PlayerCoords19[3];
	new PlayerCoords20[3], PlayerCoords21[3], PlayerCoords22[3], PlayerCoords23[3];
	new PlayerCoords24[3], PlayerCoords25[3], PlayerCoords26[3], PlayerCoords27[3];
	new PlayerCoords28[3], PlayerCoords29[3], PlayerCoords30[3], PlayerCoords31[3];
	get_players(players, num, "gh")
	for(new a=0; a<num; a++)
	{
		a = players[a];
		if(!is_user_alive(players[a]) || get_user_team(players[a]) == get_user_team(id))
			continue;
		{	
			get_user_origin(players[a], PlayerCoords,0)
			md_drawspriteonradar(id, 1, 0, "sprites/overviews/iEnemy.spr", PlayerCoords, 255,255,255,255, SPR_ADDITIVE)

		}
		if(!is_user_alive(players[1]) || get_user_team(players[1]) == get_user_team(id))
			continue;
		{		
			get_user_origin(players[1], PlayerCoords1,0)
			md_drawspriteonradar(id, 2, 0, "sprites/overviews/iEnemy.spr", PlayerCoords1, 255,255,255,255, SPR_ADDITIVE)
			
		}
		if(!is_user_alive(players[2]) || get_user_team(players[2]) == get_user_team(id))
			continue;
		{ 		
			get_user_origin(players[2], PlayerCoords2,0)
			md_drawspriteonradar(id, 3, 0, "sprites/overviews/iEnemy.spr", PlayerCoords2, 255,255,255,255, SPR_ADDITIVE)

		}
		if(!is_user_alive(players[3]) || get_user_team(players[3]) == get_user_team(id))
			continue;
		{ 	
			get_user_origin(players[3], PlayerCoords3,0)
			md_drawspriteonradar(id, 4, 0, "sprites/overviews/iEnemy.spr", PlayerCoords3, 255,255,255,255, SPR_ADDITIVE)

		}
		if(!is_user_alive(players[4]) || get_user_team(players[4]) == get_user_team(id))
			continue;
		{ 	
			get_user_origin(players[4], PlayerCoords4,0)
			md_drawspriteonradar(id, 5, 0, "sprites/overviews/iEnemy.spr", PlayerCoords4, 255,255,255,255, SPR_ADDITIVE)
		}
		if(!is_user_alive(players[5]) || get_user_team(players[5]) == get_user_team(id))
			continue;		
		{ 		
			get_user_origin(players[5], PlayerCoords5,0)
			md_drawspriteonradar(id, 6, 0, "sprites/overviews/iEnemy.spr", PlayerCoords5, 255,255,255,255, SPR_ADDITIVE)
			
		}
		if(!is_user_alive(players[6]) || get_user_team(players[6]) == get_user_team(id))
			continue;
		{ 	
			get_user_origin(players[6], PlayerCoords6,0)
			md_drawspriteonradar(id, 7, 0, "sprites/overviews/iEnemy.spr", PlayerCoords6, 255,255,255,255, SPR_ADDITIVE)

		}
		if(!is_user_alive(players[7]) || get_user_team(players[7]) == get_user_team(id))
			continue;
		{ 	
			get_user_origin(players[7], PlayerCoords7,0)
			md_drawspriteonradar(id, 8, 0, "sprites/overviews/iEnemy.spr", PlayerCoords7, 255,255,255,255, SPR_ADDITIVE)
		}
		if(!is_user_alive(players[8]) || get_user_team(players[8]) == get_user_team(id))
			continue;
		{ 		
			get_user_origin(players[8], PlayerCoords8,0)
			md_drawspriteonradar(id, 9, 0, "sprites/overviews/iEnemy.spr", PlayerCoords8, 255,255,255,255, SPR_ADDITIVE)
		}
		if(!is_user_alive(players[9]) || get_user_team(players[9]) == get_user_team(id))
			continue;
		{ 			
			get_user_origin(players[9], PlayerCoords9,0)
			md_drawspriteonradar(id, 10, 0, "sprites/overviews/iEnemy.spr", PlayerCoords9, 255,255,255,255, SPR_ADDITIVE)
			
		}
		if(!is_user_alive(players[10]) || get_user_team(players[10]) == get_user_team(id))
			continue;
		{ 		
			get_user_origin(players[10], PlayerCoords10,0)
			md_drawspriteonradar(id, 11, 0, "sprites/overviews/iEnemy.spr", PlayerCoords10, 255,255,255,255, SPR_ADDITIVE)
			
		}
		if(!is_user_alive(players[11]) || get_user_team(players[11]) == get_user_team(id))
			continue;
		{
			get_user_origin(players[11], PlayerCoords11,0)
			md_drawspriteonradar(id, 12, 0, "sprites/overviews/iEnemy.spr", PlayerCoords11, 255,255,255,255, SPR_ADDITIVE)
			
		}
		if(!is_user_alive(players[12]) || get_user_team(players[12]) == get_user_team(id))
			continue;
		{
			get_user_origin(players[12], PlayerCoords12,0)
			md_drawspriteonradar(id, 13, 0, "sprites/overviews/iEnemy.spr", PlayerCoords12, 255,255,255,255, SPR_ADDITIVE)
			
		}
		if(!is_user_alive(players[13]) || get_user_team(players[13]) == get_user_team(id))
			continue;
		{
			get_user_origin(players[13], PlayerCoords13,0)
			md_drawspriteonradar(id, 14, 0, "sprites/overviews/iEnemy.spr", PlayerCoords13, 255,255,255,255, SPR_ADDITIVE)
			
		}
		if(!is_user_alive(players[14]) || get_user_team(players[14]) == get_user_team(id))
			continue;
		{
			get_user_origin(players[14], PlayerCoords14,0)
			md_drawspriteonradar(id, 15, 0, "sprites/overviews/iEnemy.spr", PlayerCoords14, 255,255,255,255, SPR_ADDITIVE)
			
		}
		if(!is_user_alive(players[15]) || get_user_team(players[15]) == get_user_team(id))
			continue;
		{
			get_user_origin(players[15], PlayerCoords15,0)
			md_drawspriteonradar(id, 16, 0, "sprites/overviews/iEnemy.spr", PlayerCoords15, 255,255,255,255, SPR_ADDITIVE)
			
		}
		if(!is_user_alive(players[16]) || get_user_team(players[16]) == get_user_team(id))
			continue;
		{
			get_user_origin(players[16], PlayerCoords16,0)
			md_drawspriteonradar(id, 17, 0, "sprites/overviews/iEnemy.spr", PlayerCoords16, 255,255,255,255, SPR_ADDITIVE)
			
		}
		if(!is_user_alive(players[17]) || get_user_team(players[17]) == get_user_team(id))
			continue;
		{
			get_user_origin(players[17], PlayerCoords17,0)
			md_drawspriteonradar(id, 18, 0, "sprites/overviews/iEnemy.spr", PlayerCoords17, 255,255,255,255, SPR_ADDITIVE)
			
		}
		if(!is_user_alive(players[18]) || get_user_team(players[18]) == get_user_team(id))
			continue;
		{
			get_user_origin(players[18], PlayerCoords18,0)
			md_drawspriteonradar(id, 19, 0, "sprites/overviews/iEnemy.spr", PlayerCoords18, 255,255,255,255, SPR_ADDITIVE)
			
		}
		if(!is_user_alive(players[19]) || get_user_team(players[19]) == get_user_team(id))
			continue;
		{
			get_user_origin(players[19], PlayerCoords19,0)
			md_drawspriteonradar(id,20, 0, "sprites/overviews/iEnemy.spr", PlayerCoords19, 255,255,255,255, SPR_ADDITIVE)
			
		}
		if(!is_user_alive(players[20]) || get_user_team(players[20]) == get_user_team(id))
			continue;
		{
			get_user_origin(players[20], PlayerCoords20,0)
			md_drawspriteonradar(id, 21, 0, "sprites/overviews/iEnemy.spr", PlayerCoords20, 255,255,255,255, SPR_ADDITIVE)
			
		}
		
		if(!is_user_alive(players[21]) || get_user_team(players[21]) == get_user_team(id))
			continue;
		{
			get_user_origin(players[21], PlayerCoords21,0)
			md_drawspriteonradar(id, 22, 0, "sprites/overviews/iEnemy.spr", PlayerCoords21, 255,255,255,255, SPR_ADDITIVE)
			
		}
		if(!is_user_alive(players[22]) || get_user_team(players[22]) == get_user_team(id))
			continue;
		{
			get_user_origin(players[22], PlayerCoords22,0)
			md_drawspriteonradar(id, 23, 0, "sprites/overviews/iEnemy.spr", PlayerCoords22, 255,255,255,255, SPR_ADDITIVE)
			
		}
		if(!is_user_alive(players[23]) || get_user_team(players[23]) == get_user_team(id))
			continue;
		{
			get_user_origin(players[23], PlayerCoords23,0)
			md_drawspriteonradar(id, 24, 0, "sprites/overviews/iEnemy.spr", PlayerCoords23, 255,255,255,255, SPR_ADDITIVE)
			
		}
		if(!is_user_alive(players[24]) || get_user_team(players[24]) == get_user_team(id))
			continue;
		{
			get_user_origin(players[24], PlayerCoords24,0)
			md_drawspriteonradar(id, 25, 0, "sprites/overviews/iEnemy.spr", PlayerCoords24, 255,255,255,255, SPR_ADDITIVE)
			
		}
		if(!is_user_alive(players[25]) || get_user_team(players[25]) == get_user_team(id))
			continue;
		{
			get_user_origin(players[25], PlayerCoords25,0)
			md_drawspriteonradar(id, 26, 0, "sprites/overviews/iEnemy.spr", PlayerCoords25, 255,255,255,255, SPR_ADDITIVE)
			
		}
		if(!is_user_alive(players[26]) || get_user_team(players[26]) == get_user_team(id))
			continue;
		{
			get_user_origin(players[26], PlayerCoords26,0)
			md_drawspriteonradar(id, 27, 0, "sprites/overviews/iEnemy.spr", PlayerCoords26, 255,255,255,255, SPR_ADDITIVE)
			
		}
		if(!is_user_alive(players[27]) || get_user_team(players[27]) == get_user_team(id))
			continue;
		{
			get_user_origin(players[27], PlayerCoords27,0)
			md_drawspriteonradar(id, 28, 0, "sprites/overviews/iEnemy.spr", PlayerCoords27, 255,255,255,255, SPR_ADDITIVE)
			
		}
		if(!is_user_alive(players[28]) || get_user_team(players[28]) == get_user_team(id))
			continue;
		{
			get_user_origin(players[28], PlayerCoords28,0)
			md_drawspriteonradar(id, 29, 0, "sprites/overviews/iEnemy.spr", PlayerCoords28, 255,255,255,255, SPR_ADDITIVE)
			
		}
		if(!is_user_alive(players[29]) || get_user_team(players[29]) == get_user_team(id))
			continue;
		{
			get_user_origin(players[29], PlayerCoords29,0)
			md_drawspriteonradar(id, 30, 0, "sprites/overviews/iEnemy.spr", PlayerCoords29, 255,255,255,255, SPR_ADDITIVE)
			
		}
		if(!is_user_alive(players[30]) || get_user_team(players[30]) == get_user_team(id))
			continue;
		{
			get_user_origin(players[30], PlayerCoords30,0)
			md_drawspriteonradar(id, 31, 0, "sprites/overviews/iEnemy.spr", PlayerCoords30, 255,255,255,255, SPR_ADDITIVE)
			
		}
		if(!is_user_alive(players[31]) || get_user_team(players[31]) == get_user_team(id))
			continue;
		{
			get_user_origin(players[31], PlayerCoords31,0)
			md_drawspriteonradar(id, 32, 0, "sprites/overviews/iEnemy.spr", PlayerCoords31, 255,255,255,255, SPR_ADDITIVE)
			
		}

	}
	return PLUGIN_CONTINUE;
}
public remove_scanner(id)
{
	for(new i = 1; i <= 32;i++)
	{
		md_removedrawing(id, 5, i)
	}
	return;
}
//__________________________________________________________________________________________________________
//==================================================================================== CAREPACKAGE =========
//************************************************************************************            **********
new Float:Origin[3],Float:OriginPlane[3],Float:OriginPlane2[3]
#define TASK_LOOPING 00229910
public enabl_CarePackage(id)
{
	if (!is_user_alive(id)) return
	if(!g_HasCarePackage[id])
		return
	
	g_HasCarePackage[id] = 0;
	PointCarePackage[id] = 0;
	PlaySound(id, "mw/select.wav")
	
	callfunc(id, "cp_ACH", "Achievements_v2.1.amxx")
	
	new num, players[32], a;
	get_players(players, num, "gh");
	for(a = 0; a < num; a++)
	{
		a = players[a];
		if(get_user_team(id) != get_user_team(a))
			client_cmd(a, "spk sound/mw/carepackage_enemy.wav");
		else
			client_cmd(a, "spk sound/mw/carepackage_friend.wav");
	}
	
	fm_get_aim_origin(id, Origin)
	
	set_task(0.5, "show_sign", id+TASK_LOOPING,_,_,"b")
	
	OriginPlane[0] = Origin[0] - 850.0
	OriginPlane[1] = Origin[1]
	OriginPlane[2] = Origin[2] + PLANE_Z
	
	OriginPlane2[0] = Origin[0] + 750.0
	OriginPlane2[1] = Origin[1]
	OriginPlane2[2] = Origin[2] + PLANE_Z
	
	new ent = create_entity("info_target")
	entity_set_origin(ent, OriginPlane)
	engfunc(EngFunc_SetModel, ent, PACKAGE_HELI_MODEL)
	entity_set_int(ent, EV_INT_movetype, MOVETYPE_NOCLIP)
	entity_set_string(ent, EV_SZ_classname, stealth_classname)
	set_entity_visibility(ent, 0)
	
	EntitySequence(ent, 0, 1.5)
	
	new iorigin[3]
	if (is_user_bot(id))
		get_user_origin(id, iorigin)
	else
		get_user_origin(id, iorigin, 3) // end position from eyes (hit point for weapon) origin
	
	set_task(2.0, "Transport_CarePachake", ent)
	set_task(4.0, "airdrop", id+TASK_CAREPACKAGE, iorigin, 3)
}
public show_sign(id)
{
	id -= TASK_LOOPING
	
	show_smoke(Origin)
}
public Transport_CarePachake(ent)
{
	ent_move_to(ent, OriginPlane2, 500.0)
	set_entity_visibility(ent, 1)
	emit_sound(ent, CHAN_AUTO, STEALTH_FLYBY_SOUND, VOL_NORM,ATTN_NORM,0,PITCH_NORM)
	set_task(15.5, "remove_plane", ent)
}

public remove_plane(ent) safe_remove_entity(ent)
public airdrop(const origin[3], taskid)
{
	new id = taskid - TASK_CAREPACKAGE
	new Float:fOrigin[3]
	IVecFVec(origin, fOrigin)
	remove_task(id+TASK_LOOPING)
	
	fOrigin[2] += 150.0
	
	/*switch(get_user_team(id)){
		case TEAM_T: set_rendering(cp, kRenderFxGlowShell, 255, 0, 0)
		case TEAM_CT: set_rendering(cp, kRenderFxGlowShell, 0, 0, 255)
	}*/
	make_entity(id, package_classname, get_user_team(id) == TEAM_T?"models/cod_carepackageopfor.mdl" : "models/cod_carepackageranger.mdl", fOrigin, SOLID_TRIGGER, MOVETYPE_TOSS, _, 7.0)
}
// player picking up care package
care_package_check(id)
{
	static iDiffrence, cp
	iDiffrence = floatround((get_gametime() - cpd_time[id]) * 100.0)
	cp = cpd_taking_package[id]
	if (iDiffrence >= 0 && iDiffrence < 10 && is_valid_ent(cp))
	{
		new ks = GET_CP_CONTAINS(cp) - 100 // item in care package
		
		if (GET_button(id)&IN_USE)
		{
			// care package pickup is faster for owner
			new cp_owner = GET_owner(cp)
			new iPerc
			if (id == cp_owner)
				iPerc = CP_TAKE_SPEED
			else
				iPerc = CP_STEAL_SPEED
			
			cpd_progress[id] += iPerc
			
			// player picked up package?
			if (cpd_progress[id] >= 100)
			{
				cpd_progress[id] = 100
				
				// give reward
				random_killstreak_reward(id)
				PlaySound(id, PICKUP_SOUND)
				remove_entity(cp)
			}
			Make_BarTime2(id, floatround(100.0 / float(iPerc) * USUR), cpd_progress[id])
			takepck[id] = true;
		}
		else
		{
			if (ks == CP_RESUPPLY)
				client_print(id, print_center, "Resupply")
			else
				client_print(id, print_center, "[E] OPEN SUPPLY")
			if (cpd_progress[id] > 0) Make_BarTime2(id, 1, 100)
			cpd_progress[id] = 0
			takepck[id] = false;
		}
	}
	else
	{
		if (cpd_progress[id] > 0) Make_BarTime2(id, 1, 100)
		cpd_progress[id] = 0
		cpd_time[id] = 0.0
		cpd_taking_package[id] = 0
	}
}
public random_killstreak_reward(id)
{
	new iRand = random_num(0,4)
	takepck[id] = false;
	
	switch(iRand)
	{
		case 0:
		{
			g_HasUAV[id] = 1;
			PointUAV[id] = 0;
			//client_print(id, print_center, "You Get UAV OPEN [B] to use menu")
			PlaySound(id, uav_give)
			md_drawimage(id, 0, 0, "gfx/killstreaks/carepack_uav.tga", 0.01,  0.1, 0, 0, 255,255,255,255, 0.0, 0.3, 1.0, ALIGN_NORMAL)
		}
		case 1:
		{
			g_HasSentry[id] = 1;
			PointSentry[id] = 0;
			PlaySound(id, sentry_give)
			md_drawimage(id, 0, 0, "gfx/killstreaks/carepack_sentrygun.tga", 0.01,  0.1, 0, 0, 255,255,255,255, 0.0, 0.3, 1.0, ALIGN_NORMAL)
			//client_print(id, print_center, "You Get Sentrygun OPEN [B]")
		}
		case 2:
		{
			g_HasAirstrike[id] = 1;
			PointAIRS[id] = 0;
			PlaySound(id,airs_give)
			md_drawimage(id, 0, 0, "gfx/killstreaks/carepack_air.tga", 0.01,  0.1, 0, 0, 255,255,255,255, 0.0, 0.3, 1.0, ALIGN_NORMAL)
			//client_print(id, print_center, "You Get Precision Airstrike OPEN [B]")
		}
		case 3:
		{
			g_PredMissile[id] = 1;
			PointPredM[id] = 0;
			PlaySound(id,predm_give)
			md_drawimage(id, 0, 0, "gfx/killstreaks/carepack_predator.tga", 0.01,  0.1, 0, 0, 255,255,255,255, 0.0, 0.3, 1.0, ALIGN_NORMAL)
			//client_print(id, print_center, "You Get Predator Missile OPEN [B]")
		}
		/*case 4:
		{
			PointStealth[id] = 0
			HadStealth[id] = 1
			PlaySound(id,"mw/stealth_give.wav")
			md_drawimage(id, 0, 0, "gfx/killstreaks/carepack_stealth.tga", 0.01,  0.1, 0, 0, 255,255,255,255, 0.0, 0.3, 1.0, ALIGN_NORMAL)
			//client_print(id, print_center, "You Get Predator Missile OPEN [B]")
		}*/
	}
}
//__________________________________________________________________________________________________________
//==================================================================================== AIRSTRIKE =========
//************************************************************************************            **********
new Float:ASOrigin[3],Float:ASOriginStart[3],Float:ASOriginEnd[3],Float:BombOrigin[3]
#define TASK_LOOPING2 30219321
#define TASK_AIRSTRIK 345908
public enabl_AirStrike(id)
{
	if(!g_HasAirstrike[id])
		return
		
	g_HasAirstrike[id] = 0;
	PointAIRS[id] = 0;
	
	callfunc(id, "CreateNalot", "addon_killstreaks.amxx")
	PlaySound(id, "mw/select.wav")
	
	//PlaySound(0, airs_friend)
	/*new num, players[32];
	get_players(players, num, "gh");
	for(new a = 0; a < num; a++)
	{
		new i = players[a];
		if(get_user_team(id) != get_user_team(i))
			client_cmd(i, "spk sound/mw/air_enemy.wav");
		else
			client_cmd(i, "spk sound/mw/air_friend.wav");
	}
	
	
	for(new a = 0; a < num; a++)
	{
		new i = players[a];
		if(get_user_team(id) != get_user_team(i)){
			client_cmd(i, "spk sound/mw/air_enemy.wav");
			set_task(0.3, "soundjetfunc2", i)
		}else{
			client_cmd(i, "spk sound/mw/air_friend.wav");
			set_task(0.3, "soundjetfunc2", i)
		}
	}
	
	fm_get_aim_origin(id, ASOrigin)
	
	show_sign2(id)
	
	set_task(0.1, "spawn_plane", id+TASK_AIRSTRIK)
	set_task(3.1, "spawn_plane", id+TASK_AIRSTRIK)
	set_task(6.1, "spawn_plane", id+TASK_AIRSTRIK)*/
}
public spawn_plane(id)
{
	id -= TASK_AIRSTRIK
	
	ASOriginStart[0] = ASOrigin[0] - 850.0
	ASOriginStart[1] = ASOrigin[1]
	ASOriginStart[2] = ASOrigin[2] + PLANE_Z
	
	ASOriginEnd[0] = ASOrigin[0] + 750.0
	ASOriginEnd[1] = ASOrigin[1]
	ASOriginEnd[2] = ASOrigin[2] + PLANE_Z
	
	new ent = create_entity("info_target")
	entity_set_origin(ent, ASOriginStart)
	engfunc(EngFunc_SetModel, ent, airs_model)
	entity_set_int(ent, EV_INT_movetype, MOVETYPE_NOCLIP)
	entity_set_string(ent, EV_SZ_classname, airs_classname)
	set_entity_visibility(ent, 0)
	
	EntitySequence(ent, 0, 1.5)
	
	set_task(2.0, "Manuver", ent)
	
	set_task(2.5, "BombSecure", id+TASK_DROPBOMB_AIRS)
	set_task(3.0, "BombSecure2", id+TASK_DROPBOMB_AIRS)
	set_task(3.5, "BombSecure3", id+TASK_DROPBOMB_AIRS)
}
public Manuver(ent)
{
	ent_move_to(ent, ASOriginEnd, 1050.0)
	set_entity_visibility(ent, 1)
	emit_sound(ent, CHAN_AUTO, airs_fly, VOL_NORM,ATTN_NORM,0,PITCH_NORM)
	set_task(7.5, "remove_ars", ent)
}
public BombSecure(id)
{
	id -= TASK_DROPBOMB_AIRS
	
	BombOrigin[0] = ASOrigin[0] - 150.0
	BombOrigin[1] = ASOrigin[1]
	BombOrigin[2] = ASOrigin[2]
	
	DropBomb(id, BombOrigin)
	
	remove_task(id+TASK_LOOPING2)
	
}
public BombSecure2(id)
{
	id -= TASK_DROPBOMB_AIRS
	
	BombOrigin[0] = ASOrigin[0] + 200.0
	BombOrigin[1] = ASOrigin[1]
	BombOrigin[2] = ASOrigin[2]
	
	DropBomb(id, BombOrigin)
	
	remove_task(id+TASK_LOOPING2)
	
}
public BombSecure3(id)
{
	id -= TASK_DROPBOMB_AIRS
	
	BombOrigin[0] = ASOrigin[0] + 400.0
	BombOrigin[1] = ASOrigin[1]
	BombOrigin[2] = ASOrigin[2]
	
	DropBomb(id, BombOrigin)
	
	remove_task(id+TASK_LOOPING2)
	
}

public show_sign2(id)
{
	show_smoke(ASOrigin)
}
public DropBomb(id, Float:fOrigin[3])
{	
	fOrigin[2] += 350.0
	new cp = create_entity("info_target")
	if(!is_valid_ent(cp)) return
	
	entity_set_string(cp, EV_SZ_classname, bomb_classname)
	entity_set_vector(cp, EV_VEC_origin, fOrigin)
	entity_set_model(cp, ROCKET_MDL)
	entity_set_int(cp, EV_INT_solid, SOLID_BBOX)
	entity_set_int(cp, EV_INT_movetype, MOVETYPE_TOSS)
	entity_set_vector(cp, EV_VEC_mins, Float:{-1.0, -1.0, -1.0})
	entity_set_vector(cp, EV_VEC_maxs, Float:{1.0, 1.0, 1.0})
	SET_owner(cp, id)
	msg_beam_follow(cp, 255, 255, 255, 0)
}
public remove_ars(ent) safe_remove_entity(ent)
//__________________________________________________________________________________________________________
//================================================================================ PREDATOR MISSILE ========
//********************************************************************************                  ********
public enabl_Predator(id)
{
	if(!g_PredMissile[id])
		return 0;
		
	g_PredMissile[id] = 0;
	PointPredM[id] = 0;
	
	//use_pred(id) //native
	callfunc(id, "CreatePredator2", "addon_killstreaks.amxx")
	PlaySound(id, "mw/select.wav")
	
	/*if (user_ctrl_pred[id]) return 0
	new Float:Origin[3], Float:Angle[3], Float:Velocity[3]
	velocity_by_aim(id, PREDATOR_SPEED, Velocity)
	GET_origin(id, Origin)
	GET_v_angle(id, Angle)
	Angle[0] *= -1.0
	new iPred = make_entity(id, pred_classname, ROCKET_MDL, Origin, SOLID_BBOX, MOVETYPE_FLY)
	SET_velocity(iPred, Velocity)
	SET_angles(iPred, Angle)
	attach_view(id, iPred)
	user_ctrl_pred[id] = iPred
	user_pred_speed[id] = PREDATOR_SPEED
	msg_beam_follow(iPred, 255, 255, 255)
	SET_effects(iPred, EF_BRIGHTLIGHT)
	set_rendering(iPred, kRenderFxGlowShell, 150, 150, 150) // thermal
	Display_Fade(id, 0, 0, FFADE_STAYOUT, 150, 150, 150, 100, true) // thermal
	emit_sound(iPred, CHAN_AUTO, PR_FLY_START, VOL_NORM, ATTN_NORM, 0, PITCH_NORM)
	//emit_sound(iPred, CHAN_AUTO, predm_friend, VOL_NORM, ATTN_NORM, 0, PITCH_NORM)
	new num, players[32];
	get_players(players, num, "gh");
	for(new a = 0; a < num; a++)
	{
		new i = players[a];
		if(get_user_team(id) != get_user_team(i))
			client_cmd(i, "spk sound/mw/predator_enemy.wav");
		else
			client_cmd(i, "spk sound/mw/predator_friend.wav");
	}
	
	set_task(1.5, "pred_fly_sound", TASK_PRED_FLY+id, _, _, "b")*/
	return 1;
}
public spam_box(id)
{
	Create_Box(id, 1)
}
public pred_fly_sound(taskid)
{
	new id = taskid - TASK_PRED_FLY
	new ent = user_ctrl_pred[id]
	if (!is_valid_ent(ent))
	{
		remove_task(taskid)
		return
	}
}

//__________________________________________________________________________________________________________
//==================================================================================== TACTICAL NUKE =======
//************************************************************************************            **********
public enabl_NUKE(id)
{
	if(!g_Enable[id]) return
	if(get_pdata_float(id, 83, 5) > 0.0) return
		
	g_Enable[id] = 0
	g_iKill[id] = 0
	set_task(1.07, "begin_use_nuke", id)
	//call_nuke(id)
	PlaySound(id, "mw/select.wav")
	client_cmd(id, "sv_noroundend 0")
	
	callfunc(id, "nuke_ACH", "Achievements_v2.1.amxx")
	
	//set_pdata_float(id, 83, 1.0, 5)
}
public call_nuke(id){
	g_HasNukeCaller[id] = 1
	g_usinglaptop[id] = 1
	give_item(id, "weapon_knife")
	engclient_cmd(id, "weapon_knife")
	set_pev(id, pev_viewmodel2, nuke_caller)
	set_weapon_anim(id, 1)
	set_task(1.63, "go_anim1", id+TASK_ANIMATION)
}
public go_anim1(id)
{
	id -= TASK_ANIMATION
	if(!g_HasNukeCaller[id])
		return
	
	set_weapon_anim(id, 3)
	set_task(2.3, "go_anim2", id+TASK_ANIMATION)
}
public go_anim2(id)
{
	id -= TASK_ANIMATION
	if(!g_HasNukeCaller[id])
		return
	
	set_weapon_anim(id, 2)
	begin_use_nuke(id)
	set_task(0.5, "remove_nuke_caller", id)
}
public remove_nuke_caller(id){
	g_HasNukeCaller[id] = 0
	g_usinglaptop[id] = 0
	give_item(id, "weapon_knife")
	engclient_cmd(id, "weapon_knife")
	set_pev(id, pev_viewmodel2, "models/v_knife.mdl")
	client_cmd(id, "lastinv")
	remove_task(id+TASK_ANIMATION)
}
public begin_use_nuke(id){
	g_Enable[id] = 0
	g_iKill[id] = 0
	//PlaySound(0, nuke_alert)
	new num, players[32];
	get_players(players, num, "gh")
	for(new a = 0; a < num; a++)
	{
		new i = players[a]
		if(get_user_team(id) != get_user_team(i))
			{
				client_cmd(i, "spk mw/nuke_enemy.wav")
			}
		else
			{
				client_cmd(i, "spk mw/nuke_friend.wav")
			}
	}
	set_task(0.1, "begin_countdown", id+TASK_COUNTDOWN)
}

public begin_countdown(id)
{
	id -= TASK_COUNTDOWN
	
	g_CountDown--

	//client_print(id,print_center, "Tactical Nuke in %i Seconds", g_CountDown)
	new ghud[32]
	format(ghud, 31, "%d", g_CountDown)
	md_drawimage(id, 4, 0, "gfx/nukeon.tga", 0.12, 0.03, 0, 0, 255,255,255,255, 0.0, 0.3, 3.0, ALIGN_NORMAL)
	md_drawtext(id, 3, ghud, 0.17, 0.04, 0, 0, 255,255,255,255, 0.0, 0.0, 3.0, ALIGN_NORMAL)
	if(g_CountDown <= 0)
	{
		g_CountDown = 10
		set_task(3.0, "use_dmg_nuke", id)
		//removetext(id)
		//removeimage(id)
		
		/*new player[32],num,a;
		get_players(player, num, "a")
		for(a=0;a<num;a++)
		{
			a = player[a];
			if(!is_user_connected(a))
				continue
		
			new g_screenSize[2]
			g_screenSize[0] = md_getscreenwidth()
			g_screenSize[1] = md_getscreenheight()
			md_drawimage(a, 12, 0, "gfx/nuke/nukeeffect2.tga", 0.0, 0.0, 0, 0, 255,255,255,255, 2.0, 2.0, 2.0, ALIGN_NORMAL, g_screenSize[0], g_screenSize[1])
		}*/
		new player[32],num,a;
		get_players(player, num, "a")
		for(a=0;a<num;a++)
		{
			a = player[a];
			if(!is_user_connected(a))
				continue
		
			Display_Fade(a, 4, 1, FFADE_OUT, 255, 255, 255, 225)
			shake_screen(a)
		}
		
		
		
		/*for(new i = 0; i < get_maxplayers(); i++)
		{
			if(!is_user_alive(i)) continue
			
			new flags = pev(i, pev_flags)
			if((flags & FL_ONGROUND))
			{
				set_user_maxspeed(i, 120.0)
			}
			show_fade(i)
		}*/
		
		//show_fade(id)
		PlaySound(id, nuke_explo)
		remove_task(id+TASK_COUNTDOWN)
		return
	}
	
	
	set_task(1.0, "begin_countdown", id+TASK_COUNTDOWN)
}
public show_fade(id)
{
	Display_Fade(0, 4, 1, FFADE_OUT, 255, 255, 255, 225)
}
public use_dmg_nuke(id)
{
	for(new i = 0; i < get_maxplayers(); i++)
	{
		if(!is_user_alive(i))
			continue
		if(id==i)
			continue
		
		ExecuteHamB(Ham_TakeDamage, i, 0, id, 1500.0, DMG_RADIATION)
		log_kill_B(id, i, "Tactical Nuke", 0)
		
		id_nuker = 1;
		
		set_user_maxspeed(i, 250.0)
		g_iKillMode[id] = KILL_NUKE
		
	}
	new team = get_user_team(id)
	if(team == 1)
	{
		GM_TerminateRound(5.0, WINSTATUS_TERRORIST)
		twin()
		EVENT_TWIN(0)
	}
	if(team == 2)
	{
		GM_TerminateRound(5.0, WINSTATUS_CT)
		ctwin()
		EVENT_CTWIN(0)
	}
	
	new player[32],num,a;
	get_players(player, num, "a")
	for(a=0;a<num;a++)
	{
		a = player[a];
		if(!is_user_connected(a))
			continue
		
		Display_Fade(a, 4, 1, FFADE_IN, 255, 255, 255, 225)
	}
	
	g_iKillMode[id] = KILL_NUKE
	set_user_maxspeed(id, 250.0)
}

public fw_StartFrame()
{
	// sentry think!
	#if !defined XACCURATE
	sentry_think()
	#endif
}

//__________________________________________________________________________________________________________
//==================================================================================== SENTRY GUN ==========
//************************************************************************************            **********

public enabl_SENTRY(id){
	if(!g_HasSentry[id])
		return
		
	//PlaySound(id, sentry_online)
	/*new num, players[32];
	get_players(players, num, "gh");
	for(new a = 0; a < num; a++)
	{
		new i = players[a];
		if(get_user_team(id) != get_user_team(i))
			client_cmd(i, "spk sound/mw/sentrygun_enemy.wav");
		else
			client_cmd(i, "spk sound/mw/sentrygun_friend.wav");
	}*/
	callfunc(id, "CreateSentryPack", "addon_killstreaks.amxx")
	PlaySound(id, "mw/select.wav")
	PointSentry[id] = 0;
	g_HasSentry[id] = 0;
	//use_sentry(id)
	//sentry_build(id)
}

public sentry_target_reset(taskid){
	new ent = taskid - TASK_TARGET_RESET
	if (!is_valid_ent(ent)) return
	SET_SENTRY_TARGET(ent, 0)
}
public sentry_deactivate(taskid){
	new ent = taskid - TASK_SENTRY_DEACTIVATE
	if (!is_valid_ent(ent)) return
	SET_SENTRY_ACTIVE(ent, 0)
	SET_SENTRY_TILT_TURRET(ent, 0)
	
	new id = GET_owner(ent)
	if (!is_user_connected(id)) return
	has_sentry[id] = 0
	
	// break sound
	emit_sound(ent, CHAN_BODY, "weapons/explode1.wav", 0.6, ATTN_NORM, 0, PITCH_NORM)
	show_explosion2(ent)
	
	// tell player
	new players[32],num,a;
	get_players(players,num,"gh")
	for(a=0;a<num;a++)
	{
		a = players[a];
		if(!is_user_connected(a)) continue;
		if(get_user_team(a) != get_user_team(id)) continue;
		
		PlaySound(a, sentry_gone)
		client_print(a, print_center, "sentry_destroyed")
	}
	engfunc(EngFunc_RemoveEntity, g_EntitySentry[id])
}
public sentry_remove(taskid)
{
	new ent = taskid - TASK_SENTRY_REMOVE
	if (!is_valid_ent(ent)) return
	new entbase = GET_ATTACHED(ent)
	safe_remove_entity(ent)
	safe_remove_entity(entbase)
}

// clean up
public sentry_cleanup()
{
	new ent
	for (new i = 1; i <= g_maxplayers; i++)
	{
		ent = has_sentry[i]
		if (ent)
		{
			// remove it right away!
			if (task_exists(TASK_SENTRY_REMOVE+ent))
				remove_task(TASK_SENTRY_REMOVE+ent)
			sentry_remove(TASK_SENTRY_REMOVE+ent)
		}
		has_sentry[i] = 0
		g_EntitySentry[i] = 0
	}
}

// sentry and all equipments think!
public sentry_think()
{
	static ent, entbase
	for (new e = 1; e <= g_maxplayers; e++)
	{
		
		ent = 0
		entbase = 0
		if (!is_valid_ent(has_sentry[e]))
			continue
		
		ent = has_sentry[e]
		
		if (!GET_SENTRY_ACTIVE(ent))
			continue
		
		if (GET_health(ent) <= 0.0)
		{
			sentry_break(ent)
			continue
		}
		
		entbase = GET_ATTACHED(ent)
		
		new Float:sentryOrigin[3], Float:hitOrigin[3], hitent
		GET_origin(entbase, sentryOrigin)
		
		entity_set_size(ent, Float:{-20.0,-20.0,-20.0}, Float:{20.0,20.0,20.0}) // testt
		
		new closestTarget = 0, Float:closestDistance, Float:distance, Float:closestOrigin[3], Float:targetOrigin[3]
		new sentryTeam
		sentryTeam = get_user_team(GET_owner(ent))
		
		closestTarget = GET_SENTRY_TARGET(ent)
		
		if (closestTarget == 0)
		{
			for (new i = 1; i <= g_maxplayers; i++)
			{
				if (!is_user_connected(i) || !is_user_alive(i) || get_user_team(i) == sentryTeam)
					continue
				
				// sentries don't see cold blooded ones!
				if (g_UsePerk[i] && g_PerkType[i] == PERK_RED && g_PerkName[i] == COLD_BLOODED)
					continue
				
				
				GET_origin(i, targetOrigin)
				distance = vector_distance(sentryOrigin, targetOrigin)
				
				if (distance > SENTRY_RANGE)
					continue
				
				hitent = trace_line(ent, sentryOrigin, targetOrigin, hitOrigin)
				if (hitent == entbase)
					hitent = trace_line(hitent, hitOrigin, targetOrigin, hitOrigin)
				
				if (hitent == i)
				{
					closestOrigin = targetOrigin
					
					if (distance < closestDistance || closestTarget == 0) 
					{
						closestTarget = i
						closestDistance = distance
					}
				}
			}
			// if just found one, make noise
			if (closestTarget)
				emit_sound(ent, CHAN_ITEM, "", VOL_NORM, ATTN_NORM, 0, PITCH_NORM)
		}
		
		if (closestTarget)
		{
			// change the target after x sec if target is hard to get
			if (!task_exists(TASK_TARGET_RESET+ent))
				set_task(SENTRY_RETARGET, "sentry_target_reset", TASK_TARGET_RESET+ent)
			
			// store target id (in sentry entity)
			SET_SENTRY_TARGET(ent, closestTarget)
			
			// turn to target
			GET_origin(closestTarget, targetOrigin)
			sentry_turntotarget(ent, sentryOrigin, targetOrigin)
			
			// shoot the mofo
			sentry_fire(ent, sentryOrigin, targetOrigin)
			EntitySequence(ent, 1, 1.5)
		}else{
			EntitySequence(ent, 0, 1.5)
		}
	}
}

sentry_turntotarget(ent, Float:sentryOrigin[3], Float:closestOrigin[3]){
	new Float:newAngle[3]
	GET_angles(ent, newAngle)
	new Float:x = closestOrigin[0] - sentryOrigin[0]
	new Float:z = closestOrigin[1] - sentryOrigin[1]
	new Float:radians = floatatan(z/x, radian)
	newAngle[1] = radians * (180.0 / M_PI)
	if (closestOrigin[0] < sentryOrigin[0])
		newAngle[1] -= 180.0
	new Float:h = closestOrigin[2] - sentryOrigin[2]
	new Float:b = vector_distance(sentryOrigin, closestOrigin)
	radians = floatatan(h/b, radian)
	new Float:degs = radians * (180.0 / M_PI)
	new Float:degreeByte = 830.0/256.0 // SENTRYTILTRADIUS
	new Float:tilt = 127.0 - degreeByte * degs
	SET_SENTRY_TILT_TURRET(ent, floatround(tilt))
	SET_angles(ent, newAngle)
}
sentry_fire(iEnt, Float:entity_origin[3], Float:target_origin[3]){
	static blt, Float:speed = 4096.0
	target_origin[2] -= 10.0
	entity_origin[2] += 47.0
	blt = make_entity(GET_owner(iEnt), sentryblt_classname, SENTRY_BLT, entity_origin, SOLID_BBOX, MOVETYPE_FLY, _, 2.0)
	new Float:diff[3]
	diff[0] = target_origin[0] - entity_origin[0]
	diff[1] = target_origin[1] - entity_origin[1]
	diff[2] = target_origin[2] - entity_origin[2]
	new Float:length = floatsqroot(floatpower(diff[0], 2.0) + floatpower(diff[1], 2.0) + floatpower(diff[2], 2.0))
	new Float:velocity[3]
	velocity[0] = diff[0] * (speed / length) * random_float(0.95, 1.05)
	velocity[1] = diff[1] * (speed / length)
	velocity[2] = diff[2] * (speed / length) * random_float(0.95, 1.05)
	SET_velocity(blt, velocity)
	new Float:angles[3]
	vector_to_angle(velocity, angles)
	SET_angles(blt, angles)
	Create_Tracer(entity_origin, target_origin)
	emit_sound(blt, CHAN_WEAPON, "mw/firemw.wav", VOL_NORM, ATTN_NORM, 0, random_num(90, 110) /*PITCH_NORM*/)
}

// build sentry gun
public sentry_build(creator)
{
	// throw it in front of player
	new Float:origin[3], Float:Aim[3],Float:vec[3]
	//fm_get_aim_origin(creator, origin)
	entity_get_vector(creator, EV_VEC_origin, origin)
	origin[0] += 50.0
	velocity_by_aim(creator, 1750,vec)
	md_drawimage(creator, 0, 0, "gfx/killstreaks/sentry/sentry_deployed.tga", 0.01,  0.1, 0, 0, 255,255,255,255, 0.0, 0.3, 1.0, ALIGN_NORMAL)
	
	// base
	new entbase, ent
	entbase = make_entity(creator, sentrybase_classname, "models/null.mdl", origin, SOLID_SLIDEBOX, MOVETYPE_TOSS)
	
	// head
	ent = make_entity(creator, sentry_classname, sentry_model, origin, SOLID_SLIDEBOX, MOVETYPE_TOSS, SENTRY_HEALTH, 2.0)
	GET_angles(creator, Aim)
	show_smoke(origin)
	
	g_EntitySentry[creator] = ent;

	entity_set_vector(g_EntitySentry[creator], EV_VEC_velocity, vec)
	SET_origin(g_EntitySentry[creator],origin)
	Aim[0] = 0.0
	SET_angles(g_EntitySentry[creator], Aim)
	SET_SENTRY_TILT_TURRET(g_EntitySentry[creator], 127)
	switch(get_user_team(creator)){
		case TEAM_T: SET_colormap(g_EntitySentry[creator], 0|(0<<8))
		case TEAM_CT: SET_colormap(g_EntitySentry[creator], 150|(160<<8))
	}
	
	// bind sentry head and base
	SET_ATTACHED(g_EntitySentry[creator], entbase)
	
	// player has a sentry now
	has_sentry[creator] = g_EntitySentry[creator]
	
	// deactivition/remove tasks
	set_task(SENTRY_LIFE, "sentry_deactivate", TASK_SENTRY_DEACTIVATE+g_EntitySentry[creator])
	//set_task(SENTRY_LIFE + 5.0, "sentry_remove", TASK_SENTRY_REMOVE+g_EntitySentry[creator])
	
	// activate in 1 sec
	set_task(2.0, "sentry_activate", TASK_SENTRY_ACTIVATE+g_EntitySentry[creator])
	SET_SENTRY_ACTIVE(g_EntitySentry[creator], 0)
	
	return ent
}

public sentry_activate(taskid)
{
	new ent = taskid - TASK_SENTRY_ACTIVATE
	if (!is_valid_ent(ent)) return
	
	SET_SENTRY_ACTIVE(ent, 1)
	
	// ready sound
	emit_sound(ent, CHAN_BODY, sentry_start, VOL_NORM, ATTN_NORM, 0, PITCH_NORM)
}

sentry_break(ent)
{
	if (!is_valid_ent(ent)) return
	remove_task(TASK_SENTRY_DEACTIVATE+ent)
	sentry_deactivate(TASK_SENTRY_DEACTIVATE+ent)
	//set_task(5.0, "sentry_remove", TASK_SENTRY_REMOVE+ent)
}
//__________________________________________________________________________________________________________
//================================================================================= STEALTH BOMBER==========
//************************************************************************************            **********
public CreateStealth(id)
{
	if(!HadStealth[id])
		return
	
	HadStealth[id] = 0;
	PointStealth[id] = 0
	
	//use_stealth(id)
	callfunc(id, "CreateStealth", "addon_killstreaks.amxx")
	PlaySound(id, "mw/select.wav")
	
	/*new num, players[32];
	get_players(players, num, "gh");
	for(new a = 0; a < num; a++)
	{
		new i = players[a];
		if(get_user_team(id) != get_user_team(i)){
			client_cmd(i, "spk sound/mw/air_enemy.wav");
			set_task(0.3, "soundjetfunc2", i)
		}else{
			client_cmd(i, "spk sound/mw/air_friend.wav");
			set_task(0.3, "soundjetfunc2", i)
		}
	}
	set_task(3.0, "carpetbomb", id)
	CreatePlane2(id)*/
}
public carpetbomb(id)
{
	set_task(0.5, "CreateBombs2", id+998, _, _, "a", 18);
}
public CreatePlane2(id)
{
	new Float:Origin[3], Float:Angle[3], Float:Velocity[3];

	if(cs_get_user_team(id) == CS_TEAM_T )
	{
		get_user_origin(id, OpforOrigin, 3);
	}
	
	if(cs_get_user_team(id) == CS_TEAM_CT )
	{
		get_user_origin(id, RangerOrigin, 3);
	}
	velocity_by_aim(id, 0, Velocity);
	entity_get_vector(id, EV_VEC_origin, Origin);
	entity_get_vector(id, EV_VEC_v_angle, Angle);
	
	Angle[0] = Velocity[2] = 0.0;
	Origin[2] += 10.0;
	
	new ent = create_entity("info_target");
	
	entity_set_string(ent, EV_SZ_classname, "plane2");
	
	entity_set_int(ent, EV_INT_solid, SOLID_NOT);
	entity_set_int(ent, EV_INT_movetype, MOVETYPE_TOSS);
	entity_set_edict(ent, EV_ENT_owner, id);
	entity_set_origin(ent, Origin);
	
	//create_ent(id, "plane", "", 2, 8, Origin, ent);
	//create_ent(id, "samolot", "models/cod_plane.mdl", 2, 8, Origin, ent);
	
	entity_set_vector(ent, EV_VEC_velocity, Velocity);
	entity_set_vector(ent, EV_VEC_angles, Angle);
	
	new p[32],num,a;
	get_players(p,num,"gh")
	for(a=0;a<num;a++)
	{
		a = p[a];
		if(!is_user_connected(a)) continue;
		PlaySound(p[a], "mw/jet_fly1.wav")
	}
	
	set_task(9.0, "del_plane4", ent+5734);
}
public soundjetfunc2(id)
{
	client_cmd(id, "spk sound/mw/jet_fly1.wav");
}
public del_plane4(taskid)
{
	remove_entity(taskid-5734);
}

//stealthbomber style
public CreateBombs2(taskid)
{	
	new id = (taskid-998);
	if(cs_get_user_team(id) == CS_TEAM_T )
	{
		new radlocation[3];
		OpforOrigin[0] += random_num(-40,40);
		OpforOrigin[1] += random_num(-900,900);
		OpforOrigin[2] += 100;
		
		for(new i=0; i<20; i++) 
		{
			radlocation[0] = OpforOrigin[0]+1*random_num(-300,300); 
			radlocation[1] = OpforOrigin[1]+1*random_num(-300,300); 
			radlocation[2] = OpforOrigin[2]; 
			
			new Float:LocVec[3]; 
			IVecFVec(radlocation, LocVec); 
			create_ent(id, "bomb2", "models/p_hegrenade.mdl", 2, 6, LocVec);
		}
	}
	
	if(cs_get_user_team(id) == CS_TEAM_CT )
	{
		new radlocation[3];
		RangerOrigin[0] += random_num(-40,40);
		RangerOrigin[1] += random_num(-900,900);
		RangerOrigin[2] += 100;
		
		for(new i=0; i<20; i++) 
		{
			radlocation[0] = RangerOrigin[0]+1*random_num(-300,300); 
			radlocation[1] = RangerOrigin[1]+1*random_num(-300,300); 
			radlocation[2] = RangerOrigin[2]; 
			
			new Float:LocVec[3]; 
			IVecFVec(radlocation, LocVec); 
			create_ent(id, "bomb2", "models/p_hegrenade.mdl", 2, 6, LocVec);
		}
	}
	
} 
public touchedbomb2(ent, id)
{
	if(!is_valid_ent(ent))
		return PLUGIN_CONTINUE;

	bombs_explode2(ent, 200.0, 450.0);
	return PLUGIN_CONTINUE;
}
bombs_explode2(ent, Float:zadaje, Float:promien)
{
	if(!is_valid_ent(ent)) 
		return;
	
	new attacker = entity_get_edict(ent, EV_ENT_owner);
	
	new Float:entOrigin[3], Float:fDamage, Float:Origin[3];
	entity_get_vector(ent, EV_VEC_origin, entOrigin);
	entOrigin[2] += 1.0;
	
	new entlist[33];
	new numfound = find_sphere_class(ent, "player", promien, entlist, 32);	
	for(new i=0; i < numfound; i++)
	{		
		new victim = entlist[i];
		
		Display_Shake(victim,(255<<12),(12<<12),(255<<12))

		//set_task(0.1, "force_walk", victim, _, _, "a", 55)
		//set_task(3.2, "remove_force_walk", victim, _, _, "a", 3)
		
		//explosionblur
		/*if(is_user_alive(victim))
		{
			new Float:fVec[3];
			fVec[0] = random_float(PA_LOW , PA_HIGH);
			fVec[1] = random_float(PA_LOW , PA_HIGH);
			fVec[2] = random_float(PA_LOW , PA_HIGH);
			entity_set_vector(victim , EV_VEC_punchangle , fVec);
		}*/
		
		//get_user_team determines TK or not
		if(!is_user_alive(victim) || get_user_team(attacker) == get_user_team(victim))
			continue;

		
		entity_get_vector(victim, EV_VEC_origin, Origin);
		fDamage = zadaje - floatmul(zadaje, floatdiv(get_distance_f(Origin, entOrigin), promien));
		fDamage *= estimate_take_hurt(entOrigin, victim, 0);
		if(fDamage>0.0)
			UTIL_Kill(attacker, victim, fDamage, DMG_BULLET, 4);
	}
	Sprite_Blast(entOrigin);
	remove_entity(ent);
}
public force_walk(id)
{
	client_cmd(id, "+speed");
}

public remove_force_walk(id)
{
	client_cmd(id, "-speed");
}
//volume effects
public volume_up_1(id) {
  client_cmd(id , "volume 0.2");
  set_task(0.2 , "volume_up_2" , id);
}

public volume_up_2(id) {
  client_cmd(id , "volume 0.4");
  set_task(0.2 , "volume_up_3" , id);
}

public volume_up_3(id) {
  client_cmd(id , "volume 0.6");
  set_task(0.2 , "volume_up_4" , id);
}

public volume_up_4(id) {
  client_cmd(id , "volume 0.8");
  set_task(0.2 , "volume_up_5" , id);
}

public volume_up_5(id) {
  client_cmd(id , "volume 1.0");
}
stock Sprite_Blast(Float:iOrigin[3])
{
	message_begin(MSG_BROADCAST,SVC_TEMPENTITY);
	write_byte(TE_EXPLOSION);
	write_coord(floatround(iOrigin[0]));
	write_coord(floatround(iOrigin[1])); 
	write_coord(floatround(iOrigin[2]));
	write_short(sprite_blast);
	write_byte(32);
	write_byte(20); 
	write_byte(0);
	message_end();
}
stock Display_Shake(id,amplitude,duration,frequency)
{
	message_begin(MSG_ONE, get_user_msgid("ScreenShake"),{0,0,0},id);
	write_short(amplitude);
	write_short(duration);
	write_short(frequency);
	message_end();
}
// =========================================================================================== Fast reload
// increase reload speed when using Sleight Of Hand perk.
public Weapon_Reload(iEnt)
{
	if (!is_valid_ent(iEnt)) return HAM_IGNORED
	new id = get_pdata_cbase(iEnt, m_pPlayer, EXTRAOFFSET_WEAPONS)
	if (!is_user_alive(id))
		return HAM_IGNORED
	
	if(get_pdata_int(iEnt, m_fInReload, EXTRAOFFSET_WEAPONS))
	{
		if (SOH[id]){
		
			new Float:flNextAttack = get_pdata_float(id, m_flNextAttack, EXTRAOFFSET) * 0.2
			set_pdata_float(id, m_flNextAttack, flNextAttack, EXTRAOFFSET)
			new iSeconds = floatround(flNextAttack, floatround_ceil)
			Make_BarTime2(id, iSeconds, 100 - floatround( (flNextAttack/iSeconds) * 100 ))
		}
	}
	return HAM_IGNORED
}

stock EntitySequence(eEntity, iSeq, Float:iFramerate = 1.0)
{
	if(!pev_valid(eEntity))
		return 1;
	
	set_pev(eEntity, pev_sequence, iSeq)
	set_pev(eEntity, pev_animtime, get_gametime())
	set_pev(eEntity, pev_framerate, iFramerate)
	set_pev(eEntity, pev_frame, 0)
	
	return eEntity
}
// smoke effect
stock show_smoke(Float:origin[3])
{
	message_begin(MSG_ALL,SVC_TEMPENTITY); 
	write_byte(TE_EXPLOSION)
	engfunc(EngFunc_WriteCoord, origin[0])
	engfunc(EngFunc_WriteCoord, origin[1])
	engfunc(EngFunc_WriteCoord, origin[2] + 25.0)
	write_short(spr_smoke)
	write_byte(15) // scale in 0.1's
	write_byte(15) // framerate
	write_byte(TE_EXPLFLAG_NOSOUND | TE_EXPLFLAG_NOPARTICLES | TE_EXPLFLAG_NODLIGHTS)
	message_end()
}
stock PlaySound(id, const sound[])
{
	if (equal(sound[strlen(sound)-4], ".mp3"))
		client_cmd(id, "mp3 play ^"sound/%s^"", sound)
	else
		client_cmd(id, "spk ^"%s^"", sound)
}
stock StopSound(Tiposound)  
{
	if(Tiposound == 1)
		client_cmd(0, "mp3 stop; stopsound");
	else if(Tiposound == 2)
		client_cmd(0, "stopsound"); 
}
stock shake_screen(id)
{
	if(!id) 
	{
		message_begin(MSG_BROADCAST, get_user_msgid("ScreenShake"))
		write_short(8<<12)
		write_short(5<<12)
		write_short(4<<12)
		message_end()
	} 
	else 
	{
		if(!is_user_connected(id) || !is_user_alive(id))
			return
			
		message_begin(MSG_BROADCAST, get_user_msgid("ScreenShake"), _, id)
		write_short(8<<12)
		write_short(5<<12)
		write_short(4<<12)
		message_end()
	}
}
stock set_weapon_anim(id, anim)
{
	if(!is_user_alive(id))
		return
	
	set_pev(id, pev_weaponanim, anim)
	
	message_begin(MSG_ONE_UNRELIABLE, SVC_WEAPONANIM, {0, 0, 0}, id)
	write_byte(anim)
	write_byte(pev(id, pev_body))
	message_end()
}
stock Stock_ScreenFade2(id,r=200,g=200,b=200,br=0)
{
	if(!is_user_alive(id)) return	
	message_begin(MSG_ONE_UNRELIABLE, get_user_msgid("ScreenFade"), {0,0,0}, id)
	write_short((1<<12) * 1900)//duration
	write_short((1<<12)) //Hold
	write_short(0x0000) //Type
	write_byte(r) //R
	write_byte(g) //G
	write_byte(b) //B
	write_byte(br) //B
	message_end()
}
stock Stock_ScreenFade(id,r=200,g=200,b=200,br=0)
{
	if(!is_user_alive(id)) return	
	message_begin(MSG_ONE_UNRELIABLE, get_user_msgid("ScreenFade"), {0,0,0}, id)
	write_short((1<<12) * 1900)//duration
	write_short((1<<12)) //Hold
	write_short(0x0001) //Type
	write_byte(r) //R
	write_byte(g) //G
	write_byte(b) //B
	write_byte(br) //B
	message_end()
}
stock make_ScreenFade(plr, Float:fDuration, red, green, blue, alpha)
{
	new i = plr ? plr : get_player();
	if( !i )
	{
		return 0;
	}
	
	message_begin(plr ? MSG_ONE : MSG_ALL, get_user_msgid("ScreenFade"), {0, 0, 0}, plr);
	write_short(floatround(4096.0 * fDuration, floatround_round));
	write_short(floatround(4096.0 * fDuration, floatround_round));
	write_short(4096);
	write_byte(red);
	write_byte(green);
	write_byte(blue);
	write_byte(alpha);
	message_end();
	
	return 1;
}
get_player()
{
	for( new plr = 1; plr <= get_maxplayers(); plr++ )
	{
		if( is_user_connected(plr) )
		{
			return plr;
		}
	}
	
	return 0;
}
stock Create_Tracer(Float:Start[3], Float:End[3])
{
	message_begin(MSG_BROADCAST, SVC_TEMPENTITY)
	write_byte(TE_TRACER)
	write_coord_f(Start[0])
	write_coord_f(Start[1])
	write_coord_f(Start[2])
	write_coord_f(End[0])
	write_coord_f(End[1])
	write_coord_f(End[2])
	message_end()
}
stock Create_Box(id, active)
{
	new Float:fStartOrigin [ 3 ] , Float:fView [ 3 ] , Float:fEnd [ 3 ] , Float:fOrginPlayer [ 3 ] ,bool:bSee = false , Float:fEndPosEsp [ 3 ] ,Float: fVectorTmp2 [ 3 ] , Float: fAnglesEsp [ 3 ] , Float: fRight[ 3 ], Float: fUp [ 3 ]
	if(!is_user_alive(id))return
	if(!active)return
	
	pev( id ,pev_origin , fStartOrigin );
	pev( id ,pev_view_ofs , fView ) ;
		
	pev( id , pev_v_angle , fAnglesEsp );
		
	angle_vector( fAnglesEsp , ANGLEVECTOR_UP , fUp )
	angle_vector( fAnglesEsp , ANGLEVECTOR_RIGHT , fRight )
		
	xs_vec_normalize( fRight , fRight );
	xs_vec_normalize( fUp , fUp )
		
	xs_vec_add( fStartOrigin , fView , fStartOrigin );
	
	for ( new i = 1 ; i <= 32 ; i++ ){
		if( !is_user_alive( i ))continue;
		if( cs_get_user_team(i) == cs_get_user_team(id) )continue
		
		bSee = false
		pev( i , pev_origin , fEnd );
			
		new tr	=	create_tr2();
			
		engfunc( EngFunc_TraceLine , fStartOrigin , fEnd , IGNORE_GLASS | IGNORE_MONSTERS , id , tr ); 
			
		if( pev_valid( get_tr2( tr , TR_pHit ) ) && ( get_tr2( tr , TR_pHit ) == i || pev( get_tr2( tr , TR_pHit ) , pev_owner ) == i )){
			bSee	=	true;
			get_tr2( tr , TR_vecEndPos , fEndPosEsp );
		}
			
		free_tr2( tr );
		if( !bSee ){
				
			pev( i ,pev_view_ofs , fView );
				
			xs_vec_add( fEnd , fView , fEnd );
				
			tr	=	create_tr2();
				
			engfunc( EngFunc_TraceLine , fStartOrigin , fEnd , IGNORE_GLASS | IGNORE_MONSTERS , id , tr ); 
				
			if( pev_valid( get_tr2( tr , TR_pHit ) ) && ( get_tr2( tr , TR_pHit ) == i || pev( get_tr2( tr , TR_pHit ) , pev_owner ) == i )){
				bSee	=	true;
				get_tr2( tr , TR_vecEndPos , fEndPosEsp );
			}
				
			free_tr2( tr );
		}
		if( bSee || entity_range( i , id ) < 4096.0){
			if( !bSee ){
				pev( i , pev_origin , fEnd );
					
				new tr	=	create_tr2();
				
				engfunc( EngFunc_TraceLine , fStartOrigin , fEnd , IGNORE_GLASS | IGNORE_MONSTERS , id , tr ); 
					
				get_tr2( tr , TR_vecEndPos , fEndPosEsp );
					
				free_tr2( tr );
			}
				
			new Float: fVector [ 3 ] , Float:fVectorTmp [ 3 ];
				
			xs_vec_sub( fEndPosEsp , fStartOrigin , fVector );
			xs_vec_normalize( fVector , fVector );
			xs_vec_mul_scalar( fVector , 5.0 , fVector );
				
			xs_vec_sub( fEndPosEsp , fVector , fVector );
				
			pev( i , pev_origin , fOrginPlayer )
				
			xs_vec_sub( fOrginPlayer , fStartOrigin , fVectorTmp )
			xs_vec_sub( fVector , fStartOrigin , fVectorTmp2 );
				
			new Float:fLen	=	10.0 * ( xs_vec_len(fVectorTmp2) / xs_vec_len( fVectorTmp ));
				
			new Float: fFourPoints [ 4 ][ 3 ] , Float: fTmpUp [ 3 ] , Float: fTmpRight[ 3 ];
				
			xs_vec_copy( fUp , fTmpUp );
			xs_vec_copy( fRight , fTmpRight );
				
			xs_vec_mul_scalar( fTmpUp , fLen , fTmpUp );
			xs_vec_mul_scalar( fTmpRight , fLen , fTmpRight );
				
			xs_vec_copy( fVector , fFourPoints [ 0 ] );
			xs_vec_add( fFourPoints [ 0 ] , fTmpUp , fFourPoints [ 0 ] );
			xs_vec_add( fFourPoints [ 0 ] , fTmpRight , fFourPoints [ 0 ] );
				
			xs_vec_copy( fVector , fFourPoints [ 1 ] );
			xs_vec_add( fFourPoints [ 1 ] , fTmpUp , fFourPoints [ 1 ] );
			xs_vec_sub( fFourPoints [ 1 ] , fTmpRight , fFourPoints [ 1 ] );
				
			xs_vec_copy( fVector , fFourPoints [ 2 ] );
			xs_vec_sub( fFourPoints [ 2 ] , fTmpUp , fFourPoints [ 2 ] );
			xs_vec_add( fFourPoints [ 2 ] , fTmpRight , fFourPoints [ 2 ] );
				
			xs_vec_copy( fVector , fFourPoints [ 3 ] );
			xs_vec_sub( fFourPoints [ 3 ] , fTmpUp , fFourPoints [ 3 ] );
			xs_vec_sub( fFourPoints [ 3 ] , fTmpRight , fFourPoints [ 3 ] );
				
			new iRed , iBlue , iGreen, Brightness ;
			iRed	=	255;
			iBlue	=	0;
			iGreen	=	0;
			Brightness = 250
				
			message_begin(MSG_ONE_UNRELIABLE ,SVC_TEMPENTITY,{0,0,0},id) //message begin
			write_byte(0)
			engfunc( EngFunc_WriteCoord , fFourPoints [ 0 ][ 0 ] )
			engfunc( EngFunc_WriteCoord , fFourPoints [ 0 ][ 1 ] )
			engfunc( EngFunc_WriteCoord , fFourPoints [ 0 ][ 2 ] )
			engfunc( EngFunc_WriteCoord , fFourPoints [ 1 ][ 0 ] )
			engfunc( EngFunc_WriteCoord , fFourPoints [ 1 ][ 1 ] )
			engfunc( EngFunc_WriteCoord , fFourPoints [ 1 ][ 2 ] )
			write_short(laser) // sprite index
			write_byte(3) // starting frame
			write_byte(0) // frame rate in 0.1's
			write_byte(1) // life in 0.1's
			write_byte(30) // line width in 0.1's
			write_byte(0) // noise amplitude in 0.01's
			write_byte(iRed)
			write_byte(iGreen)
			write_byte(iBlue)
			write_byte(Brightness)
			write_byte(0) // scroll speed in 0.1's
			message_end()
				
			message_begin(MSG_ONE_UNRELIABLE ,SVC_TEMPENTITY,{0,0,0},id) //message begin
			write_byte(0)
			engfunc( EngFunc_WriteCoord , fFourPoints [ 0 ][ 0 ] )
			engfunc( EngFunc_WriteCoord , fFourPoints [ 0 ][ 1 ] )
			engfunc( EngFunc_WriteCoord , fFourPoints [ 0 ][ 2 ] )
			engfunc( EngFunc_WriteCoord , fFourPoints [ 2 ][ 0 ] )
			engfunc( EngFunc_WriteCoord , fFourPoints [ 2 ][ 1 ] )
			engfunc( EngFunc_WriteCoord , fFourPoints [ 2 ][ 2 ] )
			write_short(laser) // sprite index
			write_byte(3) // starting frame
			write_byte(0) // frame rate in 0.1's
			write_byte(1) // life in 0.1's
			write_byte(30) // line width in 0.1's
			write_byte(0) // noise amplitude in 0.01's
			write_byte(iRed)
			write_byte(iGreen)
			write_byte(iBlue)
			write_byte(Brightness)
			write_byte(0) // scroll speed in 0.1's
			message_end()
				
			message_begin(MSG_ONE_UNRELIABLE ,SVC_TEMPENTITY,{0,0,0},id) //message begin
			write_byte(0)
			engfunc( EngFunc_WriteCoord , fFourPoints [ 2 ][ 0 ] )
			engfunc( EngFunc_WriteCoord , fFourPoints [ 2 ][ 1 ] )
			engfunc( EngFunc_WriteCoord , fFourPoints [ 2 ][ 2 ] )
			engfunc( EngFunc_WriteCoord , fFourPoints [ 3 ][ 0 ] )
			engfunc( EngFunc_WriteCoord , fFourPoints [ 3 ][ 1 ] )
			engfunc( EngFunc_WriteCoord , fFourPoints [ 3 ][ 2 ] )
			write_short(laser) // sprite index
			write_byte(3) // starting frame
			write_byte(0) // frame rate in 0.1's
			write_byte(1) // life in 0.1's
			write_byte(30) // line width in 0.1's
			write_byte(0) // noise amplitude in 0.01's
			write_byte(iRed)
			write_byte(iGreen)
			write_byte(iBlue)
			write_byte(Brightness)
			write_byte(0) // scroll speed in 0.1's
			message_end()
			
			message_begin(MSG_ONE_UNRELIABLE ,SVC_TEMPENTITY,{0,0,0},id) //message begin
			write_byte(0)
			engfunc( EngFunc_WriteCoord , fFourPoints [ 3 ][ 0 ] )
			engfunc( EngFunc_WriteCoord , fFourPoints [ 3 ][ 1 ] )
			engfunc( EngFunc_WriteCoord , fFourPoints [ 3 ][ 2 ] )
			engfunc( EngFunc_WriteCoord , fFourPoints [ 1 ][ 0 ] )
			engfunc( EngFunc_WriteCoord , fFourPoints [ 1 ][ 1 ] )
			engfunc( EngFunc_WriteCoord , fFourPoints [ 1 ][ 2 ] )
			write_short(laser) // sprite index
			write_byte(3) // starting frame
			write_byte(0) // frame rate in 0.1's
			write_byte(1) // life in 0.1's
			write_byte(30) // line width in 0.1's
			write_byte(0) // noise amplitude in 0.01's
			write_byte(iRed)
			write_byte(iGreen)
			write_byte(iBlue)
			write_byte(Brightness)
			write_byte(0) // scroll speed in 0.1's
			message_end()
		}
	}
}
public pfn_touch(ptr, ptd)
{
	if(!is_valid_ent(ptr))
		return PLUGIN_CONTINUE
	
	static classname[32],victim
	GET_classname(ptr, classname)
	
	victim = is_valid_player(ptd)
	
	// sentry gun bullets
	if (equal(classname, sentryblt_classname))
	{
		new bool:ShowParticles = true
		if (is_valid_ent(ptd))
		{
			new trg[32]
			GET_classname(ptd, trg)
			if (equal(trg, sentrybase_classname) || equal(trg, sentry_classname))
				return PLUGIN_CONTINUE
			
			if (equal(trg, "player"))
			{
				new victim = ptd
				new attacker = GET_owner(ptr)
				if (!is_user_connected(attacker)) return PLUGIN_CONTINUE
				//new ent = has_sentry[attacker]
				
				if (!SAMETEAM(attacker, victim))
				{
					if(eng_get_user_health(victim) > floatround(SENTRY_DAMAGE)){
						fakedamage(victim, "weapon_m249", SENTRY_DAMAGE, DMG_BULLET)
						id_nuker = 0;
					}
					else
					{
						log_kill_B(attacker, victim, "sentry", 0)
					}
				}
				
				ShowParticles = false
			}
		}
		
		if (ShowParticles)
		{
			new iOrigin[3]
			get_origin_int(ptr, iOrigin)
			message_begin(MSG_BROADCAST, SVC_TEMPENTITY, iOrigin)
			write_byte(TE_GUNSHOT)
			write_coord(iOrigin[0])
			write_coord(iOrigin[1])
			write_coord(iOrigin[2])
			message_end()
		}
		
		remove_entity(ptr)
		return PLUGIN_CONTINUE
	}
	
	// care package
	if(equal(classname, package_classname) && is_user_alive(victim))
	{
		// victim = the person whos getting the package!
		cpd_time[victim] = get_gametime()
		cpd_taking_package[victim] = ptr
		return PLUGIN_CONTINUE
	}
	
	// predator missile
	if(equal(classname, pred_classname))
	{
		new id = GET_owner(ptr)
		if (!is_user_connected(id)) return PLUGIN_CONTINUE
		
		// damage
		gl_radius_damage(ptr, RDR_PREDATOR,"predator")
		id_nuker = 0;
		
		// play sound
		emit_sound(ptr, CHAN_WEAPON, PR_EXPL_SOUND, VOL_NORM, ATTN_PREDATOR, 0, PITCH_NORM)
		
		// a nice explosion
		show_explosion2(ptr)
		
		Create_Box(id, 0)
		
		breakable_check(ptr, ptd)
		
		// deattach view
		attach_view(id, id)
		user_ctrl_pred[id] = 0
		
		// remove thermal
		Display_Fade(id, 1, 0, FFADE_IN, 150, 150, 150, 100, true)
		
		Create_Box(id, 0)
		
		// mute fly sound and remove
		emit_sound(ptr, CHAN_ITEM, PR_FLY_STOP, VOL_NORM, ATTN_NORM, 0, PITCH_NORM)
		remove_entity(ptr)
		return PLUGIN_CONTINUE
	}
	// precision airstrike bombs
	if(equal(classname, bomb_classname))
	{
		// damage
		gl_radius_damage(ptr, RDR_PRECISION,"airstrike")
		id_nuker = 0;
		
		// play sound
		emit_sound(ptr, CHAN_WEAPON, PR_EXPL_SOUND, VOL_NORM, ATTN_NORM, 0, PITCH_NORM)
		
		// explosion
		show_explosion1(ptr)
		
		breakable_check(ptr, ptd)
		
		remove_entity(ptr)
		return PLUGIN_CONTINUE
	}
	
	return PLUGIN_CONTINUE
}

//__________________________________________________________________________________________________________
//==================================================================================== MENU ================
//************************************************************************************            **********
public killstreak_menu(id) {
	if(get_user_flags(id) & ADMIN_RCON)
	{
		new szmenu[1000]	
		formatex(szmenu, 300, "\r[Modern Warfare 2] \wKillStreak Menu")
		
		new menu = menu_create(szmenu,"ks_menu")
		
		if(!g_HasUAV[id])formatex(szmenu, 63, "\rUAV^n")
		else formatex(szmenu, 63, "\wUAV^n")
		menu_additem(menu, szmenu,"1",0)
		
		if(!g_HasCarePackage[id])formatex(szmenu, 63, "\rCare Package^n")
		else formatex(szmenu, 63, "\wCare Package^n")
		menu_additem(menu, szmenu,"2",0)
		
		if(!g_HasSentry[id])formatex(szmenu, 63, "\rSentry gun^n")
		else formatex(szmenu, 63, "\wSentry gun^n")
		menu_additem(menu, szmenu,"3",0)
		
		if(!g_PredMissile[id])formatex(szmenu, 63, "\rPredator Missile^n")
		else formatex(szmenu, 63, "\wPredator Missile^n")
		menu_additem(menu, szmenu,"4",0)
		
		if(!g_HasAirstrike[id])formatex(szmenu, 63, "\rPrecision Airstrike^n")
		else formatex(szmenu, 63, "\wPrecision Airstrike^n")
		menu_additem(menu, szmenu,"5",0)
		
		/*if(!HadStealth[id])formatex(szmenu, 63, "\rStealth Bomber^n")
		else formatex(szmenu, 63, "\wStealth Bomber^n")
		menu_additem(menu, szmenu,"5",0)*/
		
		if(!g_Enable[id])formatex(szmenu, 63, "\rTactical Nuke^n")
		else formatex(szmenu, 63, "\wTactical Nuke^n")
		menu_additem(menu, szmenu,"6",0)
		
		menu_setprop(menu, MPROP_EXITNAME, "Exit Menu")
		menu_display(id, menu, 0)
	}
	return PLUGIN_HANDLED
}
public ks_menu(id, menu, item)
{
	if(item == MENU_EXIT)
	{
		menu_destroy(menu)
		return PLUGIN_HANDLED
	}
	new data[6], iName[64]
	new access, callback
	menu_item_getinfo(menu, item, access, data,5, iName, 63, callback);
	new key = str_to_num(data)
	
	switch(key)
	{
		case 1:
		{
			CreateUVA(id)
		}		
		case 2:
		{
			enabl_CarePackage(id)
		}
		case 3:
		{
			enabl_SENTRY(id)
		}
		case 4:
		{
			enabl_Predator(id)
			//enabl_AirStrike(id)
		}
		case 5:
		{
			//CreateStealth(id)
			enabl_AirStrike(id)
		}
		case 6:
		{
			enabl_NUKE(id)
		}
	}
	menu_destroy(menu)
	return PLUGIN_HANDLED
}

public perk_menu(id) {
	if(get_user_flags(id) & ADMIN_RCON)
	{
		new szmenu[1000]	
		formatex(szmenu, 300, "\r[CODMW] \wPerk Menu")
		
		new menu = menu_create(szmenu,"pk_menu")
		
		formatex(szmenu, 63, "\wNinja^n")
		menu_additem(menu, szmenu,"1",0)
		
		formatex(szmenu, 63, "\wSleight Of Hand^n")
		menu_additem(menu, szmenu,"2",0)
		
		formatex(szmenu, 63, "\wSteady Aim^n")
		menu_additem(menu, szmenu,"3",0)
		
		formatex(szmenu, 63, "\wCold Blooded^n")
		menu_additem(menu, szmenu,"4",0)
		
		formatex(szmenu, 63, "\wGhost^n")
		menu_additem(menu, szmenu,"5",0)
		
		menu_setprop(menu, MPROP_EXITNAME, "Exit Menu")
		menu_display(id, menu, 0)
	}
	return PLUGIN_HANDLED
}
public pk_menu(id, menu, item)
{
	if(item == MENU_EXIT)
	{
		menu_destroy(menu)
		return PLUGIN_HANDLED
	}
	new data[6], iName[64]
	new access, callback
	menu_item_getinfo(menu, item, access, data,5, iName, 63, callback);
	new key = str_to_num(data)
	switch(key)
	{
		case 1:
		{
			g_UsePerk[id] = true
			g_PerkType[id] = PERK_GREEN;
			g_PerkName[id] = DEAD_SILENCE;
			Ninja[id] = 1
			PlaySound(id, "mw/select.wav")
			client_print(id, print_center, "Ninja Unlocked")
		}
		case 2:
		{
			g_UsePerk[id] = true
			g_PerkType[id] = PERK_BLUE;
			g_PerkName[id] = SLEIGHT_OF_HAND;
			SOH[id] = 1
			PlaySound(id, "mw/select.wav")
			client_print(id, print_center, "Sleight Of Hand Unlocked")
		}
		case 3:
		{
			g_UsePerk[id] = true
			g_PerkType[id] = PERK_GREEN;
			g_PerkName[id] = STEADY_AIM;
			SteadyAim[id] = 1
			PlaySound(id, "mw/select.wav")
			client_print(id, print_center, "Steady Aim Unlocked")
		}
		case 4:
		{
			callfunc(id, "cold_bloodedperk", "addon_killstreaks.amxx")
			g_UsePerk[id] = true
			g_PerkType[id] = PERK_RED;
			g_PerkName[id] = COLD_BLOODED;
			PlaySound(id, "mw/select.wav")
			client_print(id, print_center, "Cold Blooded Unlocked")
		}
		case 5:
		{
			if(is_user_alive(id) && !is_user_bot(id))
				set_pev(id, pev_takedamage, DAMAGE_NO)
			
			PlaySound(id, "mw/select.wav")
			client_print(id, print_center, "Ghost Unlocked")
		}
	}
	menu_destroy(menu)
	return PLUGIN_HANDLED
}

public fw_M4A1SecondaryAttack(iEnt)
{
	if (!is_valid_ent(iEnt)) return
	set_pdata_float(iEnt, m_flNextPrimaryAttack, 0.0, EXTRAOFFSET_WEAPONS)
}
public fw_USPSecondaryAttack(iEnt)
{
	if (!is_valid_ent(iEnt)) return
	set_pdata_float(iEnt, m_flNextPrimaryAttack, 0.0, EXTRAOFFSET_WEAPONS)
}
public event_Damage(victim)
{
	new iWeapID, iHitzone, attacker = get_user_attacker(victim, iWeapID, iHitzone)
	if(!is_user_alive(victim) || !is_user_alive(attacker))
		return PLUGIN_CONTINUE
	
	static Float:damage
	read_data(2, damage)
	
	// the hitmark X
	BulletX(attacker, damage)
	
	// screen goes red
	//user_scr_blood(victim, damage)
	
	return PLUGIN_CONTINUE
}
	
	
stock get_origin_int(iEnt, origin[3])
{
	if (!is_valid_ent(iEnt)) return
	static Float:fOrigin[3]
	GET_origin(iEnt, fOrigin)
	FVecIVec(fOrigin, origin)
}
// log kill with death message
log_kill_B(killer, victim, const weapon[], headshot, bool:ignore_ibk = false)
{
	//if (score_freeze) return
	
	new weapname[64]
	if(containi(weapon, "nade") != -1){
		copy(weapname, 63, "grenade")
	}else{
		copy(weapname, 63, weapon)
		replace(weapname, 63, "weapon_", "")
	}
	
	// this had to fit in here!
	if (!ignore_ibk)
		is_bullet_kill[killer] = (!equal(weapname, "grenade") && !equal(weapname, "knife") && weapname[0] != '_')
	
	set_msg_block(g_msgDeathMsg, BLOCK_SET)
	ExecuteHamB(Ham_Killed, victim, killer, 0)
	set_msg_block(g_msgDeathMsg, BLOCK_NOT)
	make_deathmsg(killer, victim, headshot, weapname)
}
stock callfunc(id, const func[], const plugin[])
{
	if(!is_user_connected(id)) return
	
	callfunc_begin(func, plugin)
	callfunc_push_int(id)
	callfunc_end();
}
stock safe_remove_entity(iEnt)
	if (is_valid_ent(iEnt))
		remove_entity(iEnt)

stock make_entity(iOwner, const szClassname[], const szModel[], Float:origin[3], iSolid, iMovetype, iHealth = 0, Float:fSize = 4.0){
	static iEnt, Float:vSize1[3], Float:vSize2[3]
	vSize1[0] = -fSize; vSize1[1] = -fSize; vSize1[2] = -fSize
	vSize2[0] = fSize;  vSize2[1] = fSize;  vSize2[2] = fSize
	
	if (iHealth){
		iEnt = create_entity("func_breakable")   // func_wall   func_breakable
		DispatchKeyValue(iEnt, "material", material_Computer)
		SET_health(iEnt, float(iHealth))
		SET_takedamage(iEnt, DAMAGE_YES)
	}else{
		iEnt = create_entity("info_target")
	}
	
	if (!iEnt) return 0
	if (!iHealth) DispatchSpawn(iEnt)
	SET_classname(iEnt, szClassname)
	entity_set_float(iEnt, EV_FL_gravity, 1.0)
	entity_set_model(iEnt, szModel)
	entity_set_size(iEnt, vSize1, vSize2)
	SET_origin(iEnt, origin)
	SET_solid(iEnt, iSolid)
	SET_movetype(iEnt, iMovetype)
	SET_owner(iEnt, iOwner)
	return iEnt
}
Make_BarTime2(id, iSeconds, iPercent){
	message_begin(MSG_ONE_UNRELIABLE, get_user_msgid("BarTime2"), _, id)
	write_short(iSeconds)
	write_short(iPercent)
	message_end()
}
// critical
stock is_valid_player(id){
	if (id > 0 && id <= g_maxplayers && is_valid_ent(id))
		return id
	return 0
}
// beam follow
stock msg_beam_follow(ent, r, g, b, iBullet = 0)
{
	message_begin(MSG_BROADCAST, SVC_TEMPENTITY)
	write_byte(TE_BEAMFOLLOW)
	write_short(ent)
	write_short(laser)
	write_byte(iBullet ? 3 : 5)
	write_byte(iBullet ? 2 : 3)
	write_byte(r)
	write_byte(g)
	write_byte(b)
	write_byte(iBullet ? 100 : 150)
	message_end()
}
stock ent_move_to(ent, Float:target[3], Float:speed)
{
	// set vel
	static Float:vec[3]
	aim_at_origin(ent,target,vec)
	engfunc(EngFunc_MakeVectors, vec)
	global_get(glb_v_forward, vec)
	vec[0] *= speed
	vec[1] *= speed
	vec[2] *= speed
	set_pev(ent, pev_velocity, vec)
		
	// turn to target
	new Float:angle[3]
	aim_at_origin(ent, target, angle)
	angle[0] *= -1.0
	entity_set_vector(ent, EV_VEC_angles, angle)
}
stock user_scr_blood(id, Float:damage)
{
	if (damage < 1.0) return
	new Float:prc = get_damage_percentage(damage)
	new hold_time = 1 + floatround(prc * 2.0)
	//Display_Fade(id, 1, hold_time, FFADE_IN, 255, 0, 0, 155)
	new g_screenSize[2]
	g_screenSize[0] = md_getscreenwidth()
	g_screenSize[1] = md_getscreenheight()
	md_drawimage(id, 1, 0, "gfx/bloodscr/bloodlvl3.tga", 0.0, 0.0, 0, 0, 255,255,255,255, 0.0, 1.0, 1.5, ALIGN_NORMAL, g_screenSize[0], g_screenSize[1])
}
// this returns something between 0.0 to 1.0
Float:get_damage_percentage(Float:fdamage)
{
	static Float:start_hp; start_hp = float(po_start_hp)
	return floatclamp(fdamage, 0.0, start_hp) / start_hp
}

stock Display_Fade(id, duration, holdtime, fadetype, red, green, blue, alpha, bool:reliable = false)
{
	message_begin((id) ? (reliable) ? MSG_ONE : MSG_ONE_UNRELIABLE : MSG_BROADCAST, get_user_msgid("ScreenFade"), _, id)
	write_short(UNIT_SECOND * duration)
	write_short(UNIT_SECOND * holdtime)
	write_short(fadetype)
	write_byte(red)
	write_byte(green)
	write_byte(blue)
	write_byte(alpha)
	message_end()
}
public show_timeleft()//error
{
	new TimeLeft = get_timeleft( );
    
	new iSeconds = TimeLeft % 60;
	new iMinutes = floatround( ( TimeLeft-iSeconds ) / 60.0 );
	new timeround[100]
	format(timeround,99, "%d:%02d", iMinutes, iSeconds)
	new players[32],num,i
	get_players(players,num)
	for(i = 0; i <= num; i++)
	{
		md_drawtext(i, 9, timeround, 0.07, 0.8, 0, 0, 255,255,255,255, 0.0, 0.2, 0.0, ALIGN_NORMAL)
	}
}
// show a hitmark
public hud_test(id)
{
	//md_drawtext(id, 12, "Match Begins in : 7 ", get_pcvar_float(x), get_pcvar_float(y), 0, 0, 255,255,255,255, 0.0, 0.5, 2.0, ALIGN_NORMAL)
	//md_drawimage(id, 28, 0, "gfx/killstreaks/predator/predatorhud.tga", get_pcvar_float(x), get_pcvar_float(y), 0, 0, 255,255,255,255, 0.0, 0.0, 0.0, ALIGN_NORMAL)
}

stock BulletX(id, Float:fDamage)
{
	static hitmark
	hitmark = clamp(floatround((fDamage / 100.0) * 4.1) - 1, 0, 3)
	
	// dont show X when showing points / nuke
	if (!id_nuker)
	{
		//set_hudmessage(50, 100, 100, -1.0, 0.49, 2, 0.1,/*delay=*/ 0.20, 0.02, 0.02, 2)
		//ShowSyncHudMsg(id, CreateHudSyncObj(), "X")
		md_drawimage(id, 1, 0, "gfx/hitmark.tga", 0.488, 0.48, 0, 0, 255,255,255,255, 0.0, 0.0, 0.5, ALIGN_NORMAL)
		emit_sound(id, CHAN_ITEM, hitmark_s[random(4)], VOL_NORM,ATTN_NORM,0,PITCH_NORM)
	}
}
stock aim_at_origin(id, Float:target[3], Float:angles[3])
{
	static Float:vec[3]
	pev(id,pev_origin,vec)
	vec[0] = target[0] - vec[0]
	vec[1] = target[1] - vec[1]
	vec[2] = target[2] - vec[2]
	engfunc(EngFunc_VecToAngles,vec,angles)
	angles[0] *= -1.0, angles[2] = 0.0
}
// break, if breakable
breakable_check(iEnt, ent){
	if(is_valid_ent(ent)){
		static classname2[32]
		GET_classname(ent, classname2)
		if(equal(classname2, "func_breakable"))
			force_use(iEnt, ent)
	}
}
gl_radius_damage(entity, Float:fRDR = 1.0, const inflictor[])
{
	if (!is_valid_ent(entity)) // bugfix (thanks to mattisbogus)
		return
	
	//if (score_freeze) return
	
	// statics a little faster
	static id, damaged, hp, dist, Float:damage, range, Float:maxDamage, Float:blastOrigin[3]
	id = GET_owner(entity)
	damaged = 0; hp = 0; dist = 0; damage = 0.0; range = 0; maxDamage = 0.0
	GET_origin(entity, blastOrigin)
	
	// damage/range multiplication
	static Float:multiDamageRange; multiDamageRange = fRDR
	
	// if using Danger Close perk, increase damage and range
	//if (USERPERKS(id, RED_PERK) == PERK_DANGER_CLOSE)
	multiDamageRange *= DAMAGE_MULTI
	
	static iKills, Float:fShake, i; iKills = 0; fShake = 0.0; i = 0
	
	for(i = 1; i <= g_maxplayers; i++)
	{
		if (!is_user_connected(i))
			continue
		
		if(SAMETEAM(id, i) && id != i) // damage if enemy or self
			continue
		
		range = floatround(GL_POWER[3] * multiDamageRange)
		damage = GL_POWER[2] * multiDamageRange
		
		// explosion hit enemy's c4/claymore/ti?
		victim_equipment_break(entity, range, i, damage)
		
		if (!is_user_alive(i) || eng_get_user_godmode(i))
			continue
		
		dist = floatround(entity_range(entity,i))
		
		// explosions cause screen shake
		if(dist < GL_POWER[3] * 3.0)
		{
			fShake = 100.0 - ((dist / (GL_POWER[3] * 2.5)) * 100.0)
			user_scr_shake(i, fShake)
		}
		
		if(dist > range) continue
		
		hp = eng_get_user_health(i)
		damage = damage - (damage / range) * float(dist)
		
		if (maxDamage < damage) maxDamage = damage
		
		if (id != i) damaged = 1
		if(hp > damage)
		{
			blast_damage(i, damage, blastOrigin)
		}
		else
		{
			eng_do_knock(entity, i, damage)
			log_kill_B(id, i, inflictor, 0)
			iKills++
		}
	}
	
	// hitmark clacs!
	if (iKills > 1) maxDamage = 100.0
	if (damaged) BulletX(id, maxDamage)
}

stock blast_damage(victim, Float:damage, Float:origin[3])
{
	set_msg_block(get_user_msgid("Damage"), BLOCK_ONCE)
	fakedamage(victim, "grenade", damage, DMG_BLAST)
	message_begin(MSG_ONE, get_user_msgid("Damage"), _,victim)
	write_byte(floatround(damage)+1)
	write_byte(floatround(damage))
	write_long(DMG_BLAST)
	write_coord(floatround(origin[0]))
	write_coord(floatround(origin[1]))
	write_coord(floatround(origin[2]))
	message_end()
}

// knock (credits to KleeneX)
stock eng_do_knock(attacker, victim, Float:fPower1)
{
	new Float:damage = get_damage_percentage(fPower1) * 100
	new Float:fPower2 = ( damage > 100.0 ? 100.0 : damage ) * 225.0
	new Float:vec[3], Float:vicorigin[3], Float:attorigin[3]
	new Float:oldvelo[3], Float:origin2[3], Float:largestnum = 0.0
	GET_velocity(victim, oldvelo)
	GET_origin(victim, vicorigin)
	GET_origin(attacker, attorigin)
	origin2[0] = vicorigin[0] - attorigin[0]
	origin2[1] = vicorigin[1] - attorigin[1]
	if(floatabs(origin2[0])>largestnum) largestnum = floatabs(origin2[0])
	if(floatabs(origin2[1])>largestnum) largestnum = floatabs(origin2[1])
	origin2[0] /= largestnum
	origin2[1] /= largestnum
	vec[0] = ( origin2[0] * fPower2 ) / floatround(entity_range(victim , attacker))
	vec[1] = ( origin2[1] * fPower2 ) / floatround(entity_range(victim , attacker))
	if(vec[0] <= 20.0 || vec[1] <= 20.0)
		vec[2] = random_float(200.0 , 275.0)
	vec[0] += oldvelo[0]
	vec[1] += oldvelo[1]
	SET_velocity(victim, vec)
}
stock user_scr_shake(id, Float:damage)
{
	new Float:pct, shakeFreq, Float:velocity[3]
	pct = get_damage_percentage(damage)
	shakeFreq = floatround( pct * 10 * UNIT_SECOND )
	
	message_begin(MSG_ONE_UNRELIABLE, get_user_msgid("ScreenShake"), _, id)
	write_short(UNIT_SECOND * 8) 	// Amplitude
	write_short(UNIT_SECOND) 	// Duration
	write_short(shakeFreq) 		// Frequency
	message_end()
	
	// decrease player speed by given damage amount
	GET_velocity(id, velocity)
	velocity[0] *= (1.0 - pct)
	velocity[1] *= (1.0 - pct)
	SET_velocity(id, velocity)
}

stock eng_set_user_godmode(index, godmode = 0) {
	SET_takedamage(index, godmode == 1 ? DAMAGE_NO : DAMAGE_AIM);

	return 1;
}
stock eng_get_user_godmode(index) {
	return (GET_takedamage(index) == DAMAGE_NO);
}
stock eng_set_user_health(index, health) {
	health > 0 ? SET_health(index, float(health)) : user_kill(index);

	return 1;
}
stock show_explosion2(ent)
{
	new iOrigin[3]
	get_origin_int(ent, iOrigin)
	show_explosion(iOrigin)
	message_begin(MSG_ALL,SVC_TEMPENTITY,iOrigin)
	write_byte(TE_BEAMCYLINDER)
	write_coord(iOrigin[0])
	write_coord(iOrigin[1])
	write_coord(iOrigin[2])
	write_coord(iOrigin[0])
	write_coord(iOrigin[1])
	write_coord(iOrigin[2]+200)
	write_short(spr_white)
	write_byte(0)
	write_byte(1)
	write_byte(6)
	write_byte(8)
	write_byte(1)
	write_byte(255)
	write_byte(255)
	write_byte(192)
	write_byte(128)
	write_byte(5)
	message_end()
}
// explosion effect
stock show_explosion(origin[3])
{
	message_begin(MSG_BROADCAST, SVC_TEMPENTITY, origin)
	write_byte(TE_EXPLOSION)
	write_coord(origin[0])
	write_coord(origin[1])
	write_coord(origin[2])
	write_short(spr_explosion)
	write_byte(50) // scale in 0.1's
	write_byte(15) // framerate
	write_byte(TE_EXPLFLAG_NOSOUND) // TE_EXPLFLAG_NONE with sound
	message_end()
}
stock show_explosion1(ent)
{
	static iOrigin[3]
	get_origin_int(ent, iOrigin)
	show_explosion(iOrigin)
}
// blasts break enemy's stuff if in range!
public victim_equipment_break(ent, range, victim, Float:damage)
{
	if (!is_valid_ent(ent) || !is_user_connected(victim)) return
	static j, tmp, dist
	
	for (j = 0; j < 2; j++)
	{
		// Claymores
		tmp = player_claymore[victim][j]
		if (is_valid_ent(tmp))
		{
			if (floatround(entity_range(ent, tmp)) < range)
			{
				remove_task(TASK_CLAYMORE_EXPLODE+tmp)
				set_task(0.2, "claymore_explode", TASK_CLAYMORE_EXPLODE+tmp)
			}
		}
		
		// C4s
		tmp = player_c4[victim][j]
		if (is_valid_ent(tmp))
		{
			if (floatround(entity_range(ent, tmp)) < range)
			{
				player_c4[victim][j] = 0
				set_task(0.2, "c4_explode", tmp)
			}
		}
	}
	
	// TIs
	tmp = player_ti[victim]
	if (is_valid_ent(tmp))
	{
		if (floatround(entity_range(ent, tmp)) < range)
		{
			remove_entity(tmp)
			set_task(0.2, "ti_destroy", victim)
		}
	}
	
	// sentry gun!
	tmp = has_sentry[victim]
	if (is_valid_ent(tmp))
	{
		dist = floatround(entity_range(ent, tmp))
		if (dist < range)
			SET_health(tmp, GET_health(tmp) - (damage - (damage / float(range)) * float(dist)))
	}
}
stock set_weapons_timeidle(id, WeaponId ,Float:TimeIdle)
{
	if(!is_user_alive(id))
		return
		
	static entwpn; entwpn = fm_get_user_weapon_entity(id, WeaponId)
	if(!pev_valid(entwpn)) 
		return
		
	set_pdata_float(entwpn, 46, TimeIdle, 4)
	set_pdata_float(entwpn, 47, TimeIdle, 4)
	set_pdata_float(entwpn, 48, TimeIdle + 0.5, 4)
}

stock set_player_nextattack(id, Float:nexttime)
{
	if(!is_user_alive(id))
		return
		
	set_pdata_float(id, m_flNextAttack, nexttime, 5)
}
stock client_printc(index, const text[], any:...)
{
	new szMsg[128]
	vformat(szMsg, sizeof(szMsg) - 1, text, 3)
	
	replace_all(szMsg, sizeof(szMsg) - 1, "!g", "^x04");
	replace_all(szMsg, sizeof(szMsg) - 1, "!n", "^x01");
	replace_all(szMsg, sizeof(szMsg) - 1, "!t", "^x03");
}
stock KnifeAttack_Global(id, bStab, Float:flRange, Float:fAngle, Float:flDamage, Float:flKnockBack)
{
	new iHitResult
	if(fAngle > 0.0) iHitResult = KnifeAttack2(id, bStab, Float:flRange, Float:fAngle, Float:flDamage, Float:flKnockBack)
	else iHitResult = KnifeAttack(id, bStab, Float:flRange, Float:flDamage, Float:flKnockBack)

	return iHitResult
}

stock KnifeAttack(id, bStab, Float:flRange, Float:flDamage, Float:flKnockBack, iHitgroup = -1, bitsDamageType = DMG_NEVERGIB | DMG_CLUB)
{
	new Float:vecSrc[3], Float:vecEnd[3], Float:v_angle[3], Float:vecForward[3];
	GetGunPosition(id, vecSrc);

	pev(id, pev_v_angle, v_angle);
	engfunc(EngFunc_MakeVectors, v_angle);

	global_get(glb_v_forward, vecForward);
	xs_vec_mul_scalar(vecForward, flRange, vecForward);
	xs_vec_add(vecSrc, vecForward, vecEnd);

	new tr = create_tr2();
	engfunc(EngFunc_TraceLine, vecSrc, vecEnd, 0, id, tr);

	new Float:flFraction; get_tr2(tr, TR_flFraction, flFraction);
	if (flFraction >= 1.0) engfunc(EngFunc_TraceHull, vecSrc, vecEnd, 0, 3, id, tr);
	
	get_tr2(tr, TR_flFraction, flFraction);

	new iHitResult = RESULT_HIT_NONE;
	
	if (flFraction < 1.0)
	{
		new pEntity = get_tr2(tr, TR_pHit);
		iHitResult = RESULT_HIT_WORLD;
		
		if (pev_valid(pEntity) && (IsPlayer(pEntity) || IsHostage(pEntity)))
		{
			if (CheckBack(id, pEntity) && bStab && iHitgroup == -1)
				flDamage *= 1.0;

			iHitResult = RESULT_HIT_PLAYER;
		}

		if (pev_valid(pEntity))
		{
			engfunc(EngFunc_MakeVectors, v_angle);
			global_get(glb_v_forward, vecForward);

			if (iHitgroup != -1)
				set_tr2(tr, TR_iHitgroup, iHitgroup);

			ExecuteHamB(Ham_TraceAttack, pEntity, id, flDamage, vecForward, tr, bitsDamageType);
			ExecuteHamB(Ham_TakeDamage, pEntity, id, id, flDamage, bitsDamageType)
			Stock_Fake_KnockBack(id, pEntity, flKnockBack)
			
			if (IsAlive(pEntity))
			{
				free_tr2(tr);
				return iHitResult;
			}
		}
	}
	free_tr2(tr);
	return iHitResult;
}
public Stock_Fake_KnockBack(id, iVic, Float:iKb)
{
	if(iVic > 32) return
	
	new Float:vAttacker[3], Float:vVictim[3], Float:vVelocity[3], flags
	pev(id, pev_origin, vAttacker)
	pev(iVic, pev_origin, vVictim)
	vAttacker[2] = vVictim[2] = 0.0
	flags = pev(id, pev_flags)
	
	xs_vec_sub(vVictim, vAttacker, vVictim)
	new Float:fDistance
	fDistance = xs_vec_len(vVictim)
	xs_vec_mul_scalar(vVictim, 1 / fDistance, vVictim)
	
	pev(iVic, pev_velocity, vVelocity)
	xs_vec_mul_scalar(vVictim, iKb, vVictim)
	xs_vec_mul_scalar(vVictim, 50.0, vVictim)
	vVictim[2] = xs_vec_len(vVictim) * 0.15
	
	if(flags &~ FL_ONGROUND)
	{
		xs_vec_mul_scalar(vVictim, 1.2, vVictim)
		vVictim[2] *= 0.4
	}
	if(xs_vec_len(vVictim) > xs_vec_len(vVelocity)) set_pev(iVic, pev_velocity, vVictim)
}	

stock Float:Stock_Get_Body_Dmg(iBody)
{
	switch (iBody)
	{
		case HIT_GENERIC: return 0.75
		case 1: return 4.0
		case 2: return 1.0
		case 3: return 1.25
		case 4,5,6,7: return 0.75
		default: return 0.75
	}
	return 1.0
}
stock Stock_Get_Origin(id, Float:origin[3])
{
	new Float:maxs[3],Float:mins[3]
	if (pev(id, pev_solid) == SOLID_BSP)
	{
		pev(id,pev_maxs,maxs)
		pev(id,pev_mins,mins)
		origin[0] = (maxs[0] - mins[0]) / 2 + mins[0]
		origin[1] = (maxs[1] - mins[1]) / 2 + mins[1]
		origin[2] = (maxs[2] - mins[2]) / 2 + mins[2]
	} else pev(id, pev_origin, origin)
}

stock KnifeAttack2(id, bStab, Float:flRange, Float:fAngle, Float:flDamage, Float:flKnockBack, iHitgroup = -1, bNoTraceCheck = 0)
{
	new Float:vecOrigin[3], Float:vecSrc[3], Float:vecEnd[3], Float:v_angle[3], Float:vecForward[3];
	pev(id, pev_origin, vecOrigin);

	new iHitResult = RESULT_HIT_NONE;
	GetGunPosition(id, vecSrc);

	pev(id, pev_v_angle, v_angle);
	engfunc(EngFunc_MakeVectors, v_angle);

	global_get(glb_v_forward, vecForward);
	xs_vec_mul_scalar(vecForward, flRange, vecForward);
	xs_vec_add(vecSrc, vecForward, vecEnd);

	new tr = create_tr2();
	engfunc(EngFunc_TraceLine, vecSrc, vecEnd, 0, id, tr);
	
	new Float:EndPos2[3]
	get_tr2(tr, TR_vecEndPos, EndPos2)
	
	new Float:flFraction; get_tr2(tr, TR_flFraction, flFraction);
	if (flFraction < 1.0) 
	{
		iHitResult = RESULT_HIT_WORLD;
	}
	
	new Float:vecEndZ = vecEnd[2];
	
	new pEntity = -1;
	while ((pEntity = engfunc(EngFunc_FindEntityInSphere, pEntity, vecOrigin, flRange)) != 0)
	{
		if (!pev_valid(pEntity))
			continue;
		if (id == pEntity)
			continue;
		if (!IsAlive(pEntity))
			continue;
		if (!CheckAngle(id, pEntity, fAngle))
			continue;

		GetGunPosition(id, vecSrc);
		Stock_Get_Origin(pEntity, vecEnd);

		vecEnd[2] = vecSrc[2] + (vecEndZ - vecSrc[2]) * (get_distance_f(vecSrc, vecEnd) / flRange);

		xs_vec_sub(vecEnd, vecSrc, vecForward);
		xs_vec_normalize(vecForward, vecForward);
		xs_vec_mul_scalar(vecForward, flRange, vecForward);
		xs_vec_add(vecSrc, vecForward, vecEnd);

		engfunc(EngFunc_TraceLine, vecSrc, vecEnd, 0, id, tr);
		get_tr2(tr, TR_flFraction, flFraction);

		if (flFraction >= 1.0) engfunc(EngFunc_TraceHull, vecSrc, vecEnd, 0, 3, id, tr);
		get_tr2(tr, TR_flFraction, flFraction);

		if (flFraction < 1.0)
		{
			if (IsPlayer(pEntity) || IsHostage(pEntity))
			{
				iHitResult = RESULT_HIT_PLAYER;
				
				if (CheckBack(id, pEntity) && bStab && iHitgroup == -1)
					flDamage *= 1.0;
			}
			
			

			if (get_tr2(tr, TR_pHit) == pEntity || bNoTraceCheck)
			{
				engfunc(EngFunc_MakeVectors, v_angle);
				global_get(glb_v_forward, vecForward);

				if (iHitgroup != -1) set_tr2(tr, TR_iHitgroup, iHitgroup);

				ExecuteHamB(Ham_TraceAttack, pEntity, id, flDamage, vecForward, tr, DMG_NEVERGIB | DMG_CLUB);
				ExecuteHamB(Ham_TakeDamage, pEntity, id, id, flDamage, DMG_NEVERGIB | DMG_CLUB)
				
				Stock_Fake_KnockBack(id, pEntity, flKnockBack)
			}
		}
		free_tr2(tr);
	}
	return iHitResult;
}
stock GetGunPosition(id, Float:vecSrc[3])
{
	new Float:vecViewOfs[3];
	pev(id, pev_origin, vecSrc);
	pev(id, pev_view_ofs, vecViewOfs);
	xs_vec_add(vecSrc, vecViewOfs, vecSrc);
}
stock IsPlayer(pEntity) return is_user_connected(pEntity)

stock IsHostage(pEntity)
{
	new classname[32]; pev(pEntity, pev_classname, classname, charsmax(classname))
	return equal(classname, "hostage_entity")
}

stock IsAlive(pEntity)
{
	if (pEntity < 1) return 0
	return (pev(pEntity, pev_deadflag) == DEAD_NO && pev(pEntity, pev_health) > 0)
}

stock CheckBack(iEnemy,id)
{
	new Float:anglea[3], Float:anglev[3]
	pev(iEnemy, pev_v_angle, anglea)
	pev(id, pev_v_angle, anglev)
	new Float:angle = anglea[1] - anglev[1] 
	if (angle < -180.0) angle += 360.0
	if (angle <= 45.0 && angle >= -45.0) return 1
	return 0
}

stock CheckAngle(iAttacker, iVictim, Float:fAngle)  return(Stock_CheckAngle(iAttacker, iVictim) > floatcos(fAngle,degrees))
stock Float:Stock_CheckAngle(id,iTarget)
{
	new Float:vOricross[2],Float:fRad,Float:vId_ori[3],Float:vTar_ori[3],Float:vId_ang[3],Float:fLength,Float:vForward[3]
	Stock_Get_Origin(id, vId_ori)
	Stock_Get_Origin(iTarget, vTar_ori)
	
	pev(id,pev_angles,vId_ang)
	for(new i=0;i<2;i++) vOricross[i] = vTar_ori[i] - vId_ori[i]
	
	fLength = floatsqroot(vOricross[0]*vOricross[0] + vOricross[1]*vOricross[1])
	
	if (fLength<=0.0)
	{
		vOricross[0]=0.0
		vOricross[1]=0.0
	} else {
		vOricross[0]=vOricross[0]*(1.0/fLength)
		vOricross[1]=vOricross[1]*(1.0/fLength)
	}
	
	engfunc(EngFunc_MakeVectors,vId_ang)
	global_get(glb_v_forward,vForward)
	
	fRad = vOricross[0]*vForward[0]+vOricross[1]*vForward[1]
	return fRad   //->   RAD 90' = 0.5rad
}
stock fm_cs_get_weapon_ent_owner(ent)
{
	if (pev_valid(ent) != 2)
		return -1
	
	return get_pdata_cbase(ent, 41, 4)
}
stock create_ent(id, szName[], szModel[], iSolid, iMovetype, Float:fOrigin[3], &ent=-1)
{
	new ent1 = create_entity("info_target");
	entity_set_string(ent1, EV_SZ_classname, szName);
	entity_set_model(ent1, szModel);
	entity_set_int(ent1, EV_INT_solid, iSolid);
	entity_set_int(ent1, EV_INT_movetype, iMovetype);
	entity_set_edict(ent1, EV_ENT_owner, id);
	entity_set_origin(ent1, fOrigin);

	
	if(ent != -1)
		ent = ent1;
}
stock Float:estimate_take_hurt(Float:fPoint[3], ent, ignored) 
{
	new Float:fFraction, Float:fOrigin[3], tr;
	entity_get_vector(ent, EV_VEC_origin, fOrigin);
	engfunc(EngFunc_TraceLine, fPoint, fOrigin, DONT_IGNORE_MONSTERS, ignored, tr);
	get_tr2(tr, TR_flFraction, fFraction);
	if(fFraction == 1.0 || get_tr2(tr, TR_pHit) == ent)
		return 1.0;
	return 0.6;
}
stock UTIL_Kill(attacker, target, Float:damage, damagebits, ile=0)
{
	MainKiller[ile] |= (1<<attacker);
	ExecuteHam(Ham_TakeDamage, target, attacker, attacker, damage, damagebits);
	MainKiller[ile] &= ~(1<<attacker);
}
public weapon_info(id,clip,ammo)
{
	if(!is_user_connected(id)) return
	new w = get_user_weapon(id,clip,ammo)
	new szname[32]
	switch(w)
	{
		case CSW_USP:{format(szname, 31, "%s", weapon_name[0]);}
		case CSW_GLOCK18:{format(szname, 31, "%s", weapon_name[1]);}
		case CSW_DEAGLE:{format(szname, 31, "%s", weapon_name[2]);}
		case CSW_P228:{format(szname, 31, "%s", weapon_name[3]);}
		case CSW_ELITE:{format(szname, 31, "%s", weapon_name[4]);}
		case CSW_FIVESEVEN:{format(szname, 31, "%s", weapon_name[5]);}
		case CSW_M3:{format(szname, 31, "%s", weapon_name[6]);}
		case CSW_XM1014:{format(szname, 31, "%s", weapon_name[7]);}
		case CSW_MP5NAVY:{format(szname, 31, "%s", weapon_name[8]);}
		case CSW_TMP:{format(szname, 31, "%s", weapon_name[9]);}
		case CSW_P90:{format(szname, 31, "%s", weapon_name[10]);}
		case CSW_MAC10:{format(szname, 31, "%s", weapon_name[11]);}
		case CSW_UMP45:{format(szname, 31, "%s", weapon_name[12]);}
		case CSW_FAMAS:{format(szname, 31, "%s", weapon_name[13]);}
		case CSW_SG552:{format(szname, 31, "%s", weapon_name[14]);}
		case CSW_AK47:{format(szname, 31, "%s", weapon_name[15]);}
		case CSW_GALIL:{format(szname, 31, "%s", weapon_name[16]);}
		case CSW_M4A1:{format(szname, 31, "%s", weapon_name[17]);}
		case CSW_AUG:{format(szname, 31, "%s", weapon_name[18]);}
		case CSW_SCOUT:{format(szname, 31, "%s", weapon_name[19]);}
		case CSW_AWP:{format(szname, 31, "%s", weapon_name[20]);}
		case CSW_G3SG1:{format(szname, 31, "%s", weapon_name[21]);}
		case CSW_SG550:{format(szname, 31, "%s",weapon_name[22]);}
		case CSW_M249:{format(szname, 31, "%s", weapon_name[23]);}
		case CSW_KNIFE:{format(szname, 31, "%s", weapon_name[24]);}
		case CSW_HEGRENADE:{format(szname, 31, "%s", weapon_name[25]);}
		case CSW_SMOKEGRENADE:{format(szname, 31, "%s", weapon_name[26]);}
		case CSW_FLASHBANG:{format(szname, 31, "%s", weapon_name[27]);}
		case CSW_C4:{format(szname, 31, "%s", weapon_name[28]);}
	}
	//get_weaponname(w, szname, charsmax(szname))
	md_drawtext(id, 5, szname, 0.73, 0.83, 0, 0, 255,255,255,255, 0.0, 0.3, 1.0, ALIGN_NORMAL)
}	
public SendAudioMsg()
{
	client_cmd(0, "stopsound")
	return PLUGIN_HANDLED
}

//======================= force win using nuke ===================================
//new t_win,ct_win
public twin()
{
	new i;
	for(i = 1 ; i <= get_playersnum(0);i++)
	{
		client_cmd( i, "spk %s", OPFORWIN );
	}
	//t_win = 1
	//ct_win = 0
}

public ctwin()
{
	new i;
	for(i = 1 ; i <= get_playersnum(0);i++)
	{
		client_cmd( i, "spk %s", RANGERWIN );
	}
	//ct_win = 1
	//t_win = 0
}

public EVENT_CTWIN(id)
{
	md_drawimage(id, 8, 0, "gfx/roundend/opforlogo.tga", 0.35, 0.35, 0, 0, 255,255,255,255, 0.0, 0.5, 3.0, ALIGN_NORMAL)
	md_drawimage(id, 9, 0, "gfx/roundend/rangerlogo.tga", 0.53, 0.35, 0, 0, 255,255,255,255, 0.0, 0.5, 3.0, ALIGN_NORMAL)
	md_drawimage(id, 10, 0, "gfx/roundend/defeat.tga", 0.35, 0.2, 0, 0, 255,255,255,255, 0.0, 0.5, 3.0, ALIGN_NORMAL)
	md_drawimage(id, 11, 0, "gfx/roundend/victory.tga", 0.54, 0.2, 0, 0, 255,255,255,255, 0.0, 0.5, 3.0, ALIGN_NORMAL)

}
public EVENT_TWIN(id)
{
	md_drawimage(id, 8, 0, "gfx/roundend/opforlogo.tga", 0.35, 0.35, 0, 0, 255,255,255,255, 0.0, 0.5, 3.0, ALIGN_NORMAL)
	md_drawimage(id, 9, 0, "gfx/roundend/rangerlogo.tga", 0.53, 0.35, 0, 0, 255,255,255,255, 0.0, 0.5, 3.0, ALIGN_NORMAL)
	md_drawimage(id, 10, 0, "gfx/roundend/victory.tga", 0.35, 0.2, 0, 0, 255,255,255,255, 0.0, 0.5, 3.0, ALIGN_NORMAL)
	md_drawimage(id, 11, 0, "gfx/roundend/defeat.tga", 0.54, 0.2, 0, 0, 255,255,255,255, 0.0, 0.5, 3.0, ALIGN_NORMAL)
}
/* AMXX-Studio Notes - DO NOT MODIFY BELOW HERE
*{\\ rtf1\\ ansi\\ deff0{\\ fonttbl{\\ f0\\ fnil Tahoma;}}\n\\ viewkind4\\ uc1\\ pard\\ lang1033\\ f0\\ fs16 \n\\ par }
*/
