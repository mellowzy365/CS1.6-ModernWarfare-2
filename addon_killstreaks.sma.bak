#include <amxmodx>
#include <cstrike>
#include <csx>
#include <engine>
#include <fakemeta>
#include <fun>
#include <hamsandwich>
#include <xs>
#include <acg>

#define PLUGIN "KillStreak"
#define VERSION "1.4.0"
#define AUTHOR "Cypis Edited by Paolo and Infractem"

#define MAX_DIST 8192.0
#define MAX 32

#define MAX_CLIENTS  32
#define MAX_WEAPONS  30

#define OFFSET_PRIMARYWEAPON 116
#define FFADE_IN	0x0000	

#define PA_LOW  25.0
#define PA_HIGH 50.0

new const maxAmmo[31]={
		0,
		90,	//CSW_P228
		0,
		40,	//CSW_SCOUT
		1,	//CSW_HEGRENADE
		60,	//CSW_XM1014
		1,	//CSW_C4
		192, //CSW_MAC10
		252,	//CSW_AUG
		1,	//CSW_SMOKEGRENADE
		72, //CSW_ELITE
		90, //CSW_FIVESEVEN
		180, //CSW_UMP45
		48,	//CSW_SG550
		180,	//CSW_GALIL
		180,	//CSW_FAMAS
		72, //CSW_USP
		120, //CSW_GLOCK18
		60,	//CSW_AWP
		180, //CSW_MP5NAVY
		200, //CSW_M249
		64,	//CSW_M3
		180,	//CSW_M4A1
		150, //CSW_TMP
		90,	//CSW_G3SG1
		2,	//CSW_FLASHBANG
		42,	//CSW_DEAGLE
		180,	//CSW_SG552
		180,	//CSW_AK47
		0,	//CSW_KNIFE
		300 //CSW_P90
};
new strike_blast, sprite_blast, cache_trail, smoke_blast, predator_blast;

new max_kills[MAX+1], bool:radar[2], nalot[MAX+1], predator[MAX+1], nuke[MAX+1], emp[MAX+1], cuav[MAX+1], uav[MAX+1], pack[MAX+1], sentrys[MAX+1], stealth[MAX+1];
new limit_ks[MAX+1], bool:choose_uav[MAX+1], bool:choose_cp[MAX+1], bool:disable_cp[MAX+1], bool:choose_cuav[MAX+1], bool:disable_cuav[MAX+1], bool:choose_nalot[MAX+1], bool:choose_stealth[MAX+1], bool:choose_predator[MAX+1], bool:disable_predator[MAX+1], bool:choose_emp[MAX+1], bool:choose_sentrys[MAX+1], bool:disable_sentrys[MAX+1], bool:choose_nuke[MAX+1], bool:ksmenu[2]

new user_controll[MAX+1], emp_active, bool:nuke_player[MAX+1];
new OpforOrigin[3], OpforOrigin2[3], OpforOrigin3[3], MainKiller[5];
new RangerOrigin[3], RangerOrigin2[3], RangerOrigin3[3];

new aerial_active, cd_active, nuke_active;

new g_maxplayers

new g_WeaponIndex[ MAX_CLIENTS + 1 ];
new g_WeaponId   [ MAX_CLIENTS + 1 ];

new bool:g_IsAlive   [ MAX_CLIENTS + 1 ];

const m_iId					= 43;
const m_flNextPrimaryAttack	= 46;
const m_flNextSecondaryAttack	= 47;
const m_iFOV				= 363;
const m_pActiveItem			= 373;

public plugin_init() 
{
	register_plugin(PLUGIN, VERSION, AUTHOR)
	
	register_think("sentry","SentryThink");
	
	register_touch("predator", "*", "touchedpredator");
	register_touch("bomb", "*", "touchedbomb");
	register_touch("bomb2", "*", "touchedbomb2");

	register_forward(FM_Touch, "fw_touch")
	
	RegisterHam(Ham_TakeDamage, "func_breakable", "TakeDamage");
	RegisterHam( Ham_Spawn , "player", "Event_PlayerSpawn2" , 1 );
	RegisterHam( Ham_Killed, "player", "Event_PlayerKilled2", 1 );

	//register_event("CurWeapon","CurWeapon","be", "1=1");
	register_event("DeathMsg", "event_deathmsg", "a");
	register_event("HLTV", "NewRound", "a", "1=0", "2=0");
	register_event("SendAudio", "eEndRound", "a", "2&%!MRAD_terwin", "2&%!MRAD_ctwin", "2&%!MRAD_rounddraw")
	g_maxplayers = get_maxplayers();
	
	register_message(get_user_msgid("DeathMsg"), "message_DeathMsg")
	
	register_cvar("ks_hpsentry", "750");
	register_cvar("ks_sentry_remove", "1");
	register_cvar( "ks_reset_teamkill", "1" )
	
	new command1[] = "Killstreak_Menu"
	register_clcmd("say /ks", command1);
	register_clcmd("say /killstreak", command1);
	register_clcmd("killstreak", command1);
	
	new command2[] = "Choose_Killstreak"
	register_clcmd("say /ksmenu", command2);
	register_clcmd("ksmenu", command2);
	
	register_clcmd("killstreak_secret_unlock", "Killstreak_Give");
	set_task(2.0,"radar_scan",_,_,_,"b");
	
	RegisterHam(Ham_Killed, "player", "fwd_streakreset", 0);
}

public plugin_precache()
{
	strike_blast = precache_model("sprites/fexplo.spr");
	sprite_blast = precache_model("sprites/dexplo.spr");
	smoke_blast = precache_model("sprites/smokepredatorexplo.spr");
	predator_blast = precache_model("sprites/predatorexplosion.spr");
	cache_trail = precache_model("sprites/smoke.spr");
	
	precache_model("sprites/iEnemy.spr");
	precache_model("sprites/fuzz_radar.spr");
	precache_model("sprites/helicon.spr");
	precache_model("sprites/jeticon.spr");
	precache_model("sprites/helicon2.spr");
	precache_model("sprites/jeticon2.spr");
	precache_model("sprites/packicon.spr");
	precache_model("sprites/packicon2.spr");
	precache_model("sprites/sentricon.spr");
	precache_model("sprites/sentricon2.spr");
	precache_model("sprites/stealthicon.spr");
	precache_model("sprites/predicon.spr");
	precache_model("sprites/predicon2.spr");
	
	precache_model("models/p_hegrenade.mdl");
	precache_model("models/cod_carepackageranger.mdl");
	precache_model("models/cod_carepackageopfor.mdl");
	//precache_model("models/cod_plane.mdl");
	precache_model("models/cod_predator.mdl");
	precache_model("models/cod_sentrygun.mdl");
	
	precache_sound("mw/jet_fly1.wav");
	precache_sound("mw/jet_fly2.wav");
	precache_sound("mw/heli_fly.wav");
	
	precache_sound("mw/firemw.wav");
	
	precache_sound("mw/sentrygun_starts.wav");
	precache_sound("mw/sentrygun_stops.wav");
	
	
	precache_model("models/computergibs.mdl");
	

	precache_generic("gfx/killstreaks/kill_3_uav.tga")
	precache_generic("gfx/killstreaks/kill_4_cp.tga")
	precache_generic("gfx/killstreaks/kill_4_cuav.tga")
	precache_generic("gfx/killstreaks/kill_5_predator.tga")
	precache_generic("gfx/killstreaks/kill_5_sentry.tga")
	precache_generic("gfx/killstreaks/kill_6_airstrike.tga")
	precache_generic("gfx/killstreaks/kill_9_stealth.tga")
	precache_generic("gfx/killstreaks/kill_15_emp.tga")
	precache_generic("gfx/killstreaks/kill_25_nuke.tga")	
	precache_generic("gfx/killstreaks/carepack_uav.tga")
	precache_generic("gfx/killstreaks/carepack_cuav.tga")
	precache_generic("gfx/killstreaks/carepack_predator.tga")
	precache_generic("gfx/killstreaks/carepack_airstrike.tga")
	precache_generic("gfx/killstreaks/carepack_stealth.tga")
	precache_generic("gfx/killstreaks/carepack_sentry.tga")
	precache_generic("gfx/killstreaks/sentry/sentry_ready.tga")
	precache_generic("gfx/killstreaks/sentry/sentry_deploying.tga")
	precache_generic("gfx/killstreaks/sentry/sentry_deployed.tga")
	precache_generic("gfx/killstreaks/carepack_emp.tga")
	precache_generic("gfx/nuke/nukeon.tga")
	precache_generic("gfx/nuke/nukeflash.tga")
	precache_generic("gfx/nuke/nukeeffect.tga")
	precache_generic("gfx/nuke/nukeeffect2.tga")
	
	precache_generic("gfx/killstreaks/predator/fuzzscreen.tga")
	precache_generic("gfx/killstreaks/predator/predatorhud.tga")
	precache_generic("gfx/killstreaks/predator/laptop.tga")
	precache_generic("gfx/killstreaks/predator/targetlock.tga")
	precache_generic("gfx/killstreaks/predator/scanningtargets.tga")
	precache_generic("gfx/killstreaks/predator/agmscreen.tga")
	precache_generic("gfx/killstreaks/predator/agmscreen2.tga")
	precache_generic("gfx/killstreaks/predator/agmscreen3.tga")
	precache_generic("gfx/killstreaks/predator/agmscreen4.tga")
	
	precache_generic("gfx/bloodscreen/explosionblur.tga")
	
	precache_generic("gfx/killstreaks/targetverified.tga")
	precache_generic("gfx/killstreaks/airspace.tga")
}

public Killstreak_Menu(id)
{
	new menu = menu_create("KillStreak:", "Killstreak_Handler");
	new cb = menu_makecallback("Killstreak_Callback");
	menu_additem(menu, "UAV", _, _, cb);
	menu_additem(menu, "Care Package", _, _, cb);
	menu_additem(menu, "Counter-UAV", _, _, cb);
	menu_additem(menu, "Precision Airstrike", _, _, cb);
	menu_additem(menu, "Predator Missile", _, _, cb);
	menu_additem(menu, "Stealth Bomber", _, _, cb);
	menu_additem(menu, "Sentry Gun", _, _, cb);
	menu_additem(menu, "EMP", _, _, cb);
	menu_additem(menu, "Tactical Nuke", _, _, cb);
	menu_additem(menu, "Kill Streak Loadout Menu", _, _, cb);
	menu_setprop(menu, MPROP_EXITNAME, "Exit^n^n\yKill Streak Menu");
	menu_display(id, menu)
}

public Choose_Killstreak(id)
{
	new menu = menu_create("Select 3 Kill Streaks:", "Choose_Handler");
	new cb2 = menu_makecallback("Choose_Callback");
	menu_additem(menu, "UAV - \y3 Kills Required", _, _, cb2);
	menu_additem(menu, "Care Package - \y4  Kills Required", _, _, cb2);
	menu_additem(menu, "Counter-UAV - \y4 Kills Required", _, _, cb2);
	menu_additem(menu, "Predator Missile - \y5  Kills Required", _, _, cb2);
	menu_additem(menu, "Sentry Gun - \y5  Kills Required", _, _, cb2);
	menu_additem(menu, "Precision Airstrike - \y6  Kills Required", _, _, cb2);
	menu_additem(menu, "Stealth Bomber - \y9  Kills Required", _, _, cb2);
	menu_additem(menu, "EMP - \y15  Kills Required", _, _, cb2);
	menu_additem(menu, "Tactical Nuke - \y25  Kills Required", _, _, cb2);
	menu_additem(menu, "Reset - \yReset loadout upon next respawn", _, _, cb2);
	menu_setprop(menu, MPROP_EXITNAME, "Exit^n^n\yOpen this menu by typing /ksmenu in chat or pressing F4");
	menu_display(id, menu)
}
//killstreak secret unlock test
public Killstreak_Give(id)
{
	uav[id]++;
	cuav[id]++;
	pack[id]++;
	predator[id]++;
	nalot[id]++;
	sentrys[id]++;
	stealth[id]++;
	emp[id]++;
	nuke[id]++;
}

public Killstreak_Callback(id, menu, item)
{
	if(uav[id] <= 0 && item == 0 || pack[id] <= 0 && item == 1 || cuav[id] <= 0 && item == 2 || nalot[id] <= 0 && item == 3 || predator[id] <= 0 && item == 4 || sentrys[id] <= 0 && item == 6 || stealth[id] <= 0 && item == 5 || emp[id] <= 0 && item == 7 || nuke[id] <= 0 && item == 8)
		return ITEM_DISABLED;
	
	return ITEM_ENABLED;
}

public Choose_Callback(id, menu, item)
{
	if(choose_uav[id] && item == 0 || choose_cuav[id] && item == 1 || disable_cuav[id] && item == 1	|| choose_cp[id] && item == 2 || disable_cp[id] && item == 2 || choose_predator[id] && item == 3 || disable_predator[id] && item == 3 || choose_sentrys[id] && item == 4 || disable_sentrys[id] && item == 4 || choose_nalot[id] && item == 5 || choose_stealth[id] && item == 6 || choose_emp[id] && item == 7 || choose_nuke[id] && item == 8)
		return ITEM_DISABLED;

	
	return ITEM_ENABLED;
}

public Choose_Handler(id, menu, item)
{
	//if(!is_user_alive(id))
	//	return PLUGIN_HANDLED;
	
	if(item == MENU_EXIT)
	{
		menu_destroy(menu);
		return PLUGIN_HANDLED;
	}
	
	
	
	switch(item)
	{
		case 0:
		{
			limit_ks[id]++
			if(limit_ks[id] < 4)
			{
				choose_uav[id] = true;
				client_cmd(id, "spk sound/mw/select.wav");
				if(limit_ks[id] == 1)
				{
					client_print(id, print_chat, "[KILLSTREAK] (1/3) UAV selected.");
				}
				if(limit_ks[id] == 2)
				{
					client_print(id, print_chat, "[KILLSTREAK] (2/3) UAV selected.");
				}
				if(limit_ks[id] == 3)
				{
					client_print(id, print_chat, "[KILLSTREAK] (3/3) UAV selected. Your kill streak loadout is now set.");
					ksmenu[id] = false;
				}
				if(limit_ks[id] < 3)
				{
					client_cmd(id, "ksmenu");
				}
			}
			if(limit_ks[id] == 4)
			{
				client_print(id, print_chat, "[KILLSTREAK] You have already reached the three kill streak loadout limit.");
			}
		}
		case 1:{
			limit_ks[id]++
			if(limit_ks[id] < 4)
			{
				choose_cp[id] = true;
				disable_cuav[id] = true;
				client_cmd(id, "spk sound/mw/select.wav");
				if(limit_ks[id] == 1)
				{
					client_print(id, print_chat, "[KILLSTREAK] (1/3) Care Package selected.");
				}
				if(limit_ks[id] == 2)
				{
					client_print(id, print_chat, "[KILLSTREAK] (2/3) Care Package selected.");
				}
				if(limit_ks[id] == 3)
				{
					client_print(id, print_chat, "[KILLSTREAK] (3/3) Care Package selected. Your kill streak loadout is now set.");
					ksmenu[id] = false;
				}
				if(limit_ks[id] < 3)
				{
					client_cmd(id, "ksmenu");
				}

				
			}
			if(limit_ks[id] == 4)
			{
				client_print(id, print_chat, "[KILLSTREAK] You have already reached the three kill streak loadout limit.");
			}
		} 
		case 2:{
			limit_ks[id]++
			if(limit_ks[id] < 4)
			{
				choose_cuav[id] = true;
				disable_cp[id] = true;
				client_cmd(id, "spk sound/mw/select.wav");
				if(limit_ks[id] == 1)
				{
					client_print(id, print_chat, "[KILLSTREAK] (1/3) Counter-UAV selected.");
				}
				if(limit_ks[id] == 2)
				{
					client_print(id, print_chat, "[KILLSTREAK] (2/3) Counter-UAV selected.");
				}
				if(limit_ks[id] == 3)
				{
					client_print(id, print_chat, "[KILLSTREAK] (3/3) Counter-UAV selected. Your kill streak loadout is now set.");
					ksmenu[id] = false;
				}
				if(limit_ks[id] < 3)
				{
					client_cmd(id, "ksmenu");
				}
			}
			if(limit_ks[id] == 4)
			{
				client_print(id, print_chat, "[KILLSTREAK] You have already reached the three kill streak loadout limit.");
			}
		} 
		case 3:{
			limit_ks[id]++
			if(limit_ks[id] < 4)
			{
				choose_predator[id] = true;
				disable_sentrys[id] = true;
				client_cmd(id, "spk sound/mw/select.wav");
				if(limit_ks[id] == 1)
				{
					client_print(id, print_chat, "[KILLSTREAK] (1/3) Predator Missile selected.");
				}
				if(limit_ks[id] == 2)
				{
					client_print(id, print_chat, "[KILLSTREAK] (2/3) Predator Missile selected.");
				}
				if(limit_ks[id] == 3)
				{
					client_print(id, print_chat, "[KILLSTREAK] (3/3) Predator Missile selected. Your kill streak loadout is now set.");
					ksmenu[id] = false;
				}
				if(limit_ks[id] < 3)
				{
					client_cmd(id, "ksmenu");
				}
			}
			if(limit_ks[id] == 4)
			{
				client_print(id, print_chat, "[KILLSTREAK] You have already reached the three kill streak loadout limit.");
			}
		} 
		case 4:{
			limit_ks[id]++
			if(limit_ks[id] < 4)
			{
				choose_sentrys[id] = true;
				disable_predator[id] = true;
				client_cmd(id, "spk sound/mw/select.wav");
				if(limit_ks[id] == 1)
				{
					client_print(id, print_chat, "[KILLSTREAK] (1/3) Sentry Gun selected.");
				}
				if(limit_ks[id] == 2)
				{
					client_print(id, print_chat, "[KILLSTREAK] (2/3) Sentry Gun selected.");
				}
				if(limit_ks[id] == 3)
				{
					client_print(id, print_chat, "[KILLSTREAK] (3/3) Sentry Gun selected. Your kill streak loadout is now set.");
					ksmenu[id] = false;
				}
				if(limit_ks[id] < 3)
				{
					client_cmd(id, "ksmenu");
				}
			}
			if(limit_ks[id] == 4)
			{
				client_print(id, print_chat, "[KILLSTREAK] You have already reached the three kill streak loadout limit.");
			}
		} 
		case 5:{
			limit_ks[id]++
			if(limit_ks[id] < 4)
			{
				choose_nalot[id] = true;
				client_cmd(id, "spk sound/mw/select.wav");
				if(limit_ks[id] == 1)
				{
					client_print(id, print_chat, "[KILLSTREAK] (1/3) Precision Airstrike selected.");
				}
				if(limit_ks[id] == 2)
				{
					client_print(id, print_chat, "[KILLSTREAK] (2/3) Precision Airstrike selected.");
				}
				if(limit_ks[id] == 3)
				{
					client_print(id, print_chat, "[KILLSTREAK] (3/3) Precision Airstrike selected. Your kill streak loadout is now set.");
					ksmenu[id] = false;
				}
				if(limit_ks[id] < 3)
				{
					client_cmd(id, "ksmenu");
				}
			}
			if(limit_ks[id] == 4)
			{
				client_print(id, print_chat, "[KILLSTREAK] You have already reached the three kill streak loadout limit.");
			}
		} 
		case 6:{
			limit_ks[id]++
			if(limit_ks[id] < 4)
			{
				choose_stealth[id] = true;
				client_cmd(id, "spk sound/mw/select.wav");
				if(limit_ks[id] == 1)
				{
					client_print(id, print_chat, "[KILLSTREAK] (1/3) Stealth Bomber selected.");
				}
				if(limit_ks[id] == 2)
				{
					client_print(id, print_chat, "[KILLSTREAK] (2/3) Stealth Bomber selected.");
				}
				if(limit_ks[id] == 3)
				{
					client_print(id, print_chat, "[KILLSTREAK] (3/3) Stealth Bomber selected. Your kill streak loadout is now set.");
					ksmenu[id] = false;
				}
				if(limit_ks[id] < 3)
				{
					client_cmd(id, "ksmenu");
				}
			}
			if(limit_ks[id] == 4)
			{
				client_print(id, print_chat, "[KILLSTREAK] You have already reached the three kill streak loadout limit.");
			}
		} 
		case 7:{
			limit_ks[id]++
			if(limit_ks[id] < 4)
			{
				choose_emp[id] = true;
				client_cmd(id, "spk sound/mw/select.wav");
				if(limit_ks[id] == 1)
				{
					client_print(id, print_chat, "[KILLSTREAK] (1/3) EMP selected.");
				}
				if(limit_ks[id] == 2)
				{
					client_print(id, print_chat, "[KILLSTREAK] (2/3) EMP selected.");
				}
				if(limit_ks[id] == 3)
				{
					client_print(id, print_chat, "[KILLSTREAK] (3/3) EMP selected. Your kill streak loadout is now set.");
					ksmenu[id] = false;
				}
				if(limit_ks[id] < 3)
				{
					client_cmd(id, "ksmenu");
				}
			}
			if(limit_ks[id] == 4)
			{
				client_print(id, print_chat, "[KILLSTREAK] You have already reached the three kill streak loadout limit.");
			}
		} 
		case 8:{
			limit_ks[id]++
			if(limit_ks[id] < 4)
			{
				choose_nuke[id] = true;
				client_cmd(id, "spk sound/mw/select.wav");
				if(limit_ks[id] == 1)
				{
					client_print(id, print_chat, "[KILLSTREAK] (1/3) Tactical Nuke selected.");
				}
				if(limit_ks[id] == 2)
				{
					client_print(id, print_chat, "[KILLSTREAK] (2/3) Tactical Nuke selected.");
				}
				if(limit_ks[id] == 3)
				{
					client_print(id, print_chat, "[KILLSTREAK] (3/3) Tactical Nuke selected. Your kill streak loadout is now set.");
					ksmenu[id] = false;
				}
				if(limit_ks[id] < 3)
				{
					client_cmd(id, "ksmenu");
				}
			}
			if(limit_ks[id] == 4)
			{
				client_print(id, print_chat, "[KILLSTREAK] You have already reached the three kill streak loadout limit.");
			}
		} 
		case 9:{
		resetstreaks(id)
		client_cmd(id, "spk sound/mw/select.wav");
		}
	}
	return PLUGIN_HANDLED;
}

//triggered on choosing reset in menu, check hamspawn
public resetstreaks(id)
{
	client_print(id, print_chat, "[KILLSTREAK] Your settings and current rewards will be reset on your next respawn.");
	ksmenu[id] = true;
}

//triggered on roundspawn if reset argument is true(ksmenu) upon choosing reset in menu
public corereset(id)
{
		limit_ks[id] = 0;
		choose_cp[id] = false;
		disable_cp[id] = false;
		choose_predator[id] = false;
		disable_predator[id] = false;
		choose_uav[id] = false;
		choose_cuav[id] = false;
		disable_cuav[id] = false;
		choose_emp[id] = false;
		choose_nalot[id] = false;
		choose_stealth[id] = false;
		choose_sentrys[id] = false;
		disable_sentrys[id] = false;
		choose_nuke[id] = false;
		//to do only once
		ksmenu[id] = false;
		client_print(id, print_chat, "[KILLSTREAK] Your kill streak loadout is not set. Press F4 or type /ksmenu in chat to open kill streak menu.");
}

//triggered on roundspawn
public timeredksmenu(id)
{
	if(limit_ks[id] != 3)
	client_cmd(id, "ksmenu");
	client_print(id, print_chat, "[KILLSTREAK] Press F4 or type 'ksmenu' in console to re-open kill streak loadout menu.");
}

public Killstreak_Handler(id, menu, item)
{
	if(!is_user_alive(id))
		return PLUGIN_HANDLED;
	
	if(item == MENU_EXIT)
	{
		menu_destroy(menu);
		return PLUGIN_HANDLED;
	}
	
	client_cmd(id, "spk sound/mw/select.wav");
	
	switch(item)
	{
		case 0:{
			if(!emp_active || (emp_active && get_user_team(id) == get_user_team(emp_active)))
			{
				if(!nuke_active )
				{
					if(!cd_active)
					{
						set_task(0.5, "CreateUVA", id);
						uav[id]--;
					}
				}
			}
		}
		case 1:{
			if(!emp_active || (emp_active && get_user_team(id) == get_user_team(emp_active)))
			{
				if(!nuke_active )
				{
					if(!aerial_active)
					{
						CreatePack(id)
						set_task(0.1, "startkillstreak", id)
						set_task(1.0, "stopkillstreak", id)
					}
					else
					{
						airspace(id)
						set_task(0.1, "startkillstreak", id)
						set_task(1.0, "stopkillstreak", id)
					}
				}
			}
		} 
		case 2:{
			if(!emp_active || (emp_active && get_user_team(id) == get_user_team(emp_active)))
			{
				set_task(0.1, "startkillstreak", id)
				set_task(1.0, "stopkillstreak", id);
				
				if(!nuke_active )
				{
					if(!cd_active)
					{
						set_task(0.5, "CreateCUVA", id)
						cuav[id]--;
					}
				}
			}
		} 
		case 3:{
			if(!emp_active || (emp_active && get_user_team(id) == get_user_team(emp_active)))
			{
				if(!nuke_active )
				{
					if(!aerial_active)
					{
						CreateNalot(id)
						set_task(0.1, "startkillstreak", id)
						set_task(1.0, "stopkillstreak", id)
					}
					else
					{
						airspace(id)
						set_task(0.1, "startkillstreak", id)
						set_task(1.0, "stopkillstreak", id)
					}
				}
			}
		} 
		case 4:{
			if(!emp_active || (emp_active && get_user_team(id) == get_user_team(emp_active)))
			{
				if(!nuke_active )
				{
					if(!aerial_active)
					{
						CreatePredator2(id)
						set_task(0.1, "startkillstreak", id)
						set_task(6.0, "stopkillstreak", id)
					}
					else
					{
						airspace(id)
						set_task(0.1, "startkillstreak", id)
						set_task(1.0, "stopkillstreak", id)
						acg_drawtga(id, "gfx/killstreaks/predator/laptop.tga", 255, 255, 255, 255, 0.5, 0.5, 0, FX_FADE, 0.2, 0.0, 0.0, 0.5, 1, ALIGN_BOTTOM, 898)
						
					}
				}
			}
		} 
		case 5:{
			if(!emp_active || (emp_active && get_user_team(id) == get_user_team(emp_active)))
			{
				if(!nuke_active )
				{
					if(!aerial_active)
					{
						CreateStealth(id)
						set_task(0.1, "startkillstreak", id)
						set_task(1.0, "stopkillstreak", id)
					}
					else
					{
						airspace(id)
						set_task(0.1, "startkillstreak", id)
						set_task(1.0, "stopkillstreak", id)
					}
				}
			}
		} 
		case 6:{
			if(!emp_active || (emp_active && get_user_team(id) == get_user_team(emp_active)))
			{
				if(!nuke_active )
				{	
					if(!aerial_active)
					{
						CreateSentryPack(id)
						set_task(0.1, "startkillstreak", id)
						set_task(1.0, "stopkillstreak", id)
					}
					else
					{
						airspace(id)
						set_task(0.1, "startkillstreak", id)
						set_task(1.0, "stopkillstreak", id)
					}
				}
			}
		} 
		case 7:{
			if(!emp_active)
			{
				if(!nuke_active )
				{
					if(!cd_active)
					{
						set_task(0.5, "CreateEmp", id)
						set_task(0.1, "startkillstreak", id)
						set_task(1.0, "stopkillstreak", id)
						emp[id]--;
					}
					else
					{
						set_task(0.1, "startkillstreak", id)
						set_task(1.0, "stopkillstreak", id)
					}
				}
			}
		} 
		case 8: {
			if(!emp_active || (emp_active && get_user_team(id) == get_user_team(emp_active)))
			{
				if(!nuke_active )
				{
					if(!cd_active)
					{
						set_task(0.5, "CreateNuke", id)
						set_task(0.1, "startkillstreak", id)
						set_task(1.0, "stopkillstreak", id)
						nuke[id]--;
					}
					else
					{
						set_task(0.1, "startkillstreak", id)
						set_task(1.0, "stopkillstreak", id)
					}
				}
			}
		}
		case 9: {
			client_cmd(id, "ksmenu");
		}
	}
	return PLUGIN_HANDLED;
}

public NewRound()
{
	for ( new i = 1; i <= g_maxplayers; i++ )
	{
		max_kills[i] = 0;
		limit_ks[i] = 0;
		user_controll[i] = 0;
		nalot[i] = 0;
		stealth[i] = 0;
		predator[i] = 0;
		nuke[i] = 0;
		cuav[i] = 0;
		uav[i] = 0;
		emp[i] = 0;
		pack[i] = 0;
		sentrys[i] = 0;	
		
		choose_cp[i] = false;
		disable_cp[i] = false;
		choose_predator[i] = false;
		disable_predator[i] = false;
		choose_uav[i] = false;
		choose_cuav[i] = false;
		disable_cuav[i] = false;
		choose_emp[i] = false;
		choose_nalot[i] = false;
		choose_stealth[i] = false;
		choose_sentrys[i] = false;
		disable_sentrys[i] = false;
		choose_nuke[i] = false;
	}
	new num, players[32], PlayerCoords[3];
	get_players(players, num, "gh")
	for(new a = 0; a < num; a++)
	{
		new i = players[a];
		if(task_exists(i+997))
			{
				remove_task(i+997);
			}
		if(cs_get_user_team(i) == CS_TEAM_CT )
			{
				set_task(1.0, "spawnranger", i);
				ResetUVA(i);
				get_user_origin(players[a], PlayerCoords)
				acg_drawspronradar (i, "fuzz_radar", 255, 255, 255, PlayerCoords, players[a], FX_FADE, 0.1, 0.1, 0.0, 0.3, DRAW_NORMAL, 370, 0)
				set_task(11.0, "timeredksmenu", i)
			}
		if(cs_get_user_team(i) == CS_TEAM_T )
			{
				set_task(1.0, "spawnopfor", i);
				ResetUVA(i);
				get_user_origin(players[a], PlayerCoords)
				acg_drawspronradar (i, "fuzz_radar", 255, 255, 255, PlayerCoords, players[a], FX_FADE, 0.1, 0.1, 0.0, 0.3, DRAW_NORMAL, 370, 0)
				set_task(11.0, "timeredksmenu", i)
			}
	}
	
	remove_entity_name("predator")
	remove_entity_name("bomb")
	remove_entity_name("pack")
	remove_entity_name("sentpack")
	
	nukegone()
	
	if(get_cvar_num("ks_sentry_remove"))
		remove_entity_name("sentry")
}

public spawnranger(i)
{
	client_cmd(i, "spk sound/mw/newroundranger.wav");
	return PLUGIN_CONTINUE;
}

public spawnopfor(i)
{
	client_cmd(i, "spk sound/mw/newroundopfor.wav");
	return PLUGIN_CONTINUE;
}

public client_putinserver(id){
	max_kills[id] = 0;
	limit_ks[id] = 0;
	user_controll[id] = 0;
	nalot[id] = 0;
	stealth[id] = 0;
	predator[id] = 0;
	nuke[id] = 0;
	cuav[id] = 0;
	uav[id] = 0;
	emp[id] = 0;
	pack[id] = 0;
	sentrys[id] = 0;

	set_task (0.1, "task_drawnormalradar", id)
	return PLUGIN_CONTINUE
}


public client_disconnect ( PlayerId )
{
	g_IsAlive   [ PlayerId ] = false;
	new ent = -1
	while((ent = find_ent_by_class(ent, "sentry")))
	{
		if(entity_get_int(ent, EV_INT_iuser2) == PlayerId)
			remove_entity(ent);
	}
	return PLUGIN_CONTINUE;
}

public client_death(killer,victim,wpnindex,hitplace,TK)
{	
	max_kills[victim] = 0;
	//user_controll[victim] = 0;
			
	new ent = find_drop_pack(victim, "pack")
	new ent2 = find_drop_pack(victim, "sentpack")
	if(is_valid_ent(ent))
	{
		if(task_exists(2571+ent))
		{
			remove_task(2571+ent);
			bartime(victim, 0);
			client_cmd(victim, "-duck");
		}
	}
	if(is_valid_ent(ent2))
	{
		if(task_exists(2572+ent2))
		{
			remove_task(2572+ent2);
			bartime(victim, 0);
			client_cmd(victim, "-duck");
		}
	}
	return PLUGIN_CONTINUE
}

public event_deathmsg()
{
	new g_attacker = read_data(1);
	new g_victim = read_data(2);

	
	if(!is_user_alive(g_attacker) || !is_user_connected(g_attacker))
		return PLUGIN_CONTINUE;
		
		
	if(!is_user_bot(g_victim) && ksmenu[ g_victim ] == true)
	{
		corereset(g_victim)
	}
		
	if(get_user_team(g_attacker) != get_user_team(g_victim) && !nuke_player[g_attacker])
	{
		max_kills[g_attacker]++;
		switch(max_kills[g_attacker])
		{
			case 3:
			{
				if(!nuke_active )
				{
					if(choose_uav[g_attacker])
					{
						uav[g_attacker]++;
						if(cs_get_user_team(g_attacker) == CS_TEAM_T )
						{
							Killstreak_Sound2(g_attacker, "uav");
						}
						if(cs_get_user_team(g_attacker) == CS_TEAM_CT )
						{
							Killstreak_Sound(g_attacker, "uav");
						}
						acg_drawtga(g_attacker, "gfx/killstreaks/kill_3_uav.tga", 255, 255, 255, 255, 0.5, 0.24, 1, FX_FADE, 0.0, 0.4, 0.0, 3.0, 0, 0, 906)
					}
					if(is_user_bot(g_attacker))
					{
						new BOTSTREAK_CHANCE1 = (random(100));

						if (BOTSTREAK_CHANCE1 > 100 || BOTSTREAK_CHANCE1 < 0)
						{
							client_print(g_attacker, print_chat, "[BOTSTREAK] Invalid Item!");
						}
						else
						{
							if (BOTSTREAK_CHANCE1 >= 1 && BOTSTREAK_CHANCE1 <= 60)
							{
								if(!emp_active || (emp_active && get_user_team(g_attacker) == get_user_team(emp_active)))
								{
									if(!cd_active)
									{
										set_task(2.0, "CreateUVA", g_attacker);
									}
								}
								new weapons[32], weaponsnum;
								get_user_weapons(g_attacker, weapons, weaponsnum);
								for(new i=0; i<weaponsnum; i++)
								if(maxAmmo[weapons[i]] > 0)
								cs_set_user_bpammo(g_attacker, weapons[i], maxAmmo[weapons[i]]);
							}
							else
							{
								if (BOTSTREAK_CHANCE1 >= 61 && BOTSTREAK_CHANCE1 <= 99)
								{
									new weapons[32], weaponsnum;
									get_user_weapons(g_attacker, weapons, weaponsnum);
									for(new i=0; i<weaponsnum; i++)
									if(maxAmmo[weapons[i]] > 0)
									cs_set_user_bpammo(g_attacker, weapons[i], maxAmmo[weapons[i]]);
								}
								else
								{
									if (BOTSTREAK_CHANCE1 < 0)
									{
										client_print(g_attacker, print_chat, "[BOTSTREAK] Invalid Item!");
									}
								}
							}
						}
					}
				}
			}
			case 4:
			{
				if(!nuke_active )
				{
					if(choose_cp[g_attacker])
					{
						pack[g_attacker]++;
						if(cs_get_user_team(g_attacker) == CS_TEAM_T )
						{
							Killstreak_Sound2(g_attacker, "carepackage");
						}
						if(cs_get_user_team(g_attacker) == CS_TEAM_CT )
						{
							Killstreak_Sound(g_attacker, "carepackage");
						}
						acg_drawtga(g_attacker, "gfx/killstreaks/kill_4_cp.tga", 255, 255, 255, 255, 0.5, 0.24, 1, FX_FADE, 0.0, 0.4, 0.0, 3.0, 0, 0, 906)
					}
					if(choose_cuav[g_attacker])
					{
						cuav[g_attacker]++
						if(cs_get_user_team(g_attacker) == CS_TEAM_T )
						{
							Killstreak_Sound2(g_attacker, "counter");
						}
						if(cs_get_user_team(g_attacker) == CS_TEAM_CT )
						{
							Killstreak_Sound(g_attacker, "counter");
						}
						acg_drawtga(g_attacker, "gfx/killstreaks/kill_4_cuav.tga", 255, 255, 255, 255, 0.5, 0.24, 1, FX_FADE, 0.0, 0.4, 0.0, 3.0, 0, 0, 906)
					}
					if(is_user_bot(g_attacker))
					{
						new BOTSTREAK_CHANCE2 = (random(100));

						if (BOTSTREAK_CHANCE2 > 100 || BOTSTREAK_CHANCE2 < 0)
						{
							client_print(g_attacker, print_chat, "[BOTSTREAK] Invalid Item!");
						}
						else
						{
							if (BOTSTREAK_CHANCE2 >= 1 && BOTSTREAK_CHANCE2 <= 50)
							{
								if(!emp_active || (emp_active && get_user_team(g_attacker) == get_user_team(emp_active)))
								{
									if(!cd_active)
									{
										set_task(2.0, "CreateCUVA", g_attacker);
									}
								}
								new weapons[32], weaponsnum;
								get_user_weapons(g_attacker, weapons, weaponsnum);
								for(new i=0; i<weaponsnum; i++)
								if(maxAmmo[weapons[i]] > 0)
								cs_set_user_bpammo(g_attacker, weapons[i], maxAmmo[weapons[i]]);
							}
							else
							{
								if (BOTSTREAK_CHANCE2 >= 51 && BOTSTREAK_CHANCE2 <= 99)
								{
									new weapons[32], weaponsnum;
									get_user_weapons(g_attacker, weapons, weaponsnum);
									for(new i=0; i<weaponsnum; i++)
									if(maxAmmo[weapons[i]] > 0)
									cs_set_user_bpammo(g_attacker, weapons[i], maxAmmo[weapons[i]]);
								}
								else
								{
									if (BOTSTREAK_CHANCE2 < 0)
									{
										client_print(g_attacker, print_chat, "[BOTSTREAK] Invalid Item!");
									}
								}
							}
						}
					}
				}
			}
			case 5:
			{
				if(!nuke_active )
				{				
					if(choose_predator[g_attacker])
					{
						predator[g_attacker]++;
						if(cs_get_user_team(g_attacker) == CS_TEAM_T )
						{
							Killstreak_Sound2(g_attacker, "predator");
						}
						if(cs_get_user_team(g_attacker) == CS_TEAM_CT )
						{
							Killstreak_Sound(g_attacker, "predator");
						}
						acg_drawtga(g_attacker, "gfx/killstreaks/kill_5_predator.tga", 255, 255, 255, 255, 0.5, 0.24, 1, FX_FADE, 0.0, 0.4, 0.0, 3.0, 0, 0, 906)
					}
					if(choose_sentrys[g_attacker] )
					{
						sentrys[g_attacker]++
						if(cs_get_user_team(g_attacker) == CS_TEAM_T )
						{
							Killstreak_Sound2(g_attacker, "sentrygun");
						}
						if(cs_get_user_team(g_attacker) == CS_TEAM_CT )
						{
							Killstreak_Sound(g_attacker, "sentrygun");
						}
						acg_drawtga(g_attacker, "gfx/killstreaks/kill_5_sentry.tga", 255, 255, 255, 255, 0.5, 0.24, 1, FX_FADE, 0.0, 0.4, 0.0, 3.0, 0, 0, 906)
					}
					if(is_user_bot(g_attacker))
					{
						new BOTSTREAK_CHANCE3 = (random(100));

						if (BOTSTREAK_CHANCE3 > 100 || BOTSTREAK_CHANCE3 < 0)
						{
							client_print(g_attacker, print_chat, "[BOTSTREAK] Invalid Item!");
						}
						else
						{
							if (BOTSTREAK_CHANCE3 >= 1 && BOTSTREAK_CHANCE3 <= 30)
							{
								if(!emp_active || (emp_active && get_user_team(g_attacker) == get_user_team(emp_active)))
								{
									if(!cd_active)
										{
											set_task(5.0, "CreateSentry", g_attacker);
											new num, players[32];
											get_players(players, num, "gh");
											for(new a = 0; a < num; a++)
											{
												new i = players[a];
												if(get_user_team(g_attacker) != get_user_team(i))
												{
													if(cs_get_user_team(i) == CS_TEAM_T )
													{
														client_cmd(i, "spk sound/mw/sentrygun_enemy2.wav");
													}
													if(cs_get_user_team(i) == CS_TEAM_CT )
													{
														client_cmd(i, "spk sound/mw/sentrygun_enemy.wav");
													}
												}
												else
												{
													if(cs_get_user_team(i) == CS_TEAM_T )
													{
														client_cmd(i, "spk sound/mw/sentrygun_friend2.wav");
													}
													if(cs_get_user_team(i) == CS_TEAM_CT )
													{
														client_cmd(i, "spk sound/mw/sentrygun_friend.wav");
													}
												}
											}
										}
								}
							}
							else
							{
								if (BOTSTREAK_CHANCE3 >= 31 && BOTSTREAK_CHANCE3 <= 85)
								{
									if(!emp_active || (emp_active && get_user_team(g_attacker) == get_user_team(emp_active)))
									{
										if(aerial_active == 0)
										{
											set_task(2.0, "CreatePredator2", g_attacker);
											
										}
									}
								}
								else
								{
									if (BOTSTREAK_CHANCE3 >= 86 && BOTSTREAK_CHANCE3 <= 99)
									{
										return PLUGIN_CONTINUE;
									}
									else
									{
										if (BOTSTREAK_CHANCE3 < 0)
										{
											client_print(g_attacker, print_chat, "[BOTSTREAK] Invalid Item!");
										}
									}
								}
							}
						}
					}
				}
			}
			case 6:
			{
				if(!nuke_active )
				{
					if(choose_nalot[g_attacker])
					{
						nalot[g_attacker]++
						if(cs_get_user_team(g_attacker) == CS_TEAM_T )
						{
							Killstreak_Sound2(g_attacker, "air");
						}
						if(cs_get_user_team(g_attacker) == CS_TEAM_CT )
						{
							Killstreak_Sound(g_attacker, "air");
						}
						acg_drawtga(g_attacker, "gfx/killstreaks/kill_6_airstrike.tga", 255, 255, 255, 255, 0.5, 0.24, 1, FX_FADE, 0.0, 0.4, 0.0, 3.0, 0, 0, 906)
					}
					if(is_user_bot(g_attacker))
					{
						new BOTSTREAK_CHANCE4 = (random(100));

						if (BOTSTREAK_CHANCE4 > 100 || BOTSTREAK_CHANCE4 < 0)
						{
							client_print(g_attacker, print_chat, "[BOTSTREAK] Invalid Item!");
						}
						else
						{
							if (BOTSTREAK_CHANCE4 >= 1 && BOTSTREAK_CHANCE4 <= 40)
							{
								return PLUGIN_CONTINUE;
							}
							else
							{
								if (BOTSTREAK_CHANCE4 >= 41 && BOTSTREAK_CHANCE4 <= 99)
								{
									if(!emp_active || (emp_active && get_user_team(g_attacker) == get_user_team(emp_active)))
									{
										if(aerial_active == 0)
										{
											set_task(2.0, "CreateNalot", g_attacker);
										}
									}
								}
								else
								{
									if (BOTSTREAK_CHANCE4 < 0)
									{
										client_print(g_attacker, print_chat, "[BOTSTREAK] Invalid Item!");
									}
								}
							}
						}
					}
				}
			}
			
			case 8:
			{
				if(!nuke_active )
				{
					if(is_user_bot(g_attacker))
					{
						new BOTSTREAK_CHANCE5 = (random(100));

						if (BOTSTREAK_CHANCE5 > 100 || BOTSTREAK_CHANCE5 < 0)
						{
							client_print(g_attacker, print_chat, "[BOTSTREAK] Invalid Item!");
						}
						else
						{
							if (BOTSTREAK_CHANCE5 >= 1 && BOTSTREAK_CHANCE5 <= 20)
							{
								if(!emp_active || (emp_active && get_user_team(g_attacker) == get_user_team(emp_active)))
								{
									if(!cd_active)
									{
										set_task(2.0, "CreateEmp", g_attacker);
									}
								}
								new weapons[32], weaponsnum;
								get_user_weapons(g_attacker, weapons, weaponsnum);
								for(new i=0; i<weaponsnum; i++)
								if(maxAmmo[weapons[i]] > 0)
								cs_set_user_bpammo(g_attacker, weapons[i], maxAmmo[weapons[i]]);
							}
							else
							{
								if (BOTSTREAK_CHANCE5 >= 21 && BOTSTREAK_CHANCE5 <= 99)
								{
									new weapons[32], weaponsnum;
									get_user_weapons(g_attacker, weapons, weaponsnum);
									for(new i=0; i<weaponsnum; i++)
									if(maxAmmo[weapons[i]] > 0)
									cs_set_user_bpammo(g_attacker, weapons[i], maxAmmo[weapons[i]]);
								}
								else
								{
									if (BOTSTREAK_CHANCE5 < 0)
									{
										client_print(g_attacker, print_chat, "[BOTSTREAK] Invalid Item!");
									}
								}
							}
						}
					}
				}
			}
			case 9:
			{
				if(!nuke_active )
				{
					if(choose_stealth[g_attacker])
					{
						stealth[g_attacker]++
						if(cs_get_user_team(g_attacker) == CS_TEAM_T )
						{
							Killstreak_Sound2(g_attacker, "stealth");
						}
						if(cs_get_user_team(g_attacker) == CS_TEAM_CT )
						{
							Killstreak_Sound(g_attacker, "stealth");
						}
						acg_drawtga(g_attacker, "gfx/killstreaks/kill_9_stealth.tga", 255, 255, 255, 255, 0.5, 0.24, 1, FX_FADE, 0.0, 0.4, 0.0, 3.0, 0, 0, 906)
					}
					if(is_user_bot(g_attacker))
					{
						new BOTSTREAK_CHANCE5 = (random(100));

						if (BOTSTREAK_CHANCE5 > 100 || BOTSTREAK_CHANCE5 < 0)
						{
							client_print(g_attacker, print_chat, "[BOTSTREAK] Invalid Item!");
						}
						else
						{
							if (BOTSTREAK_CHANCE5 >= 1 && BOTSTREAK_CHANCE5 <= 50)
							{
								if(!emp_active || (emp_active && get_user_team(g_attacker) == get_user_team(emp_active)))
								{
									if(!cd_active)
									{
										set_task(2.0, "CreateStealth", g_attacker);
									}
								}
								new weapons[32], weaponsnum;
								get_user_weapons(g_attacker, weapons, weaponsnum);
								for(new i=0; i<weaponsnum; i++)
								if(maxAmmo[weapons[i]] > 0)
								cs_set_user_bpammo(g_attacker, weapons[i], maxAmmo[weapons[i]]);
							}
							else
							{
								if (BOTSTREAK_CHANCE5 >= 51 && BOTSTREAK_CHANCE5 <= 99)
								{
									new weapons[32], weaponsnum;
									get_user_weapons(g_attacker, weapons, weaponsnum);
									for(new i=0; i<weaponsnum; i++)
									if(maxAmmo[weapons[i]] > 0)
									cs_set_user_bpammo(g_attacker, weapons[i], maxAmmo[weapons[i]]);
								}
								else
								{
									if (BOTSTREAK_CHANCE5 < 0)
									{
										client_print(g_attacker, print_chat, "[BOTSTREAK] Invalid Item!");
									}
								}
							}
						}
					}
				}
			}
			case 12:
			{
				if(!nuke_active )
				{
					if(is_user_bot(g_attacker))
					{
						new BOTSTREAK_CHANCE6 = (random(100));

						if (BOTSTREAK_CHANCE6 > 100 || BOTSTREAK_CHANCE6 < 0)
						{
							client_print(g_attacker, print_chat, "[BOTSTREAK] Invalid Item!");
						}
						else
						{
							if (BOTSTREAK_CHANCE6 >= 1 && BOTSTREAK_CHANCE6 <= 20)
							{
								if(!emp_active || (emp_active && get_user_team(g_attacker) == get_user_team(emp_active)))
								{
									if(aerial_active == 0)
									{
										set_task(2.0, "CreateNalot", g_attacker);
									}
								}
								new weapons[32], weaponsnum;
								get_user_weapons(g_attacker, weapons, weaponsnum);
								for(new i=0; i<weaponsnum; i++)
								if(maxAmmo[weapons[i]] > 0)
								cs_set_user_bpammo(g_attacker, weapons[i], maxAmmo[weapons[i]]);
							}
							else
							{
								if (BOTSTREAK_CHANCE6 >= 21 && BOTSTREAK_CHANCE6 <= 99)
								{
									new weapons[32], weaponsnum;
									get_user_weapons(g_attacker, weapons, weaponsnum);
									for(new i=0; i<weaponsnum; i++)
									if(maxAmmo[weapons[i]] > 0)
									cs_set_user_bpammo(g_attacker, weapons[i], maxAmmo[weapons[i]]);
								}
								else
								{
									if (BOTSTREAK_CHANCE6 < 0)
									{
										client_print(g_attacker, print_chat, "[BOTSTREAK] Invalid Item!");
									}
								}
							}
						}
					}
				}
			}
			
			case 15:
			{
				if(!nuke_active )
				{
					if(choose_emp[g_attacker])
					{
						emp[g_attacker]++;
						if(cs_get_user_team(g_attacker) == CS_TEAM_T )
						{
							Killstreak_Sound2(g_attacker, "emp");
						}
						if(cs_get_user_team(g_attacker) == CS_TEAM_CT )
						{
							Killstreak_Sound(g_attacker, "emp");
						}
						acg_drawtga(g_attacker, "gfx/killstreaks/kill_15_emp.tga", 255, 255, 255, 255, 0.5, 0.24, 1, FX_FADE, 0.0, 0.4, 0.0, 3.0, 0, 0, 906)
					}
					if(is_user_bot(g_attacker))
					{
						new BOTSTREAK_CHANCE6 = (random(100));

						if (BOTSTREAK_CHANCE6 > 100 || BOTSTREAK_CHANCE6 < 0)
						{
							client_print(g_attacker, print_chat, "[BOTSTREAK] Invalid Item!");
						}
						else
						{
							if (BOTSTREAK_CHANCE6 >= 1 && BOTSTREAK_CHANCE6 <= 20)
							{
								
								if(!emp_active || (emp_active && get_user_team(g_attacker) == get_user_team(emp_active)))
								{
									if(!cd_active)
									{
										set_task(2.0, "CreateNuke", g_attacker)
										
										new weapons[32], weaponsnum;
										get_user_weapons(g_attacker, weapons, weaponsnum);
										for(new i=0; i<weaponsnum; i++)
										if(maxAmmo[weapons[i]] > 0)
										cs_set_user_bpammo(g_attacker, weapons[i], maxAmmo[weapons[i]]);
									}
								}
							}
							else
							{
								if (BOTSTREAK_CHANCE6 >= 21 && BOTSTREAK_CHANCE6 <= 99)
								{
									if(!cd_active)
									{
										set_task(2.0, "CreateEmp", g_attacker)
										
										new weapons[32], weaponsnum;
										get_user_weapons(g_attacker, weapons, weaponsnum);
										for(new i=0; i<weaponsnum; i++)
										if(maxAmmo[weapons[i]] > 0)
										cs_set_user_bpammo(g_attacker, weapons[i], maxAmmo[weapons[i]]);
									}
								}
								else
								{
									if (BOTSTREAK_CHANCE6 < 0)
									{
										client_print(g_attacker, print_chat, "[BOTSTREAK] Invalid Item!");
									}
								}
							}
						}
					}
				}
			}
			case 25:
			{
				if(choose_nuke[g_attacker])
				{
					nuke[g_attacker]++;
					acg_drawtga(g_attacker, "gfx/killstreaks/kill_25_nuke.tga", 255, 255, 255, 255, 0.5, 0.24, 1, FX_FADE, 0.0, 0.4, 0.0, 3.0, 0, 0, 906)
					if(cs_get_user_team(g_attacker) == CS_TEAM_T )
					{
						Killstreak_Sound2(g_attacker, "nuke");
					}
					if(cs_get_user_team(g_attacker) == CS_TEAM_CT )
					{
						Killstreak_Sound(g_attacker, "nuke");
					}
				}
				if(is_user_bot(g_attacker))
				{
					if(!emp_active || (emp_active && get_user_team(g_attacker) == get_user_team(emp_active)))
						{
							set_task(2.0, "CreateNuke", g_attacker)
						}
				}
			}
		}
	}
	else
	{
		//hotfix for not respawning for TK-ing
		set_user_health(g_attacker, 0)
		max_kills[g_attacker] = 0;
		set_task(3.0, "tkrespawncmd", g_attacker)
		
	}
	acg_removedrawnimage(g_victim, 2, 665)
	return PLUGIN_CONTINUE;
}

public tkrespawncmd(id)
{
	client_cmd(id, "tkrespawn")
}

public fwd_streakreset(id)
{
	max_kills[id] = 0;
}

public Killstreak_Sound(id, reward[])
{
	client_cmd(id, "spk sound/mw/%s_give.wav", reward);
}

public Killstreak_Sound2(id, reward[])
{
	client_cmd(id, "spk sound/mw/%s_give2.wav", reward);
}

public task_drawnormalradar(id)
{
	acg_drawoverviewradar (id, 1, 0, 0, 210, 210, 255, 255, 255)
	return PLUGIN_CONTINUE;
}


//uav
public CreateUVA(id)
{
	static TimeUav[2];
	new team = get_user_team(id) == 1? 0: 1;
	radar[team] = true;
	
	new num, players[32];
	get_players(players, num, "gh")
	for(new a = 0; a < num; a++)
	{
		new i = players[a]
		if(get_user_team(id) != get_user_team(i))
			{
				if(cs_get_user_team(i) == CS_TEAM_T )
				{
					client_cmd(i, "spk sound/mw/uav_enemy2.wav")
				}
				if(cs_get_user_team(i) == CS_TEAM_CT )
				{
					client_cmd(i, "spk sound/mw/uav_enemy.wav")
				}
			}
		else
			{
				if(cs_get_user_team(i) == CS_TEAM_T )
				{
					client_cmd(i, "spk sound/mw/uav_friend2.wav")
				}
				if(cs_get_user_team(i) == CS_TEAM_CT )
				{
					client_cmd(i, "spk sound/mw/uav_friend.wav")
				}
			}
	}
	radar_scan()
	
	if(task_exists(7354+team))
	{
		new times = (TimeUav[team]-get_systime())+60
		change_task(7354+team, float(times));
		change_task(id, float(times));
		TimeUav[team] = TimeUav[team]+times;
	}
	else
	{
		new data[1];
		data[0] = team;
		set_task(30.0, "deluav", 7354+team, data, 1);
		TimeUav[team] = get_systime()+30;
	}
	cd_active = id;
	set_task(1.0, "cooldownover")
}

public deluav(data[1])
{
	radar[data[0]] = false;
}

public radar_scan()
{
	new num, players[32];
	get_players(players, num, "gh")
	for(new z=0; z<num; z++)
	{
		new ids = players[z];
		if(!is_user_alive(ids) || !radar[get_user_team(ids) == 1? 0: 1])
			continue;
		
		if(!emp_active)
			radar_continue(ids)
		else if(get_user_team(ids) == get_user_team(emp_active))
			radar_continue(ids)
	}
}


radar_continue(id)
{
	new num, players[32];
	new PlayerCoords[3], PlayerCoords1[3],PlayerCoords2[3], PlayerCoords3[3];
	new PlayerCoords4[3], PlayerCoords5[3], PlayerCoords6[3], PlayerCoords7[3];
	new PlayerCoords8[3], PlayerCoords9[3], PlayerCoords10[3], PlayerCoords11[3];
	new PlayerCoords12[3], PlayerCoords13[3], PlayerCoords14[3], PlayerCoords15[3];
	new PlayerCoords16[3], PlayerCoords17[3], PlayerCoords18[3], PlayerCoords19[3];
	new PlayerCoords20[3], PlayerCoords21[3], PlayerCoords22[3], PlayerCoords23[3];
	new PlayerCoords24[3], PlayerCoords25[3], PlayerCoords26[3], PlayerCoords27[3];
	new PlayerCoords28[3], PlayerCoords29[3], PlayerCoords30[3], PlayerCoords31[3];
	get_players(players, num, "gh")
	for(new a=0; a<num; a++)
	{
		if(!is_user_alive(players[a]) || get_user_team(players[a]) == get_user_team(id))
			continue;
		{	
			get_user_origin(players[a], PlayerCoords)
			acg_drawspronradar (id, "iEnemy", 255, 255, 255, PlayerCoords, 0, FX_FADE, 0.0, 1.0, 0.0, 1.3, DRAW_ADDITIVE, 340, 1)

		}
		if(!is_user_alive(players[1]) || get_user_team(players[1]) == get_user_team(id))
			continue;
		{		
			get_user_origin(players[1], PlayerCoords1)
			acg_drawspronradar (id, "iEnemy", 255, 255, 255, PlayerCoords1, 0, FX_FADE, 0.0, 1.0, 0.0, 1.3, DRAW_ADDITIVE, 301, 1)
			
		}
		if(!is_user_alive(players[2]) || get_user_team(players[2]) == get_user_team(id))
			continue;
		{ 		
			get_user_origin(players[2], PlayerCoords2)
			acg_drawspronradar (id, "iEnemy", 255, 255, 255, PlayerCoords2, 0, FX_FADE, 0.0, 1.0, 0.0, 1.3, DRAW_ADDITIVE, 302, 1)

		}
		if(!is_user_alive(players[3]) || get_user_team(players[3]) == get_user_team(id))
			continue;
		{ 	
			get_user_origin(players[3], PlayerCoords3)
			acg_drawspronradar (id, "iEnemy", 255, 255, 255, PlayerCoords3, 0, FX_FADE, 0.0, 1.0, 0.0, 1.3, DRAW_ADDITIVE, 303, 1)

		}
		if(!is_user_alive(players[4]) || get_user_team(players[4]) == get_user_team(id))
			continue;
		{ 	
			get_user_origin(players[4], PlayerCoords4)
			acg_drawspronradar (id, "iEnemy", 255, 255, 255, PlayerCoords4, 0, FX_FADE, 0.0, 1.0, 0.0, 1.3, DRAW_ADDITIVE, 304, 1)

		}
		if(!is_user_alive(players[5]) || get_user_team(players[5]) == get_user_team(id))
			continue;		
		{ 		
			get_user_origin(players[5], PlayerCoords5)
			acg_drawspronradar (id, "iEnemy", 255, 255, 255, PlayerCoords5, 0, FX_FADE, 0.0, 1.0, 0.0, 1.3, DRAW_ADDITIVE, 305, 1)
			
		}
		if(!is_user_alive(players[6]) || get_user_team(players[6]) == get_user_team(id))
			continue;
		{ 	
			get_user_origin(players[6], PlayerCoords6)
			acg_drawspronradar (id, "iEnemy", 255, 255, 255, PlayerCoords6, 0, FX_FADE, 0.0, 1.0, 0.0, 1.3, DRAW_ADDITIVE, 306, 1)

		}
		if(!is_user_alive(players[7]) || get_user_team(players[7]) == get_user_team(id))
			continue;
		{ 	
			get_user_origin(players[7], PlayerCoords7)
			acg_drawspronradar (id, "iEnemy", 255, 255, 255, PlayerCoords7, 0, FX_FADE, 0.0, 1.0, 0.0, 1.3, DRAW_ADDITIVE, 307, 1)

		}
		if(!is_user_alive(players[8]) || get_user_team(players[8]) == get_user_team(id))
			continue;
		{ 		
			get_user_origin(players[8], PlayerCoords8)
			acg_drawspronradar (id, "iEnemy", 255, 255, 255, PlayerCoords8, 0, FX_FADE, 0.0, 1.0, 0.0, 1.3, DRAW_ADDITIVE, 308, 1)
			
		}
		if(!is_user_alive(players[9]) || get_user_team(players[9]) == get_user_team(id))
			continue;
		{ 			
			get_user_origin(players[9], PlayerCoords9)
			acg_drawspronradar (id, "iEnemy", 255, 255, 255, PlayerCoords9, 0, FX_FADE, 0.0, 1.0, 0.0, 1.3, DRAW_ADDITIVE, 309, 1)
			
		}
		if(!is_user_alive(players[10]) || get_user_team(players[10]) == get_user_team(id))
			continue;
		{ 		
			get_user_origin(players[10], PlayerCoords10)
			acg_drawspronradar (id, "iEnemy", 255, 255, 255, PlayerCoords10, 0, FX_FADE, 0.0, 1.0, 0.0, 1.3, DRAW_ADDITIVE, 310, 1)
			
		}
		if(!is_user_alive(players[11]) || get_user_team(players[11]) == get_user_team(id))
			continue;
		{
			get_user_origin(players[11], PlayerCoords11)
			acg_drawspronradar (id, "iEnemy", 255, 255, 255, PlayerCoords11, 0, FX_FADE, 0.0, 1.0, 0.0, 1.3, DRAW_ADDITIVE, 311, 1)
			
		}
		if(!is_user_alive(players[12]) || get_user_team(players[12]) == get_user_team(id))
			continue;
		{
			get_user_origin(players[12], PlayerCoords12)
			acg_drawspronradar (id, "iEnemy", 255, 255, 255, PlayerCoords12, 0, FX_FADE, 0.0, 1.0, 0.0, 1.3, DRAW_ADDITIVE, 312, 1)
			
		}
		if(!is_user_alive(players[13]) || get_user_team(players[13]) == get_user_team(id))
			continue;
		{
			get_user_origin(players[13], PlayerCoords13)
			acg_drawspronradar (id, "iEnemy", 255, 255, 255, PlayerCoords13, 0, FX_FADE, 0.0, 1.0, 0.0, 1.3, DRAW_ADDITIVE, 313, 1)
			
		}
		if(!is_user_alive(players[14]) || get_user_team(players[14]) == get_user_team(id))
			continue;
		{
			get_user_origin(players[14], PlayerCoords14)
			acg_drawspronradar (id, "iEnemy", 255, 255, 255, PlayerCoords14, 0, FX_FADE, 0.0, 1.0, 0.0, 1.3, DRAW_ADDITIVE, 314, 1)
			
		}
		if(!is_user_alive(players[15]) || get_user_team(players[15]) == get_user_team(id))
			continue;
		{
			get_user_origin(players[15], PlayerCoords15)
			acg_drawspronradar (id, "iEnemy", 255, 255, 255, PlayerCoords15, 0, FX_FADE, 0.0, 1.0, 0.0, 1.3, DRAW_ADDITIVE, 315, 1)
			
		}
		if(!is_user_alive(players[16]) || get_user_team(players[16]) == get_user_team(id))
			continue;
		{
			get_user_origin(players[16], PlayerCoords16)
			acg_drawspronradar (id, "iEnemy", 255, 255, 255, PlayerCoords16, 0, FX_FADE, 0.0, 1.0, 0.0, 1.3, DRAW_ADDITIVE, 316, 1)
			
		}
		if(!is_user_alive(players[17]) || get_user_team(players[17]) == get_user_team(id))
			continue;
		{
			get_user_origin(players[17], PlayerCoords17)
			acg_drawspronradar (id, "iEnemy", 255, 255, 255, PlayerCoords17, 0, FX_FADE, 0.0, 1.0, 0.0, 1.3, DRAW_ADDITIVE, 317, 1)
			
		}
		if(!is_user_alive(players[18]) || get_user_team(players[18]) == get_user_team(id))
			continue;
		{
			get_user_origin(players[18], PlayerCoords18)
			acg_drawspronradar (id, "iEnemy", 255, 255, 255, PlayerCoords18, 0, FX_FADE, 0.0, 1.0, 0.0, 1.3, DRAW_ADDITIVE, 318, 1)
			
		}
		if(!is_user_alive(players[19]) || get_user_team(players[19]) == get_user_team(id))
			continue;
		{
			get_user_origin(players[19], PlayerCoords19)
			acg_drawspronradar (id, "iEnemy", 255, 255, 255, PlayerCoords19, 0, FX_FADE, 0.0, 1.0, 0.0, 1.3, DRAW_ADDITIVE, 319, 1)
			
		}
		if(!is_user_alive(players[20]) || get_user_team(players[20]) == get_user_team(id))
			continue;
		{
			get_user_origin(players[20], PlayerCoords20)
			acg_drawspronradar (id, "iEnemy", 255, 255, 255, PlayerCoords20, 0, FX_FADE, 0.0, 1.0, 0.0, 1.3, DRAW_ADDITIVE, 320, 1)
			
		}
		
		if(!is_user_alive(players[21]) || get_user_team(players[21]) == get_user_team(id))
			continue;
		{
			get_user_origin(players[21], PlayerCoords21)
			acg_drawspronradar (id, "iEnemy", 255, 255, 255, PlayerCoords21, 0, FX_FADE, 0.0, 1.0, 0.0, 1.3, DRAW_ADDITIVE, 321, 1)
			
		}
		if(!is_user_alive(players[22]) || get_user_team(players[22]) == get_user_team(id))
			continue;
		{
			get_user_origin(players[22], PlayerCoords22)
			acg_drawspronradar (id, "iEnemy", 255, 255, 255, PlayerCoords22, 0, FX_FADE, 0.0, 1.0, 0.0, 1.3, DRAW_ADDITIVE, 322, 1)
			
		}
		if(!is_user_alive(players[23]) || get_user_team(players[23]) == get_user_team(id))
			continue;
		{
			get_user_origin(players[23], PlayerCoords23)
			acg_drawspronradar (id, "iEnemy", 255, 255, 255, PlayerCoords23, 0, FX_FADE, 0.0, 1.0, 0.0, 1.3, DRAW_ADDITIVE, 323, 1)
			
		}
		if(!is_user_alive(players[24]) || get_user_team(players[24]) == get_user_team(id))
			continue;
		{
			get_user_origin(players[24], PlayerCoords24)
			acg_drawspronradar (id, "iEnemy", 255, 255, 255, PlayerCoords24, 0, FX_FADE, 0.0, 1.0, 0.0, 1.3, DRAW_ADDITIVE, 324, 1)
			
		}
		if(!is_user_alive(players[25]) || get_user_team(players[25]) == get_user_team(id))
			continue;
		{
			get_user_origin(players[25], PlayerCoords25)
			acg_drawspronradar (id, "iEnemy", 255, 255, 255, PlayerCoords25, 0, FX_FADE, 0.0, 1.0, 0.0, 1.3, DRAW_ADDITIVE, 325, 1)
			
		}
		if(!is_user_alive(players[26]) || get_user_team(players[26]) == get_user_team(id))
			continue;
		{
			get_user_origin(players[26], PlayerCoords26)
			acg_drawspronradar (id, "iEnemy", 255, 255, 255, PlayerCoords26, 0, FX_FADE, 0.0, 1.0, 0.0, 1.3, DRAW_ADDITIVE, 326, 1)
			
		}
		if(!is_user_alive(players[27]) || get_user_team(players[27]) == get_user_team(id))
			continue;
		{
			get_user_origin(players[27], PlayerCoords27)
			acg_drawspronradar (id, "iEnemy", 255, 255, 255, PlayerCoords27, 0, FX_FADE, 0.0, 1.0, 0.0, 1.3, DRAW_ADDITIVE, 327, 1)
			
		}
		if(!is_user_alive(players[28]) || get_user_team(players[28]) == get_user_team(id))
			continue;
		{
			get_user_origin(players[28], PlayerCoords28)
			acg_drawspronradar (id, "iEnemy", 255, 255, 255, PlayerCoords28, 0, FX_FADE, 0.0, 1.0, 0.0, 1.3, DRAW_ADDITIVE, 328, 1)
			
		}
		if(!is_user_alive(players[29]) || get_user_team(players[29]) == get_user_team(id))
			continue;
		{
			get_user_origin(players[29], PlayerCoords29)
			acg_drawspronradar (id, "iEnemy", 255, 255, 255, PlayerCoords29, 0, FX_FADE, 0.0, 1.0, 0.0, 1.3, DRAW_ADDITIVE, 329, 1)
			
		}
		if(!is_user_alive(players[30]) || get_user_team(players[30]) == get_user_team(id))
			continue;
		{
			get_user_origin(players[30], PlayerCoords30)
			acg_drawspronradar (id, "iEnemy", 255, 255, 255, PlayerCoords30, 0, FX_FADE, 0.0, 1.0, 0.0, 1.3, DRAW_ADDITIVE, 330, 1)
			
		}
		if(!is_user_alive(players[31]) || get_user_team(players[31]) == get_user_team(id))
			continue;
		{
			get_user_origin(players[31], PlayerCoords31)
			acg_drawspronradar (id, "iEnemy", 255, 255, 255, PlayerCoords31, 0, FX_FADE, 0.0, 1.0, 0.0, 1.3, DRAW_ADDITIVE, 331, 1)
			
		}

	}
	return;
}

public targetverification(id)
{	
	acg_drawtga(id, "gfx/killstreaks/targetverified.tga", 255, 255, 255, 255, 0.5, 0.25, 1, FX_FADE, 0.0, 0.2, 0.0, 2.0, 0, ALIGN_BOTTOM, -1)
}

public airspace(id)
{	
	acg_drawtga(id, "gfx/killstreaks/airspace.tga", 255, 255, 255, 255, 0.5, 0.25, 1, FX_FADE, 0.0, 0.2, 0.0, 2.0, 0, ALIGN_BOTTOM, -1)
}

//airpack
public CreatePack(id)
{
	new num, players[32];
	get_players(players, num, "gh");
	for(new a = 0; a < num; a++)
	{
		new i = players[a];
		if(get_user_team(id) != get_user_team(i))
		{	
			if(cs_get_user_team(i) == CS_TEAM_T )
			{
				client_cmd(i, "spk sound/mw/carepackage_enemy2.wav");
				set_task(0.2, "soundhelifunc", i)
			}
			if(cs_get_user_team(i) == CS_TEAM_CT )
			{
				client_cmd(i, "spk sound/mw/carepackage_enemy.wav");
				set_task(0.2, "soundhelifunc", i)
			}
		}
		else
		{
			if(cs_get_user_team(i) == CS_TEAM_T )
			{
				client_cmd(i, "spk sound/mw/carepackage_friend2.wav");
				set_task(0.2, "soundhelifunc", i)
			}
			if(cs_get_user_team(i) == CS_TEAM_CT )
			{
				client_cmd(i, "spk sound/mw/carepackage_friend.wav");
				set_task(0.2, "soundhelifunc", i)
			}
		}
	}
	CreateHeli(id)
	pack[id]--;
	targetverification(id)
	set_task(4.0, "CarePack", id+742)
	aerial_active = id;
	set_task(8.0, "aerialover")
}

public CreateSentryPack(id)
{
	new num, players[32];
	get_players(players, num, "gh");
	for(new a = 0; a < num; a++)
	{
		new i = players[a];
		if(get_user_team(id) != get_user_team(i))
		{		
			if(cs_get_user_team(i) == CS_TEAM_T )
			{
				client_cmd(i, "spk sound/mw/sentrygun_enemy2.wav");
				set_task(0.2, "soundhelifunc", i)
			}
			if(cs_get_user_team(i) == CS_TEAM_CT )
			{
				client_cmd(i, "spk sound/mw/sentrygun_enemy.wav");
				set_task(0.2, "soundhelifunc", i)
			}
		}	
		else
		{
			if(cs_get_user_team(i) == CS_TEAM_T )
			{
				client_cmd(i, "spk sound/mw/sentrygun_friend2.wav");
				set_task(0.2, "soundhelifunc", i)
			}
			if(cs_get_user_team(i) == CS_TEAM_CT )
			{
				client_cmd(i, "spk sound/mw/sentrygun_friend.wav");
				set_task(0.2, "soundhelifunc", i)
			}
		}
	}
	CreateHeli2(id)
	sentrys[id]--;
	targetverification(id)
	set_task(4.0, "CareSentryPack", id+743)
	aerial_active = id;
	set_task(8.0, "aerialover")
}

public CarePack(taskid)
{
	new id = (taskid - 742)	

	if(cs_get_user_team(id) == CS_TEAM_T )
	{
		OpforOrigin2[2] += 400; 
		new Float:LocVecs[3];
		IVecFVec(OpforOrigin2, LocVecs);
		create_ent(id, "pack", "models/cod_carepackageopfor.mdl", 2, 6, LocVecs);	
	}
	
	if(cs_get_user_team(id) == CS_TEAM_CT )
	{
		RangerOrigin2[2] += 400; 
		new Float:LocVecs[3];
		IVecFVec(RangerOrigin2, LocVecs);
		create_ent(id, "pack", "models/cod_carepackageranger.mdl", 2, 6, LocVecs);
	}
}

public CareSentryPack(taskid)
{
	new id = (taskid - 743)
	
	if(cs_get_user_team(id) == CS_TEAM_T )
	{
		OpforOrigin3[2] += 400; 
		new Float:LocVecs[3];
		IVecFVec(OpforOrigin3, LocVecs);
		create_ent(id, "sentpack", "models/cod_carepackageopfor.mdl", 2, 6, LocVecs);
	}
	
	if(cs_get_user_team(id) == CS_TEAM_CT )
	{
		RangerOrigin3[2] += 400; 
		new Float:LocVecs[3];
		IVecFVec(RangerOrigin3, LocVecs);
		create_ent(id, "sentpack", "models/cod_carepackageranger.mdl", 2, 6, LocVecs);
	}
}

public pickup_pack(info[2])
{
	new id = info[0];
	new ent = info[1];
	
	new PICKUP_CHANCE = (random(100));

	if (PICKUP_CHANCE > 100 || PICKUP_CHANCE < 0)
	{
		client_print(id, print_chat, "[Care Package] Invalid Item!");
	}
	else
	{
		
		if (PICKUP_CHANCE >= 83 && PICKUP_CHANCE <= 100)
		{
			if(!is_user_connected(id) || !is_user_alive(id))
			return;

			new weapons[32], weaponsnum;
			get_user_weapons(id, weapons, weaponsnum);
			for(new i=0; i<weaponsnum; i++)
			if(maxAmmo[weapons[i]] > 0)
			cs_set_user_bpammo(id, weapons[i], maxAmmo[weapons[i]]);
			give_item(id, "weapon_hegrenade");
			give_item(id, "weapon_flashbang");
			give_item(id, "weapon_flashbang");
			client_print(id, print_chat, "[Care Package] Received Supply");
		}
		else
		{
			//8 percent
			if (PICKUP_CHANCE >= 75 && PICKUP_CHANCE <= 82)
			{
				stealth[id]++;
				if(cs_get_user_team(id) == CS_TEAM_T )
				{
					client_cmd(id, "spk sound/mw/stealth_give2.wav");
				}
				if(cs_get_user_team(id) == CS_TEAM_CT )
				{
					client_cmd(id, "spk sound/mw/stealth_give.wav");
				}
				acg_drawtga(id, "gfx/killstreaks/carepack_stealth.tga", 255, 255, 255, 255, 0.5, 0.24, 1, FX_FADE, 0.0, 0.4, 0.0, 3.0, 0, 0, 906)
				if(is_user_bot(id))
				{
					set_task(2.0, "CreateStealth", id)
				}
			}
			else
			{
				//4 percent
				if (PICKUP_CHANCE >= 72 && PICKUP_CHANCE <= 75)
				{
					emp[id]++;
					if(cs_get_user_team(id) == CS_TEAM_T )
					{
						client_cmd(id, "spk sound/mw/emp_give2.wav");
					}
					if(cs_get_user_team(id) == CS_TEAM_CT )
					{
						client_cmd(id, "spk sound/mw/emp_give.wav");
					}
					acg_drawtga(id, "gfx/killstreaks/carepack_emp.tga", 255, 255, 255, 255, 0.5, 0.24, 1, FX_FADE, 0.0, 0.4, 0.0, 3.0, 0, 0, 906)
					if(is_user_bot(id))
					{
						set_task(2.0, "CreateEmp", id)
					}
				}
				else
				{
					//13 percent
					if (PICKUP_CHANCE >= 59 && PICKUP_CHANCE <= 71)
					{
						set_task(5.0, "CreateSentry", id)
						if(cs_get_user_team(id) == CS_TEAM_T )
						{
							client_cmd(id, "spk sound/mw/sentrygun_give2.wav");
						}
						if(cs_get_user_team(id) == CS_TEAM_CT )
						{
							client_cmd(id, "spk sound/mw/sentrygun_give.wav");
						}
						acg_drawtga(id, "gfx/killstreaks/carepack_sentry.tga", 255, 255, 255, 255, 0.5, 0.24, 1, FX_FADE, 0.0, 0.4, 0.0, 3.0, 0, 0, 906)
						set_task(0.1, "sentryready", id)
						set_task(5.0, "sentrydeploying", id)
						set_task(5.5, "sentrydeployed", id)
						//client_cmd(id, "spk sound/mw/deployingsentry.wav")
					}
					else
					{
						//15 percent
						if (PICKUP_CHANCE >= 47 && PICKUP_CHANCE <= 58)
						{
							nalot[id]++;
							if(cs_get_user_team(id) == CS_TEAM_T )
							{
								client_cmd(id, "spk sound/mw/air_give2.wav");
							}
							if(cs_get_user_team(id) == CS_TEAM_CT )
							{
								client_cmd(id, "spk sound/mw/air_give.wav");
							}
							acg_drawtga(id, "gfx/killstreaks/carepack_airstrike.tga", 255, 255, 255, 255, 0.5, 0.24, 1, FX_FADE, 0.0, 0.4, 0.0, 3.0, 0, 0, 906)
							if(is_user_bot(id))
							{
								set_task(2.0, "CreateNalot", id)
							}
						}
						
						else
						{
							//13 percent
							if (PICKUP_CHANCE >= 35 && PICKUP_CHANCE <= 47)
							{
								predator[id]++;
								if(cs_get_user_team(id) == CS_TEAM_T )
								{
									client_cmd(id, "spk sound/mw/predator_give2.wav");
								}
								if(cs_get_user_team(id) == CS_TEAM_CT )
								{
									client_cmd(id, "spk sound/mw/predator_give.wav");
								}
								acg_drawtga(id, "gfx/killstreaks/carepack_predator.tga", 255, 255, 255, 255, 0.5, 0.24, 1, FX_FADE, 0.0, 0.4, 0.0, 3.0, 0, 0, 906)
								if(is_user_bot(id))
								{
									set_task(2.0, "CreatePredator2", id)
								}
							}
							else
							{
								//17 percent
								if (PICKUP_CHANCE >= 17 && PICKUP_CHANCE <= 34)
								{
									cuav[id]++;
									if(cs_get_user_team(id) == CS_TEAM_T )
									{
										client_cmd(id, "spk sound/mw/counter_give2.wav");
									}
									if(cs_get_user_team(id) == CS_TEAM_CT )
									{
										client_cmd(id, "spk sound/mw/counter_give.wav");
									}
									acg_drawtga(id, "gfx/killstreaks/carepack_cuav.tga", 255, 255, 255, 255, 0.5, 0.24, 1, FX_FADE, 0.0, 0.4, 0.0, 3.0, 0, 0, 906)
									if(is_user_bot(id))
									{
										set_task(2.0, "CreateCUVA", id)
									}
								}
								else
								{
									//17 percent
									if (PICKUP_CHANCE >= 0 && PICKUP_CHANCE <= 16)
									{
										uav[id]++;
										if(cs_get_user_team(id) == CS_TEAM_T )
										{
											client_cmd(id, "spk sound/mw/uav_give2.wav");
										}
										if(cs_get_user_team(id) == CS_TEAM_CT )
										{
											client_cmd(id, "spk sound/mw/uav_give.wav");
										}
										
										acg_drawtga(id, "gfx/killstreaks/carepack_uav.tga", 255, 255, 255, 255, 0.5, 0.24, 1, FX_FADE, 0.0, 0.4, 0.0, 3.0, 0, 0, 906)
										if(is_user_bot(id))
										{
											set_task(2.0, "CreateUVA", id)
										}
									}
									else
									{
										if (PICKUP_CHANCE < 0)
										{
											client_print(id, print_chat, "[Care Package] Invalid Item!");
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
	client_cmd(id, "-duck")
	remove_entity(ent);
}
public pickup_sentpack(info[2])
{
	new id = info[0];
	new ent = info[1];
	client_cmd(id, "spk sound/mw/deployingsentry.wav");
	set_task(5.0, "CreateSentry", id)
	set_task(0.1, "sentryready", id)
	set_task(5.0, "sentrydeploying", id)
	set_task(5.5, "sentrydeployed", id)
	client_cmd(id, "-duck")
	remove_entity(ent);
}

public soundhelifunc(id)
{
	client_cmd(id, "spk sound/mw/heli_fly.wav");
}

public client_PreThink(id)
{	
	if(!is_user_alive(id))
		return PLUGIN_CONTINUE;				
	if(user_controll[id])
	{
		new ent2 = user_controll[id];
		if(is_valid_ent(ent2))
		{
			new Float:Velocity[3], Float:Angle[3];
			velocity_by_aim(id, 500, Velocity);
			entity_get_vector(id, EV_VEC_v_angle, Angle);
			
			entity_set_vector(ent2, EV_VEC_velocity, Velocity);
			entity_set_vector(ent2, EV_VEC_angles, Angle);
		}
		else
			attach_view(id, id);
	}
	static ent_id[MAX+1];
	new ent = find_drop_pack(id, "pack");
	if(is_valid_ent(ent))
	{
		if(!task_exists(2571+ent))
		{
			if(is_user_bot(id))
			{
				new freeze_chance = (random(10))
				if(freeze_chance > 10 || freeze_chance < 0)
				{
					return 0;
				}
				else
				{
					if(freeze_chance <= 7)
					{
						freezemovement(id)
						set_task(2.1, "unfreezemovement", id)
					}
					else
					{
						if(freeze_chance >= 8)
						{
							return 0;
						}
					}
				}
			}
			ent_id[id] = ent;
			bartime(id, 2)	
			
			client_cmd(id, "+duck")
			
			new info[2];
			info[0] = id;
			info[1] = ent;
			set_task(2.0, "pickup_pack", 2571+ent, info, 2);
		}

	}
	else
	{
		if(task_exists(2571+ent_id[id]))
		{
			client_cmd(id, "-duck")
			remove_task(2571+ent_id[id]);
			bartime(id, 0);
			ent_id[id] = 0;
		}
	}
	
	static ent2_id[MAX+1]
	new ent2 = find_drop_pack(id, "sentpack");
	if(is_valid_ent(ent2))
	{
		if(!task_exists(2572+ent2))
		{
			if(is_user_bot(id))
			{
				new freeze_chance = (random(10))
				if(freeze_chance > 10 || freeze_chance < 0)
				{
					return 0;
				}
				else
				{
					if(freeze_chance <= 7)
					{
						freezemovement(id)
						set_task(2.1, "unfreezemovement", id)
					}
					else
					{
						if(freeze_chance >= 8)
						{
							return 0;
						}
					}
				}
			}
			ent2_id[id] = ent2;
			bartime(id, 2)	
			
			client_cmd(id, "+duck")
			
			new info[2];
			info[0] = id;
			info[1] = ent2;
			set_task(2.0, "pickup_sentpack", 2572+ent2, info, 2);
		}
	}
		else		
	{
		if(task_exists(2572+ent2_id[id]))
		{
			client_cmd(id, "-duck")
			remove_task(2572+ent2_id[id]);
			bartime(id, 0);
			ent2_id[id] = 0;
		}
	}

	return PLUGIN_CONTINUE;
}

//counter-uva
public CreateCUVA(id)
{
	new num, players[32], PlayerCoords[3];
	get_players(players, num, "gh");
	for(new a = 0; a < num; a++)
	{
		new i = players[a];
		if(get_user_team(id) != get_user_team(i))
			{
				get_user_origin(players[a], PlayerCoords)
				acg_drawspronradar (i, "fuzz_radar", 255, 255, 255, PlayerCoords, players[a], FX_FADE, 0.2, 0.2, 0.0, 30.0, DRAW_NORMAL, 370, 0)
				set_task(0.5, "cuav_removeelements", i, _, _, "a", 56)
				if(cs_get_user_team(i) == CS_TEAM_T )
				{
					client_cmd(i, "spk sound/mw/counter_enemy2.wav");
				}
				if(cs_get_user_team(i) == CS_TEAM_CT )
				{
					client_cmd(i, "spk sound/mw/counter_enemy.wav");
				}
			}
			else
			{
				if(cs_get_user_team(i) == CS_TEAM_T )
				{
					client_cmd(i, "spk sound/mw/counter_friend2.wav");
				}
				if(cs_get_user_team(i) == CS_TEAM_CT )
				{
					client_cmd(i, "spk sound/mw/counter_friend.wav");
				}
			}
	}
	radar[get_user_team(id) == 1? 1: 0] = false;
	cd_active = id;
	set_task(1.0, "cooldownover")
}

public cuav_removeelements(id)
{
	new removeelements[3];
	get_user_origin(id, removeelements)
	acg_drawspronradar (id, "fuzz_radar", 255, 255, 255, removeelements, 0, FX_FADE, 0.0, 0.0, 0.0, 0.1, DRAW_NORMAL, 362, 0)
	acg_drawspronradar (id, "fuzz_radar", 255, 255, 255, removeelements, 0, FX_FADE, 0.0, 0.0, 0.0, 0.1, DRAW_NORMAL, 363, 0)
	acg_drawspronradar (id, "fuzz_radar", 255, 255, 255, removeelements, 0, FX_FADE, 0.0, 0.0, 0.0, 0.1, DRAW_NORMAL, 364, 0)
	acg_drawspronradar (id, "fuzz_radar", 255, 255, 255, removeelements, 0, FX_FADE, 0.0, 0.0, 0.0, 0.1, DRAW_NORMAL, 365, 0)
	acg_drawspronradar (id, "fuzz_radar", 255, 255, 255, removeelements, 0, FX_FADE, 0.0, 0.0, 0.0, 0.1, DRAW_NORMAL, 368, 0)
	acg_drawspronradar (id, "fuzz_radar", 255, 255, 255, removeelements, 0, FX_FADE, 0.0, 0.0, 0.0, 0.1, DRAW_NORMAL, 369, 0)
}

public ResetUVA(id)
{
	radar[get_user_team(id) == 1? 1: 0] = false;
}

//emp
public CreateEmp(id)
{
	new num, players[32];
	get_players(players, num, "gh")
	for(new a = 0; a < num; a++)
	{
		new i = players[a];

		if(get_user_team(id) != get_user_team(i))
		{
			set_task (1.0, "textflash", i, _, _, "a", 58)
			set_task(1.4, "initialdraw", i)
			set_task(3.0, "hud_drawloop", i, _, _, "a", 19)
			empflash(i)
			remove_entity_name("sentry")
			
			if(cs_get_user_team(i) == CS_TEAM_T )
			{
				client_cmd(i, "spk sound/mw/emp_enemy2.wav");
			}
			if(cs_get_user_team(i) == CS_TEAM_CT )
			{
				client_cmd(i, "spk sound/mw/emp_enemy.wav");
			}
		}
		else
		{
			if(cs_get_user_team(i) == CS_TEAM_T )
			{
				client_cmd(i, "spk sound/mw/emp_friend2.wav");
			}
			if(cs_get_user_team(i) == CS_TEAM_CT )
			{
				client_cmd(i, "spk sound/mw/emp_friend.wav");
			}
			empflash(i)
		}
	}
	emp_active = id;
	set_task(60.0,"del_emp");
	cd_active = id;
	set_task(4.0, "cooldownover")
}

public empflash(i)
{
	//yellow
	acg_drawtga(i, "gfx/nuke/nukeeffect.tga", 255, 255, 255, 255, 0.0, 0.0, 1, FX_FADE, 0.4, 0.4, 0.0, 1.4, 1, 0, 667)
	//white
	acg_drawtga(i, "gfx/nuke/nukeeffect2.tga", 255, 255, 255, 200, 0.0, 0.0, 1, FX_FADE, 0.2, 0.2, 0.0, 1.2, 1, 0, 668)
}

public textflash(i)
{
	acg_drawtext(i, 0.5, 0.5, "SYSTEM FAILURE", 255, 255, 255, 200, 0.1, 0.1, 0.8, 1, TS_SHADOW, 0, 0, 2)
}

public initialdraw(i)
{
	client_cmd(i, "hud_draw 0");
}

public hud_drawloop(i)
{
	client_cmd(i, "hud_draw 0");
}


public del_emp()
{
	new num, players[32];
	get_players(players, num, "gh");
	for(new a = 0; a < num; a++)
	{
		new i = players[a];
		if(get_user_team(emp_active) != get_user_team(i))
		{
			client_cmd(i, "hud_draw 1");
		}
	}
	emp_active = 0;
}

/*public CurWeapon(id)
{
	if(get_user_team(id) != get_user_team(emp_active) && emp_active)
	{
		//message_begin(MSG_ONE_UNRELIABLE, get_user_msgid("HideWeapon"), _, id); 
		//write_byte(0x29); //(1<<0)|(1<<3)|(1<<5)
		//message_end(); 
	}
}*/


//nuke
public CreateNuke(id)
{
	new num, players[32];
	get_players(players, num, "gh");
	for(new a = 0; a < num; a++)
	{
		new i = players[a];
		set_task(0.0, "nuke_on", i)
		set_task(1.0, "nukeflash", i, _, _, "a", 10)
		set_task(0.0, "nukecd10", i)
		set_task(1.0, "nukecd9", i)
		set_task(2.0, "nukecd8", i)
		set_task(3.0, "nukecd7", i)
		set_task(4.0, "nukecd6", i)
		set_task(5.0, "nukecd5", i)
		set_task(6.0, "nukecd4", i)
		set_task(7.0, "nukecd3", i)
		set_task(8.0, "nukecd2", i)
		set_task(9.0, "nukecd1", i)
		set_task(10.0, "nukecd0", i)
		if(get_user_team(id) != get_user_team(i))
		{	
			if(cs_get_user_team(i) == CS_TEAM_T )
			{
				client_cmd(i, "mp3 play sound/mw/nuke_enemy2.mp3");
			}
			if(cs_get_user_team(i) == CS_TEAM_CT )
			{
				client_cmd(i, "mp3 play sound/mw/nuke_enemy.mp3");
			}
		}
		else
		{
			if(cs_get_user_team(i) == CS_TEAM_T )
			{
				client_cmd(i, "mp3 play sound/mw/nuke_friend2.mp3");
			}
			if(cs_get_user_team(i) == CS_TEAM_CT )
			{
				client_cmd(i, "mp3 play sound/mw/nuke_friend.mp3");
			}
		}
	}
	set_task(10.0,"shakehud");
	set_task(13.5,"del_nuke", id);
	cd_active = id;
	set_task(5.0, "cooldownover")
	nuke_active = id;
}

public shakehud()
{
	new num, players[32];
	get_players(players, num, "gh");
	for(new a = 0; a < num; a++)
	{
		new i = players[a];
		{
			message_begin(MSG_ALL, get_user_msgid("ScreenShake"), {0,0,0}, i);
			write_short(255<<12);
			write_short(6<<12);
			write_short(255<<12);
			message_end();
			
			nukelight(i)
			
			set_pev(i, pev_flags, pev(i, pev_flags) | FL_FROZEN)
			
			set_task(0.2, "StripWeaponsNuke", i, _, _, "a", 100) 
		}
	}
}

public nukelight(i)
{
	acg_drawtga(i, "gfx/nuke/nukeeffect.tga", 255, 255, 255, 255, 0.0, 0.0, 1, FX_FADE, 4.0, 0.0, 0.0, 20.0, 1, 0, 667)
	acg_drawtga(i, "gfx/nuke/nukeeffect2.tga", 255, 255, 255, 255, 0.0, 0.0, 1, FX_FADE, 7.0, 4.0, 0.0, 13.0, 1, 0, 668)
}

public nukelight2(i)
{
	acg_drawtga(i, "gfx/nuke/nukeeffect.tga", 255, 255, 255, 180, 0.0, 0.0, 1, FX_FADE, 4.0, 0.0, 0.0, 20.0, 1, 0, 667)
}

public del_nuke(id)
{
	new num, players[32];
	get_players(players, num, "gh");
	for(new a = 0; a < num; a++)
	{
		new i = players[a];
		
		set_task(0.2, "loopingdeath", id, _, _, "a", 10)
		if(is_user_alive(i))
		{
			set_task(1.0, "nukelight2", i);
			if(get_user_team(id) != get_user_team(i))
			{
				cs_set_user_armor(i, 0, CS_ARMOR_NONE);
				
				//display victory
				
				if(cs_get_user_team(i) == CS_TEAM_T )
				{
					acg_drawtext(i, 0.5, 0.48, "+1500", 255, 198, 42, 200, 0.1, 0.3, 2.0, 1, TS_BORDER, 0, 0, 7)
					acg_drawtext(i, 0.5, 0.70, "Match Bonus: 1500", 255, 198, 42, 200, 0.1, 0.1, 5.0, 1, TS_BORDER, 0, 0, 6)
					client_cmd(i, "mp3 play sound/MW/defeat_nuke.mp3") 
					set_task(0.3, "defeatend", i)
				}
				if(cs_get_user_team(i) == CS_TEAM_CT )
				{
					acg_drawtext(i, 0.5, 0.48, "+1500", 255, 198, 42, 200, 0.1, 0.3, 2.0, 1, TS_BORDER, 0, 0, 7)
					acg_drawtext(i, 0.5, 0.70, "Match Bonus: 1500", 255, 198, 42, 200, 0.1, 0.1, 5.0, 1, TS_BORDER, 0, 0, 6)
					client_cmd(i, "mp3 play sound/MW/defeat_nuke.mp3") 
					set_task(0.3, "defeatend", i)
				}
			}
			else
			{
				set_task(2.5, "task_teamkill", i)
				
				if(cs_get_user_team(i) == CS_TEAM_T )
				{
					acg_drawtext(i, 0.5, 0.48, "+3000", 255, 198, 42, 200, 0.1, 0.3, 2.0, 1, TS_BORDER, 0, 0, 7)
					acg_drawtext(i, 0.5, 0.70, "Match Bonus: 3000", 255, 198, 42, 200, 0.1, 0.1, 5.0, 1, TS_BORDER, 0, 0, 6)
					client_cmd(i, "mp3 play sound/MW/defeat_nuke.mp3") 
					set_task(0.3, "victoryend", i)
				}
				if(cs_get_user_team(i) == CS_TEAM_CT )
				{
					acg_drawtext(i, 0.5, 0.48, "+3000", 255, 198, 42, 200, 0.1, 0.3, 2.0, 1, TS_BORDER, 0, 0, 7)
					acg_drawtext(i, 0.5, 0.70, "Match Bonus: 3000", 255, 198, 42, 200, 0.1, 0.1, 5.0, 1, TS_BORDER, 0, 0, 6)
					client_cmd(i, "mp3 play sound/MW/defeat_nuke.mp3") 
					set_task(0.3, "victoryend", i)
				}
			}
		}
	}
	nuke_player[id] = false;
	max_kills[id] = 0;
}

public loopingdeath(id)
{
	new num, players[32];
	get_players(players, num, "gh");
	for(new a = 0; a < num; a++)
	{
		new i = players[a];
		if(is_user_alive(i))
		{
			if(get_user_team(id) != get_user_team(i))
			{
				UTIL_Kill(id, i, float(get_user_health(i)), DMG_BULLET, 3)
			}
		}
	}
}

public nukegone()
{
	nuke_active = 0;
}

public task_teamkill(i)
{
	user_silentkill(i)
}

//Nuke Countdown
public nuke_on(id)
{
	acg_drawtga(id, "gfx/nuke/nukeon.tga", 255, 255, 255, 255, 0.17, 0.0, 0, FX_NONE, 0.0, 0.0, 0.0, 10.0, 0, 0, 488)
}

public nukeflash(id)
{
	acg_drawtga(id, "gfx/nuke/nukeflash.tga", 255, 255, 255, 255, 0.17, 0.0, 0, FX_FADE, 0.2, 0.2, 0.0, 0.6, 0, 0, 489)
}

public nukecd10(id)
{
	acg_drawtext(id, 0.24, 0.025, "10", 255, 255, 255, 255, 0.1, 0.1, 0.8, 1, TS_SHADOW, 0, 0, 4)
}

public nukecd9(id)
{
	acg_drawtext(id, 0.225, 0.025, "9", 255, 255, 255, 255, 0.1, 0.1, 0.8, 1, TS_SHADOW, 0, 0, 4)
}

public nukecd8(id)
{
	acg_drawtext(id, 0.225, 0.025, "8", 255, 255, 255, 255, 0.1, 0.1, 0.8, 1, TS_SHADOW, 0, 0, 4)
}

public nukecd7(id)
{
	acg_drawtext(id, 0.225, 0.025, "7", 255, 255, 255, 255, 0.1, 0.1, 0.8, 1, TS_SHADOW, 0, 0, 4)
}

public nukecd6(id)
{
	acg_drawtext(id, 0.225, 0.025, "6", 255, 255, 255, 255, 0.1, 0.1, 0.8, 1, TS_SHADOW, 0, 0, 4)
}

public nukecd5(id)
{
	acg_drawtext(id, 0.225, 0.025, "5", 255, 255, 255, 255, 0.1, 0.1, 0.8, 1, TS_SHADOW, 0, 0, 4)
}

public nukecd4(id)
{
	acg_drawtext(id, 0.225, 0.025, "4", 255, 255, 255, 255, 0.1, 0.1, 0.8, 1, TS_SHADOW, 0, 0, 4)
}

public nukecd3(id)
{
	acg_drawtext(id, 0.225, 0.025, "3", 255, 255, 255, 255, 0.1, 0.1, 0.8, 1, TS_SHADOW, 0, 0, 4)
}

public nukecd2(id)
{
	acg_drawtext(id, 0.225, 0.025, "2", 255, 255, 255, 255, 0.1, 0.1, 0.8, 1, TS_SHADOW, 0, 0, 4)
}

public nukecd1(id)
{
	acg_drawtext(id, 0.225, 0.025, "1", 255, 255, 255, 255, 0.1, 0.1, 0.8, 1, TS_SHADOW, 0, 0, 4)
}

public nukecd0(id)
{
	acg_drawtext(id, 0.225, 0.025, "0", 255, 255, 255, 255, 0.1, 0.1, 0.8, 1, TS_SHADOW, 0, 0, 4)
}

//Sentry Gun Notify deployment
public sentryready(id)
{
	acg_drawtga(id, "gfx/killstreaks/sentry/sentry_ready.tga", 255, 255, 255, 255, 0.5, 0.1, 1, FX_FADE, 0.0, 0.4, 0.0, 5.0, 0, ALIGN_BOTTOM, 159)
}

public sentrydeploying(id)
{
	acg_drawtga(id, "gfx/killstreaks/sentry/sentry_deploying.tga", 255, 255, 255, 255, 0.5, 0.1, 1, FX_FADE, 0.0, 0.4, 0.0, 2.0, 0, ALIGN_BOTTOM, 159)
}

public sentrydeployed(id)
{
	acg_drawtga(id, "gfx/killstreaks/sentry/sentry_deployed.tga", 255, 255, 255, 255, 0.5, 0.1, 1, FX_FADE, 0.0, 0.4, 0.0, 2.0, 0, ALIGN_BOTTOM, 159)
}

//stealthbomber
public CreateStealth(id)
{
	new num, players[32];
	get_players(players, num, "gh");
	for(new a = 0; a < num; a++)
	{
		new i = players[a];
		if(get_user_team(id) == get_user_team(i))
		{
			if(cs_get_user_team(i) == CS_TEAM_T )
			{
				client_cmd(i, "spk sound/mw/air_friend2.wav");
				set_task(0.3, "soundjetfunc2", i)
			}
			if(cs_get_user_team(i) == CS_TEAM_CT )
			{
				client_cmd(i, "spk sound/mw/air_friend.wav");
				set_task(0.3, "soundjetfunc2", i)
			}
		}
	}
	set_task(3.0, "carpetbomb", id)
	CreatePlane2(id)
	targetverification(id)
	stealth[id]--;
	
	aerial_active = id;
	set_task(12.0, "aerialover")
}


//nalot
public CreateNalot(id)
{
	new num, players[32];
	get_players(players, num, "gh");
	for(new a = 0; a < num; a++)
	{
		new i = players[a];
		if(get_user_team(id) != get_user_team(i))
		{
			if(cs_get_user_team(i) == CS_TEAM_T )
			{
				client_cmd(i, "spk sound/mw/air_enemy2.wav");
				set_task(0.3, "soundjetfunc", i)
			}
			if(cs_get_user_team(i) == CS_TEAM_CT )
			{
				client_cmd(i, "spk sound/mw/air_enemy.wav");
				set_task(0.3, "soundjetfunc", i)
			}
		}
		else
		{
			if(cs_get_user_team(i) == CS_TEAM_T )
			{
				client_cmd(i, "spk sound/mw/air_friend2.wav");
				set_task(0.3, "soundjetfunc", i)
			}
			if(cs_get_user_team(i) == CS_TEAM_CT )
			{
				client_cmd(i, "spk sound/mw/air_friend.wav");
				set_task(0.3, "soundjetfunc", i)
			}
		}
	}
	set_task(3.0, "startbombing", id)
	CreatePlane(id)
	targetverification(id)
	nalot[id]--;
	
	aerial_active = id;
	set_task(9.0, "aerialover")
}

public soundjetfunc(id)
{
	client_cmd(id, "spk sound/mw/jet_fly1.wav");
}

public startbombing(id)
{
	set_task(2.0, "dropbombs", id, _, _, "a", 3);
}

public dropbombs(id)
{
	set_task(0.1, "CreateBombs", id+997, _, _, "a", 3);
}

public carpetbomb(id)
{
	set_task(0.5, "CreateBombs2", id+998, _, _, "a", 18);
}

public soundjetfunc2(id)
{
	client_cmd(id, "spk sound/mw/jet_fly2.wav");
}
//nalot style
public CreateBombs(taskid)
{	
	new id = (taskid-997);
	if(cs_get_user_team(id) == CS_TEAM_T )
	{
		new radlocation[3];
		OpforOrigin[0] += random_num(-40,40);
		OpforOrigin[1] += random_num(-300,300);
		OpforOrigin[2] += 100;
		
		for(new i=0; i<15; i++) 
		{
			radlocation[0] = OpforOrigin[0]+1*random_num(-250,250); 
			radlocation[1] = OpforOrigin[1]+1*random_num(-250,250); 
			radlocation[2] = OpforOrigin[2]; 
			
			new Float:LocVec[3]; 
			IVecFVec(radlocation, LocVec); 
			create_ent(id, "bomb", "models/p_hegrenade.mdl", 2, 6, LocVec);
		}
	}
	
	if(cs_get_user_team(id) == CS_TEAM_CT )
	{
		new radlocation[3];
		RangerOrigin[0] += random_num(-40,40);
		RangerOrigin[1] += random_num(-300,300);
		RangerOrigin[2] += 100;
		
		for(new i=0; i<15; i++) 
		{
			radlocation[0] = RangerOrigin[0]+1*random_num(-250,250); 
			radlocation[1] = RangerOrigin[1]+1*random_num(-250,250); 
			radlocation[2] = RangerOrigin[2]; 
			
			new Float:LocVec[3]; 
			IVecFVec(radlocation, LocVec); 
			create_ent(id, "bomb", "models/p_hegrenade.mdl", 2, 6, LocVec);
		}
	}
	
}  
//stealthbomber style
public CreateBombs2(taskid)
{	
	new id = (taskid-998);
	if(cs_get_user_team(id) == CS_TEAM_T )
	{
		new radlocation[3];
		OpforOrigin[0] += random_num(-40,40);
		OpforOrigin[1] += random_num(-900,900);
		OpforOrigin[2] += 100;
		
		for(new i=0; i<20; i++) 
		{
			radlocation[0] = OpforOrigin[0]+1*random_num(-300,300); 
			radlocation[1] = OpforOrigin[1]+1*random_num(-300,300); 
			radlocation[2] = OpforOrigin[2]; 
			
			new Float:LocVec[3]; 
			IVecFVec(radlocation, LocVec); 
			create_ent(id, "bomb2", "models/p_hegrenade.mdl", 2, 6, LocVec);
		}
	}
	
	if(cs_get_user_team(id) == CS_TEAM_CT )
	{
		new radlocation[3];
		RangerOrigin[0] += random_num(-40,40);
		RangerOrigin[1] += random_num(-900,900);
		RangerOrigin[2] += 100;
		
		for(new i=0; i<20; i++) 
		{
			radlocation[0] = RangerOrigin[0]+1*random_num(-300,300); 
			radlocation[1] = RangerOrigin[1]+1*random_num(-300,300); 
			radlocation[2] = RangerOrigin[2]; 
			
			new Float:LocVec[3]; 
			IVecFVec(radlocation, LocVec); 
			create_ent(id, "bomb2", "models/p_hegrenade.mdl", 2, 6, LocVec);
		}
	}
	
} 

public CreatePlane(id)
{
	new Float:Origin[3], Float:Angle[3], Float:Velocity[3];
	new Pository[3];
	
	new num, players[32];
	get_players(players, num, "gh");
	for(new a = 0; a < num; a++)
	{
		new i = players[a];
		if(get_user_team(id) != get_user_team(i))
		{
			get_user_origin(id, Pository, 3);
			acg_drawspronradar (i, "jeticon2", 255, 255, 255, Pository, 0, FX_FADE, 9.0, 1.0, 0.0, 12.0, DRAW_ADDITIVE, 364, 1);
		}
		else
		{
			get_user_origin(id, Pository, 3);
			acg_drawspronradar (i, "jeticon", 255, 255, 255, Pository, 0, FX_FADE, 1.0, 1.0, 0.0, 12.0, DRAW_ADDITIVE, 365, 1);
		}
	}

	if(cs_get_user_team(id) == CS_TEAM_T )
	{
		get_user_origin(id, OpforOrigin, 3);
	}
	
	if(cs_get_user_team(id) == CS_TEAM_CT )
	{
		get_user_origin(id, RangerOrigin, 3);
	}
	
	velocity_by_aim(id, 0, Velocity);
	entity_get_vector(id, EV_VEC_origin, Origin);
	entity_get_vector(id, EV_VEC_v_angle, Angle);
	
	Angle[0] = Velocity[2] = 0.0;
	Origin[2] += 10.0;
	
	new ent = create_entity("info_target");
	
	entity_set_string(ent, EV_SZ_classname, "plane");
	
	entity_set_int(ent, EV_INT_solid, SOLID_NOT);
	entity_set_int(ent, EV_INT_movetype, MOVETYPE_TOSS);
	entity_set_edict(ent, EV_ENT_owner, id);
	entity_set_origin(ent, Origin);
	
	//create_ent(id, "plane", "", 2, 8, Origin, ent);
	//create_ent(id, "samolot", "models/cod_plane.mdl", 2, 8, Origin, ent);
	
	entity_set_vector(ent, EV_VEC_velocity, Velocity);
	entity_set_vector(ent, EV_VEC_angles, Angle);
	
	emit_sound(ent, CHAN_AUTO, "mw/jet_fly1.wav", 1.0, ATTN_NORM, 0, PITCH_NORM);
	
	set_task(9.0, "del_plane", ent+5731);
}

public CreatePlane2(id)
{
	new Float:Origin[3], Float:Angle[3], Float:Velocity[3];
	new Pository[3];
	
	new num, players[32];
	get_players(players, num, "gh");
	for(new a = 0; a < num; a++)
	{
		new i = players[a];
		if(get_user_team(id) == get_user_team(i))
		{
			get_user_origin(id, Pository, 3);
			acg_drawspronradar (i, "stealthicon", 255, 255, 255, Pository, 0, FX_FADE, 1.0, 1.0, 0.0, 12.0, DRAW_ADDITIVE, 365, 1);
		}
	}

	if(cs_get_user_team(id) == CS_TEAM_T )
	{
		get_user_origin(id, OpforOrigin, 3);
	}
	
	if(cs_get_user_team(id) == CS_TEAM_CT )
	{
		get_user_origin(id, RangerOrigin, 3);
	}
	velocity_by_aim(id, 0, Velocity);
	entity_get_vector(id, EV_VEC_origin, Origin);
	entity_get_vector(id, EV_VEC_v_angle, Angle);
	
	Angle[0] = Velocity[2] = 0.0;
	Origin[2] += 10.0;
	
	new ent = create_entity("info_target");
	
	entity_set_string(ent, EV_SZ_classname, "plane2");
	
	entity_set_int(ent, EV_INT_solid, SOLID_NOT);
	entity_set_int(ent, EV_INT_movetype, MOVETYPE_TOSS);
	entity_set_edict(ent, EV_ENT_owner, id);
	entity_set_origin(ent, Origin);
	
	//create_ent(id, "plane", "", 2, 8, Origin, ent);
	//create_ent(id, "samolot", "models/cod_plane.mdl", 2, 8, Origin, ent);
	
	entity_set_vector(ent, EV_VEC_velocity, Velocity);
	entity_set_vector(ent, EV_VEC_angles, Angle);
	
	emit_sound(ent, CHAN_AUTO, "mw/jet_fly2.wav", 1.0, ATTN_NORM, 0, PITCH_NORM);
	
	set_task(9.0, "del_plane4", ent+5734);
}


public CreateHeli(id)
{
	new Float:Origin[3], Float:Angle[3], Float:Velocity[3];
	new Pository2[3];
	
	new num, players[32];
	get_players(players, num, "gh");
	for(new a = 0; a < num; a++)
	{
		new i = players[a];
		if(get_user_team(id) != get_user_team(i))
		{
			get_user_origin(id, Pository2, 3);
			acg_drawspronradar (i, "helicon2", 255, 255, 255, Pository2, 0, FX_FADE, 7.0, 1.0, 0.0, 9.0, DRAW_ADDITIVE, 368, 1);
			acg_drawspronradar (i, "packicon2", 255, 255, 255, Pository2, 0, FX_FADE, 9.0, 1.0, 0.0, 14.0, DRAW_ADDITIVE, 358, 0);
		}
		else
		{
			get_user_origin(id, Pository2, 3);
			acg_drawspronradar (i, "helicon", 255, 255, 255, Pository2, 0, FX_FADE, 1.0, 1.0, 0.0, 9.0, DRAW_ADDITIVE, 369, 1);
			acg_drawspronradar (i, "packicon", 255, 255, 255, Pository2, 0, FX_FADE, 9.0, 0.0, 0.0, 14.0, DRAW_ADDITIVE, 359, 0);
		}
	}
	
	
	if(cs_get_user_team(id) == CS_TEAM_T )
	{
		get_user_origin(id, OpforOrigin2, 3);
	}
	if(cs_get_user_team(id) == CS_TEAM_CT )
	{
		get_user_origin(id, RangerOrigin2, 3);
	}
	
	velocity_by_aim(id, 0, Velocity);
	entity_get_vector(id, EV_VEC_origin, Origin);
	entity_get_vector(id, EV_VEC_v_angle, Angle);
	
	Angle[0] = Velocity[2] = 0.0;
	Origin[2] += 10.0;
	
	new ent = create_entity("info_target");
	
	entity_set_string(ent, EV_SZ_classname, "helipack");
	
	entity_set_int(ent, EV_INT_solid, SOLID_NOT);
	entity_set_int(ent, EV_INT_movetype, MOVETYPE_TOSS);
	entity_set_edict(ent, EV_ENT_owner, id);
	entity_set_origin(ent, Origin);
	
	emit_sound(ent, CHAN_AUTO, "mw/heli_fly.wav", 1.0, ATTN_NORM, 0, PITCH_NORM);
	
	//create_ent(id, "helipack", "", 2, 8, Origin, ent);
	//create_ent(id, "samolot1", "models/cod_plane.mdl", 2, 8, Origin, ent);
	
	entity_set_vector(ent, EV_VEC_velocity, Velocity);
	entity_set_vector(ent, EV_VEC_angles, Angle);

	set_task(4.0, "del_plane2", ent+5732);
}

public CreateHeli2(id)
{
	new Float:Origin[3], Float:Angle[3], Float:Velocity[3];
	new Pository2[3];
	
	new num, players[32];
	get_players(players, num, "gh");
	for(new a = 0; a < num; a++)
	{
		new i = players[a];
		if(get_user_team(id) != get_user_team(i))
		{
			get_user_origin(id, Pository2, 3);
			acg_drawspronradar (i, "helicon2", 255, 255, 255, Pository2, 0, FX_FADE, 7.0, 1.0, 0.0, 9.0, DRAW_ADDITIVE, 368, 1);
			acg_drawspronradar (i, "packicon2", 255, 255, 255, Pository2, 0, FX_FADE, 5.0, 1.0, 0.0, 5.0, DRAW_ADDITIVE, 358, 1);
		}
		else
		{
			get_user_origin(id, Pository2, 3);
			acg_drawspronradar (i, "helicon", 255, 255, 255, Pository2, 0, FX_FADE, 1.0, 1.0, 0.0, 9.0, DRAW_ADDITIVE, 369, 1);
			acg_drawspronradar (i, "packicon", 255, 255, 255, Pository2, 0, FX_FADE, 5.0, 0.0, 0.0, 5.0, DRAW_ADDITIVE, 359, 1);
		}
	}
	
	if(cs_get_user_team(id) == CS_TEAM_T )
	{
		get_user_origin(id, OpforOrigin3, 3);
	}
	if(cs_get_user_team(id) == CS_TEAM_CT )
	{
		get_user_origin(id, RangerOrigin3, 3);
	}

	velocity_by_aim(id, 0, Velocity);
	entity_get_vector(id, EV_VEC_origin, Origin);
	entity_get_vector(id, EV_VEC_v_angle, Angle);
	
	Angle[0] = Velocity[2] = 0.0;
	Origin[2] += 10.0;
	
	new ent = create_entity("info_target");
	
	entity_set_string(ent, EV_SZ_classname, "helisent");
	
	entity_set_int(ent, EV_INT_solid, SOLID_NOT);
	entity_set_int(ent, EV_INT_movetype, MOVETYPE_TOSS);
	entity_set_edict(ent, EV_ENT_owner, id);
	entity_set_origin(ent, Origin);
	
	emit_sound(ent, CHAN_AUTO, "mw/heli_fly.wav", 1.0, ATTN_NORM, 0, PITCH_NORM);
	
	//create_ent(id, "helisent", "", 2, 8, Origin, ent);
	//create_ent(id, "samolot2", "models/cod_plane.mdl", 2, 8, Origin, ent);
	
	entity_set_vector(ent, EV_VEC_velocity, Velocity);
	entity_set_vector(ent, EV_VEC_angles, Angle);

	
	set_task(4.0, "del_plane3", ent+5733);
	set_task(4.0, "del_plane3", ent+5733);
}

public del_plane(taskid)
{
	remove_entity(taskid-5731);
}

public del_plane2(taskid)
{
	remove_entity(taskid-5732);
}

public del_plane3(taskid)
{
	remove_entity(taskid-5733);
}

public del_plane4(taskid)
{
	remove_entity(taskid-5734);
}

public touchedbomb(ent, id)
{
	if(!is_valid_ent(ent))
		return PLUGIN_CONTINUE;

	bombs_explode(ent, 200.0, 450.0);
	return PLUGIN_CONTINUE;
}

public touchedbomb2(ent, id)
{
	if(!is_valid_ent(ent))
		return PLUGIN_CONTINUE;

	bombs_explode2(ent, 200.0, 450.0);
	return PLUGIN_CONTINUE;
}

//predator
/*public CreatePredator(id)
{
	new num, players[32];
	get_players(players, num, "gh");
	for(new a = 0; a < num; a++)
	{
		new i = players[a];
		if(get_user_team(id) != get_user_team(i))
			client_cmd(i, "spk sound/mw/predator_enemy.wav");
		else
			client_cmd(i, "spk sound/mw/predator_friend.wav");
	}

	new Float:Origin[3], Float:Angle[3], Float:Velocity[3], ent;
	Velocity[0]+= 1.0;
	Velocity[1]+= 1.0;
	Velocity[2]+= 1.0;
	
	Origin[2] += 120.0;
	
	velocity_by_aim(id, 50, Velocity);
	entity_get_vector(id, EV_VEC_origin, Origin);
	entity_get_vector(id, EV_VEC_v_angle, Angle);
	
	Angle[0] *= -1.0;
	
	create_ent(id, "predator", "models/cod_predator.mdl", 2, 5, Origin, ent);
	
	entity_set_vector(ent, EV_VEC_velocity, Velocity);
	entity_set_vector(ent, EV_VEC_angles, Angle);
	
	entity_set_origin(ent, Origin);
	
	message_begin(MSG_BROADCAST, SVC_TEMPENTITY);
	write_byte(TE_BEAMFOLLOW);
	write_short(ent);
	write_short(cache_trail);
	write_byte(10);
	write_byte(5);
	write_byte(205);
	write_byte(237);
	write_byte(163);
	write_byte(200);
	message_end();
	
	predator[id] = false;
	
	attach_view(id, ent);
	//user_controll[id] = ent;

	cd_active = id;
	set_task(2.0, "cooldownover")
}*/

public touchedpredator(ent, id)
{
	if(!is_valid_ent(ent))
		return PLUGIN_CONTINUE;
	
	new owner = entity_get_edict(ent, EV_ENT_owner);
	
	set_task(0.0, "fuzzscreen", owner)
	unfreezemovement(owner)
	predator_explode(ent, 360.0, 700.0);
	//attach_view(id, owner);
	return PLUGIN_CONTINUE;
}

public CreatePredator2(id)
{
	set_task(5.0, "aerialover")
	new num, players[32];
	get_players(players, num, "gh");
	for(new a = 0; a < num; a++)
	{
		new i = players[a];
		if(get_user_team(id) != get_user_team(i))
		{
			if(cs_get_user_team(i) == CS_TEAM_T )
			{
				client_cmd(i, "spk sound/mw/predator_enemy2.wav");
				set_task(0.5, "sound_predfunc", i);
			}
			if(cs_get_user_team(i) == CS_TEAM_CT )
			{
				client_cmd(i, "spk sound/mw/predator_enemy.wav");
				set_task(0.5, "sound_predfunc", i);
			}
		}
		else
		{
			if(cs_get_user_team(i) == CS_TEAM_T )
			{
				client_cmd(i, "spk sound/mw/predator_friend2.wav");
				set_task(0.5, "sound_predfunc", i);
			}
			if(cs_get_user_team(i) == CS_TEAM_CT )
			{
				client_cmd(i, "spk sound/mw/predator_friend.wav");
				set_task(0.5, "sound_predfunc", i);
			}
		}
	}
	
	if(!is_user_bot(id))
	{
		freezemovement(id)
		set_task(6.0, "unfreezemovement", id)
	}
	
	acg_drawtga(id, "gfx/killstreaks/predator/laptop.tga", 255, 255, 255, 255, 0.5, 0.5, 0, FX_FADE, 0.3, 0.0, 0.0, 0.5, 1, ALIGN_BOTTOM, 898)
	//native acg_drawtga(id, const szTGA[], red, green, blue, alpha, Float:x, Float:y, center, effects, Float:fadeintime, Float:fadeouttime, Float:fxtime, Float:holdtime, bfullscreen, align, channel)	
	set_task(0.5, "laptopscreen", id)
	set_task(2.0, "agmscreen2", id)
	set_task(3.5, "agmscreen3", id)
	set_task(4.0, "targetlock_display", id)
	
	set_task(5.0, "target_lock", id+998)
	
	aerial_active = id;
	
	predator[id]--;
}

public freezemovement(id)
{
	client_cmd(id, "+duck")
	client_cmd(id, "+speed")
}

public unfreezemovement(id)
{
	client_cmd(id, "-duck")
	client_cmd(id, "-speed")
}

//thanks to bugsy
enum Teams
{
    Team_Unassigned,
    Team_T,
    Team_CT,
    Team_Spectator
}

predator_target(id)
{
	new iPlayers[32], iPnum
	get_players(iPlayers, iPnum, "ae", Teams:get_user_team( id ) == Team_T ? "CT" : "TERRORIST")

	return iPnum ? iPlayers[random(iPnum)] : 0;
}

public sound_predfunc(id)
{
	client_cmd(id, "spk sound/mw/predator_sound.wav");
}

public target_lock(taskid)
{	
	new id = (taskid-998);
	new ent = create_entity("info_target");
	new iPlayer = predator_target(id)
	new AerialCoords[3];

	
	if(is_user_alive(iPlayer))
	{
		get_user_origin(iPlayer, AerialCoords);
		AerialCoords[2] += 350
		
		new num, players[32];
		get_players(players, num, "gh");
		for(new a = 0; a < num; a++)
		{
			new i = players[a];
			if(get_user_team(id) != get_user_team(i))
			{
				acg_drawspronradar (i, "predicon2", 255, 255, 255, AerialCoords, 0, FX_FADE, 1.0, 1.0, 0.0, 4.0, DRAW_ADDITIVE, 362, 1);
			}
			else
			{
				acg_drawspronradar (i, "predicon", 255, 255, 255, AerialCoords, 0, FX_FADE, 1.0, 1.0, 0.0, 4.0, DRAW_ADDITIVE, 363, 1);
			}
		}
		
		new Float:LocVec[3], Float:fAngles[3]; 
		IVecFVec(AerialCoords, LocVec); 
		
		entity_set_string(ent, EV_SZ_classname, "predator");
		
		entity_set_model(ent, "models/cod_predator.mdl");
		
		entity_set_int(ent, EV_INT_solid, SOLID_BBOX);
		entity_set_int(ent, EV_INT_movetype, MOVETYPE_TOSS);
		
		entity_set_edict(ent, EV_ENT_owner, id);
		
		entity_set_origin(ent, LocVec);
		
		message_begin(MSG_BROADCAST, SVC_TEMPENTITY);
		write_byte(TE_BEAMFOLLOW);
		write_short(ent);
		write_short(cache_trail);
		write_byte(10);
		write_byte(5);
		write_byte(205);
		write_byte(237);
		write_byte(163);
		write_byte(200);
		message_end();
		
		fAngles[0] *= 1.0;
		
		entity_get_vector(ent, EV_VEC_v_angle, fAngles)
		entity_set_vector(ent, EV_VEC_v_angle, fAngles)
		
		//attach_view(id, ent);
	}
}

public targetlock_display(id)
{
		acg_drawtga(id, "gfx/killstreaks/predator/targetlock.tga", 255, 255, 255, 255, 0.5, 0.1, 1, FX_FADE, 0.0, 0.4, 0.0, 2.0, 0, ALIGN_BOTTOM, 910)
		acg_drawtga(id, "gfx/killstreaks/predator/agmscreen4.tga", 255, 255, 255, 255, 0.0, 0.0, 1, FX_NONE, 0.1, 0.0, 0.0, 2.0, 1, 0, 898)
}

public laptop_end(id)
{
	if(is_user_alive(id))
	{
		acg_drawtga(id, "gfx/killstreaks/predator/laptop.tga", 255, 255, 255, 255, 0.5, 0.5, 0, FX_FADE, 0.0, 0.3, 0.0, 0.5, 1, ALIGN_BOTTOM, 898)
	}
}

public laptopscreen(id)
{
	client_cmd(id, "spk sound/mw/predator_sound.wav");
	Display_Fade(id,(1<<12),(5<<12),(1<<16),40, 40, 40, 255);
	acg_drawtga(id, "gfx/killstreaks/predator/agmscreen.tga", 255, 255, 255, 255, 0.0, 0.0, 1, FX_NONE, 0.2, 0.0, 0.0, 3.0, 1, 0, 895)
	acg_drawtga(id, "gfx/killstreaks/predator/predatorhud.tga", 255, 255, 255, 255, 0.5, 0.5, 1, FX_FADE, 0.0, 0.2, 0.0, 5.5, 0, 0, 899)
	acg_drawtga(id, "gfx/killstreaks/predator/scanningtargets.tga", 255, 255, 255, 255, 0.5, 0.1, 1, FX_FADE, 0.0, 0.4, 0.0, 5.5, 0, ALIGN_BOTTOM, 910)
}


public agmscreen2(id)
{
	acg_drawtga(id, "gfx/killstreaks/predator/agmscreen2.tga", 255, 255, 255, 255, 0.0, 0.0, 1, FX_NONE, 0.2, 0.0, 0.0, 1.5, 1, 0, 896)
}

public agmscreen3(id)
{
	acg_drawtga(id, "gfx/killstreaks/predator/agmscreen3.tga", 255, 255, 255, 255, 0.0, 0.0, 1, FX_NONE, 0.2, 0.0, 0.0, 1.5, 1, 0, 897)
}

public fuzzscreen(id)
{
	if(is_user_alive(id))
	{
		set_task(0.5, "laptop_end", id);
	}
	client_cmd(id, "spk sound/mw/fuzz_sound.wav");
	acg_drawtga(id, "gfx/killstreaks/predator/fuzzscreen.tga", 255, 255, 255, 255, 0.0, 0.0, 1, FX_NONE, 0.0, 0.0, 0.0, 0.5, 1, 0, 904);
}

//sentry gun
public CreateSentry(id) 
{
	//if(!(entity_get_int(id, EV_INT_flags) & FL_ONGROUND)) 
	//return;

	new entlist[3];
	if(find_sphere_class(id, "func_bomb_target", 650.0, entlist, 2))
	{
		client_print(id, print_chat, "You can't place a Sentry near a Bombsite.");
		return;
	}
	if(find_sphere_class(id, "func_buyzone", 650.0, entlist, 2))
	{
		client_print(id, print_chat, "You can't place a Sentry near a Buyzone.");
		return;
	}
	
	
	new num, players[32], SentryCoords[3], Float:Origin[3];
	get_players(players, num, "gh");
	for(new a = 0; a < num; a++)
	{
		new i = players[a];
		if(get_user_team(id) != get_user_team(i))
		{
			get_user_origin(id, SentryCoords);
			acg_drawspronradar (i, "sentricon2", 255, 255, 255, SentryCoords, 0, FX_FADE, 5.0, 1.0, 0.0, 58.0, DRAW_ADDITIVE, 360, 0);
		}
		else
		{
			get_user_origin(id, SentryCoords);
			acg_drawspronradar (i, "sentricon", 255, 255, 255, SentryCoords, 0, FX_FADE, 1.0, 1.0, 0.0, 58.0, DRAW_ADDITIVE, 361, 0);
		}
	}
	
	
	entity_get_vector(id, EV_VEC_origin, Origin);
	Origin[2] += 120.0;
	
	new health[12], ent = create_entity("func_breakable");
	get_cvar_string("ks_hpsentry",health, charsmax(health));
	
	DispatchKeyValue(ent, "health", health);
	DispatchKeyValue(ent, "material", "6");
	
	entity_set_string(ent, EV_SZ_classname, "sentry");
	entity_set_model(ent, "models/cod_sentrygun.mdl");
	
	entity_set_float(ent, EV_FL_takedamage, DAMAGE_YES);
	
	entity_set_size(ent, Float:{-16.0, -16.0, 0.0}, Float:{16.0, 16.0, 48.0});
	
	entity_set_origin(ent, Origin);
	entity_set_int(ent, EV_INT_solid, SOLID_SLIDEBOX);
	entity_set_int(ent, EV_INT_movetype, MOVETYPE_TOSS);
	entity_set_int(ent, EV_INT_iuser2, id);
	entity_set_vector(ent, EV_VEC_angles, Float:{0.0, 0.0, 0.0});
	entity_set_byte(ent, EV_BYTE_controller2, 127);

	entity_set_float(ent, EV_FL_nextthink, get_gametime()+1.0);
	client_cmd(id, "spk sound/mw/plant.wav")
	
	
	set_task(60.0, "del_sentry", ent);
	set_task(60.0, "del_sentricon", id)
}



public SentryThink(ent)
{
	if(!is_valid_ent(ent)) 
		return PLUGIN_CONTINUE;
	
	new Float:SentryOrigin[3], Float:closestOrigin[3];
	entity_get_vector(ent, EV_VEC_origin, SentryOrigin);

	new id = entity_get_int(ent, EV_INT_iuser2);
	new target = entity_get_edict(ent, EV_ENT_euser1);
	new firemods = entity_get_int(ent, EV_INT_iuser1);
	
	if(firemods)
	{ 
		if(/*ExecuteHam(Ham_FVisible, target, ent)*/fm_is_ent_visible(target, ent) && is_user_alive(target)) 
		{
			if(UTIL_In_FOV(target,ent))
			{
				goto fireoff;
			}
			
			new Float:TargetOrigin[3];
			entity_get_vector(target, EV_VEC_origin, TargetOrigin);
				
			emit_sound(ent, CHAN_AUTO, "mw/firemw.wav", 0.8, ATTN_NORM, 0, PITCH_NORM);
			sentry_turntotarget(ent, SentryOrigin, TargetOrigin);
				
			new Float:hitRatio = random_float(0.0, 1.0) - 0.40;
			if(hitRatio <= 0.0)
			{
				UTIL_Kill(id, target, random_float(8.0, 17.0), DMG_BULLET, 1);
				
				message_begin(MSG_BROADCAST, SVC_TEMPENTITY);
				write_byte(TE_TRACER);
				write_coord(floatround(SentryOrigin[0]));
				write_coord(floatround(SentryOrigin[1]));
				write_coord(floatround(SentryOrigin[2]));
				write_coord(floatround(TargetOrigin[0]));
				write_coord(floatround(TargetOrigin[1]));
				write_coord(floatround(TargetOrigin[2]));
				message_end();
			}
			entity_set_float(ent, EV_FL_nextthink, get_gametime()+0.1);
			return PLUGIN_CONTINUE;
		}
		else
		{
fireoff:
			firemods = 0;
			entity_set_int(ent, EV_INT_iuser1, 0);
			entity_set_edict(ent, EV_ENT_euser1, 0);
			emit_sound(ent, CHAN_AUTO, "mw/sentrygun_stops.wav", 1.0, ATTN_NORM, 0, PITCH_NORM);
			
			entity_set_float(ent, EV_FL_nextthink, get_gametime()+1.0);
			return PLUGIN_CONTINUE;
		}
	}

	new closestTarget = getClosestPlayer(ent)
	if(closestTarget)
	{
		emit_sound(ent, CHAN_AUTO, "mw/sentrygun_starts.wav", 1.0, ATTN_NORM, 0, PITCH_NORM);
		entity_get_vector(closestTarget, EV_VEC_origin, closestOrigin);
		sentry_turntotarget(ent, SentryOrigin, closestOrigin);
		
		entity_set_int(ent, EV_INT_iuser1, 1);
		entity_set_edict(ent, EV_ENT_euser1, closestTarget);
		
		entity_set_float(ent, EV_FL_nextthink, get_gametime()+1.0);
		return PLUGIN_CONTINUE;
	}

	if(!firemods)
	{
		new controler1 = entity_get_byte(ent, EV_BYTE_controller1)+1;
		if(controler1 > 255)
			controler1 = 0;
		entity_set_byte(ent, EV_BYTE_controller1, controler1);
		
		new controler2 = entity_get_byte(ent, EV_BYTE_controller2);
		if(controler2 > 127 || controler2 < 127)
			entity_set_byte(ent, EV_BYTE_controller2, 127);
			
		entity_set_float(ent, EV_FL_nextthink, get_gametime()+0.05);
	}
	return PLUGIN_CONTINUE
}

public sentry_turntotarget(ent, Float:sentryOrigin[3], Float:closestOrigin[3]) 
{
	new newTrip, Float:newAngle = floatatan(((closestOrigin[1]-sentryOrigin[1])/(closestOrigin[0]-sentryOrigin[0])), radian) * 57.2957795;

	if(closestOrigin[0] < sentryOrigin[0])
		newAngle += 180.0;
	if(newAngle < 0.0)
		newAngle += 360.0;
	
	sentryOrigin[2] += 35.0
	if(closestOrigin[2] > sentryOrigin[2])
		newTrip = 0;
	if(closestOrigin[2] < sentryOrigin[2])
		newTrip = 255;
	if(closestOrigin[2] == sentryOrigin[2])
		newTrip = 127;
		
	entity_set_byte(ent, EV_BYTE_controller1,floatround(newAngle*0.70833));
	entity_set_byte(ent, EV_BYTE_controller2, newTrip);
	entity_set_byte(ent, EV_BYTE_controller3, entity_get_byte(ent, EV_BYTE_controller3)+20>255? 0: entity_get_byte(ent, EV_BYTE_controller3)+20);
}

public TakeDamage(ent, idinflictor, attacker, Float:damage, damagebits)
{
	if(!is_user_alive(attacker))
		return HAM_IGNORED;
	
	new classname[32];
	entity_get_string(ent, EV_SZ_classname, classname, 31);
	
	if(equal(classname, "sentry")) 
	{
		new id = entity_get_int(ent, EV_INT_iuser2);
		if(get_user_team(attacker) == get_user_team(id))
			return HAM_SUPERCEDE;

		if(damage >= entity_get_float(ent, EV_FL_health))
		{
			new Float:Origin[3];
			entity_get_vector(ent, EV_VEC_origin, Origin);	
			new entlist[33];
			new numfound = find_sphere_class(ent, "player", 190.0, entlist, 32);
			
			for(new i=0; i < numfound; i++)
			{		
				new pid = entlist[i];
				
				if(!is_user_alive(pid) || get_user_team(id) == get_user_team(pid))
					continue;
				UTIL_Kill(id, pid, 70.0, (1<<24));
			}
			client_cmd(id, "spk sound/mw/sentrygun_gone.wav");
			Sprite_Blast(Origin);
			//remove_entity(ent); //how to give it to crash because the server immediately removes sentry guns
			set_task(1.0, "del_sentry", ent); //how not to give it as a sentry and being shot
			set_task(0.1, "del_sentricon", ent)
		}
	}
	return HAM_IGNORED;
}

public del_sentry(ent)
{
	remove_entity(ent);
}

public del_sentricon(ent)
{
	new num, players[32], SentryCoords[3];
	get_players(players, num, "gh");
	for(new a = 0; a < num; a++)
	{
		new i = players[a];
		acg_drawspronradar (i, "sentricon2", 0, 0, 0, SentryCoords, 0, FX_FADE, 0.0, 0.0, 0.0, 0.1, DRAW_ADDITIVE, 360, 0);
		acg_drawspronradar (i, "sentricon", 0, 0, 0, SentryCoords, 0, FX_FADE, 0.0, 0.0, 0.0, 0.1, DRAW_ADDITIVE, 361, 0);
	}
}

//wybuch, zadaje=from(damage?), promien(radius)
bombs_explode(ent, Float:zadaje, Float:promien)
{
	if(!is_valid_ent(ent)) 
		return;
	
	new attacker = entity_get_edict(ent, EV_ENT_owner);
	
	new Float:entOrigin[3], Float:fDamage, Float:Origin[3];
	entity_get_vector(ent, EV_VEC_origin, entOrigin);
	entOrigin[2] += 1.0;
	
	new entlist[33];
	new numfound = find_sphere_class(ent, "player", promien, entlist, 32);	
	for(new i=0; i < numfound; i++)
	{		
		new victim = entlist[i];
		
		Display_Shake(victim,(1<<14),(1<<14),(1<<14))	
		
		if(is_user_alive(victim))
		{
			//acg_drawtga(victim, "gfx/bloodscreen/explosionblur.tga", 255, 255, 255, 255, 0.0, 0.0, 1, FX_FADE, 0.0, 0.5, 0.0, 2.0, 1, 0, 665);
			new Float:fVec[3];
			fVec[0] = random_float(PA_LOW , PA_HIGH);
			fVec[1] = random_float(PA_LOW , PA_HIGH);
			fVec[2] = random_float(PA_LOW , PA_HIGH);
			entity_set_vector(victim , EV_VEC_punchangle , fVec);
		}
		
		//get_user_team determines TK or not
		if(!is_user_alive(victim) || get_user_team(attacker) == get_user_team(victim))
			continue;

		
		entity_get_vector(victim, EV_VEC_origin, Origin);
		fDamage = zadaje - floatmul(zadaje, floatdiv(get_distance_f(Origin, entOrigin), promien));
		fDamage *= estimate_take_hurt(entOrigin, victim, 0);
		if(fDamage>0.0)
			UTIL_Kill(attacker, victim, fDamage, DMG_BULLET, 4);
		
	
	}
	Strike_Blast(entOrigin);
	remove_entity(ent);
}

bombs_explode2(ent, Float:zadaje, Float:promien)
{
	if(!is_valid_ent(ent)) 
		return;
	
	new attacker = entity_get_edict(ent, EV_ENT_owner);
	
	new Float:entOrigin[3], Float:fDamage, Float:Origin[3];
	entity_get_vector(ent, EV_VEC_origin, entOrigin);
	entOrigin[2] += 1.0;
	
	new entlist[33];
	new numfound = find_sphere_class(ent, "player", promien, entlist, 32);	
	for(new i=0; i < numfound; i++)
	{		
		new victim = entlist[i];
		
		Display_Shake(victim,(255<<12),(12<<12),(255<<12))

		client_cmd(victim, "volume 0.0");
		set_task(5.0, "volume_up_1", victim)
		set_task(0.1, "force_walk", victim, _, _, "a", 55)
		set_task(3.2, "remove_force_walk", victim, _, _, "a", 3)
		
		//explosionblur
		if(is_user_alive(victim))
		{
			acg_drawtga(victim, "gfx/bloodscreen/explosionblur.tga", 255, 255, 255, 255, 0.0, 0.0, 1, FX_FADE, 0.0, 0.5, 0.0, 6.0, 1, 0, 665);
			new Float:fVec[3];
			fVec[0] = random_float(PA_LOW , PA_HIGH);
			fVec[1] = random_float(PA_LOW , PA_HIGH);
			fVec[2] = random_float(PA_LOW , PA_HIGH);
			entity_set_vector(victim , EV_VEC_punchangle , fVec);
		}
		
		//get_user_team determines TK or not
		if(!is_user_alive(victim) || get_user_team(attacker) == get_user_team(victim))
			continue;

		
		entity_get_vector(victim, EV_VEC_origin, Origin);
		fDamage = zadaje - floatmul(zadaje, floatdiv(get_distance_f(Origin, entOrigin), promien));
		fDamage *= estimate_take_hurt(entOrigin, victim, 0);
		if(fDamage>0.0)
			UTIL_Kill(attacker, victim, fDamage, DMG_BULLET, 4);
	}
	Sprite_Blast(entOrigin);
	remove_entity(ent);
}

public force_walk(id)
{
	client_cmd(id, "+speed");
}

public remove_force_walk(id)
{
	client_cmd(id, "-speed");
}

predator_explode(ent, Float:zadaje, Float:promien)
{
	if(!is_valid_ent(ent)) 
		return;
	
	new attacker = entity_get_edict(ent, EV_ENT_owner);
	
	new Float:entOrigin[3], Float:fDamage, Float:Origin[3];
	entity_get_vector(ent, EV_VEC_origin, entOrigin);
	entOrigin[2] += 1.0;
	
	new entlist[33];
	new numfound = find_sphere_class(ent, "player", promien, entlist, 32);	
	for(new i=0; i < numfound; i++)
	{
		new victim = entlist[i];
		
		Display_Shake(victim,(1<<14),(1<<14),(1<<14))

		client_cmd(victim, "volume 0.0");
		set_task(1.0, "volume_up_1", victim)
		
		//explosionblur
		if(is_user_alive(victim))
		{
			new Float:fVec[3];
			fVec[0] = random_float(PA_LOW , PA_HIGH);
			fVec[1] = random_float(PA_LOW , PA_HIGH);
			fVec[2] = random_float(PA_LOW , PA_HIGH);
			entity_set_vector(victim , EV_VEC_punchangle , fVec);
			acg_drawtga(victim, "gfx/bloodscreen/explosionblur.tga", 255, 255, 255, 255, 0.0, 0.0, 1, FX_FADE, 0.0, 0.5, 0.0, 4.0, 1, 0, 665)
		}
		
		//determine tk
		if(!is_user_alive(victim) || get_user_team(attacker) == get_user_team(victim))
			continue;
			
		entity_get_vector(victim, EV_VEC_origin, Origin);
		fDamage = zadaje - floatmul(zadaje, floatdiv(get_distance_f(Origin, entOrigin), promien));
		fDamage *= estimate_take_hurt(entOrigin, victim, 0);
		if(fDamage>0.0)
			UTIL_Kill(attacker, victim, fDamage, DMG_BULLET, 2);


	}
	Sprite_Blast2(entOrigin);
	Smoke_Blast(entOrigin);
	remove_entity(ent);
}


public message_DeathMsg()
{
	new killer = get_msg_arg_int(1);
	if(MainKiller[0] & (1<<killer))
	{
		set_msg_arg_string(4, "blank");
		return PLUGIN_CONTINUE;
	}
	if(MainKiller[1] & (1<<killer))
	{
		set_msg_arg_string(4, "sentry");
		return PLUGIN_CONTINUE;
	}
	if(MainKiller[2] & (1<<killer))
	{
		set_msg_arg_string(4, "predator");
		return PLUGIN_CONTINUE;
	}
	if(MainKiller[3] & (1<<killer))
	{
		set_msg_arg_string(4, "nuke");
		return PLUGIN_CONTINUE;
	}
	if(MainKiller[4] & (1<<killer))
	{
		set_msg_arg_string(4, "airstrike");
		return PLUGIN_CONTINUE;
	}
	return PLUGIN_CONTINUE;
}

public cooldownover()
{
	cd_active = 0;
}

public aerialover()
{
	aerial_active = 0;
}

stock create_ent(id, szName[], szModel[], iSolid, iMovetype, Float:fOrigin[3], &ent=-1)
{
	new ent1 = create_entity("info_target");
	entity_set_string(ent1, EV_SZ_classname, szName);
	entity_set_model(ent1, szModel);
	entity_set_int(ent1, EV_INT_solid, iSolid);
	entity_set_int(ent1, EV_INT_movetype, iMovetype);
	entity_set_edict(ent1, EV_ENT_owner, id);
	entity_set_origin(ent1, fOrigin);

	
	if(ent != -1)
		ent = ent1;
}

stock Strike_Blast(Float:iOrigin[3])
{
	message_begin(MSG_BROADCAST,SVC_TEMPENTITY);
	write_byte(TE_EXPLOSION);
	write_coord(floatround(iOrigin[0]));
	write_coord(floatround(iOrigin[1])); 
	write_coord(floatround(iOrigin[2]));
	write_short(strike_blast);
	write_byte(32);
	write_byte(20); 
	write_byte(0);
	message_end();
}

stock Sprite_Blast(Float:iOrigin[3])
{
	message_begin(MSG_BROADCAST,SVC_TEMPENTITY);
	write_byte(TE_EXPLOSION);
	write_coord(floatround(iOrigin[0]));
	write_coord(floatround(iOrigin[1])); 
	write_coord(floatround(iOrigin[2]));
	write_short(sprite_blast);
	write_byte(32);
	write_byte(20); 
	write_byte(0);
	message_end();
}

stock Sprite_Blast2(Float:iOrigin[3])
{
	message_begin(MSG_BROADCAST,SVC_TEMPENTITY);
	write_byte(TE_EXPLOSION);
	write_coord(floatround(iOrigin[0]));
	write_coord(floatround(iOrigin[1])); 
	write_coord(floatround(iOrigin[2]));
	write_short(predator_blast);
	write_byte(32);
	write_byte(20); 
	write_byte(0);
	message_end();
}

stock Smoke_Blast(Float:iOrigin[3])
{
	message_begin(MSG_BROADCAST,SVC_TEMPENTITY);
	write_byte(TE_EXPLOSION);
	write_coord(floatround(iOrigin[0]));
	write_coord(floatround(iOrigin[1])); 
	write_coord(floatround(iOrigin[2]));
	write_short(smoke_blast);
	write_byte(32);
	write_byte(20); 
	write_byte(0);
	message_end();
}

stock Float:estimate_take_hurt(Float:fPoint[3], ent, ignored) 
{
	new Float:fFraction, Float:fOrigin[3], tr;
	entity_get_vector(ent, EV_VEC_origin, fOrigin);
	engfunc(EngFunc_TraceLine, fPoint, fOrigin, DONT_IGNORE_MONSTERS, ignored, tr);
	get_tr2(tr, TR_flFraction, fFraction);
	if(fFraction == 1.0 || get_tr2(tr, TR_pHit) == ent)
		return 1.0;
	return 0.6;
}

stock bartime(id, number)
{
	message_begin(MSG_ONE, get_user_msgid("BarTime"), _, id);
	write_short(number);
	message_end();	
}

stock Display_Fade(id,duration,holdtime,fadetype,red,green,blue,alpha)
{
	message_begin(MSG_ONE, get_user_msgid("ScreenFade"),{0,0,0},id);
	write_short(duration);
	write_short(holdtime);
	write_short(fadetype);
	write_byte(red);
	write_byte(green);
	write_byte(blue);
	write_byte(alpha);
	message_end();
}

stock Display_Shake(id,amplitude,duration,frequency)
{
	message_begin(MSG_ONE, get_user_msgid("ScreenShake"),{0,0,0},id);
	write_short(amplitude);
	write_short(duration);
	write_short(frequency);
	message_end();
}

stock find_drop_pack(id, const class[])
{
	new Float:origin[3], classname[32], ent;
	entity_get_vector(id, EV_VEC_origin, origin);
	
	while((ent = find_ent_in_sphere(ent, origin, 75.0)) != 0) 
	{
		entity_get_string(ent, EV_SZ_classname, classname, 31);
		if(equali(classname, class))
			return ent;
	}
	return 0;
}

stock print_info(id, const ks_name[], const ks_usage[] = "s")
{
	new ks_user[64];
	get_user_name(id, ks_user, 63);
	client_print(0, print_chat, "[KillStreak] %s i%s used by %s", ks_name, ks_usage, ks_user);
}
	
stock UTIL_Kill(attacker, target, Float:damage, damagebits, ile=0)
{
	MainKiller[ile] |= (1<<attacker);
	ExecuteHam(Ham_TakeDamage, target, attacker, attacker, damage, damagebits);
	MainKiller[ile] &= ~(1<<attacker);
}
	
stock getClosestPlayer(ent)
{
	new iClosestPlayer = 0, Float:flClosestDist = MAX_DIST, Float:flDistanse, Float:fOrigin[2][3];
	new num, players[32];
	get_players(players, num, "gh")
	for(new a = 0; a < num; a++)
	{
		new i = players[a];
		if(!is_user_connected(i) || !is_user_alive(i) || /*!ExecuteHam(Ham_FVisible, i, ent)*/!fm_is_ent_visible(i, ent) || get_user_team(i) == get_user_team(entity_get_int(ent, EV_INT_iuser2)))
			continue;
		
		if(UTIL_In_FOV(i, ent))
			continue;
		
		entity_get_vector(i, EV_VEC_origin, fOrigin[0]);
		entity_get_vector(ent, EV_VEC_origin, fOrigin[1]);
		
		flDistanse = get_distance_f(fOrigin[0], fOrigin[1]);
		
		if(flDistanse <= flClosestDist)
		{
			iClosestPlayer = i;
			flClosestDist = flDistanse;
		}
	}
	return iClosestPlayer;
}

stock bool:UTIL_In_FOV(id,ent)
{
	if((get_pdata_int(id, 510) & (1<<16)) && (Find_Angle(id, ent) > 0.0))
		return true;
	return false;
}

stock Float:Find_Angle(id, target)
{
	new Float:Origin[3], Float:TargetOrigin[3];
	pev(id,pev_origin, Origin);
	pev(target,pev_origin,TargetOrigin);
	
	new Float:Angles[3], Float:vec2LOS[3];
	pev(id,pev_angles, Angles);
	
	xs_vec_sub(TargetOrigin, Origin, vec2LOS);
	vec2LOS[2] = 0.0;
	
	new Float:veclength = vector_length(vec2LOS);
	if (veclength <= 0.0)
		vec2LOS[0] = vec2LOS[1] = 0.0;
	else
	{
		new Float:flLen = 1.0 / veclength;
		vec2LOS[0] = vec2LOS[0]*flLen;
		vec2LOS[1] = vec2LOS[1]*flLen;
	}
	engfunc(EngFunc_MakeVectors, Angles);
	
	new Float:v_forward[3];
	get_global_vector(GL_v_forward, v_forward);
	
	new Float:flDot = vec2LOS[0]*v_forward[0]+vec2LOS[1]*v_forward[1];
	if(flDot > 0.5)
		return flDot;
	
	return 0.0;
}

stock bool:fm_is_ent_visible(index, entity, ignoremonsters = 0) {
	new Float:start[3], Float:dest[3];
	pev(index, pev_origin, start);
	pev(index, pev_view_ofs, dest);
	xs_vec_add(start, dest, start);

	pev(entity, pev_origin, dest);
	engfunc(EngFunc_TraceLine, start, dest, ignoremonsters, index, 0);

	new Float:fraction;
	get_tr2(0, TR_flFraction, fraction);
	if (fraction == 1.0 || get_tr2(0, TR_pHit) == entity)
		return true;

	return false;
}

public fw_touch(touched, weapon)
{
	if (!pev_valid(weapon)) return FMRES_IGNORED
	
	static class[32]
	pev(weapon, pev_classname, class, 31)
	
	if (equal(class, "weaponbox") || equal(class, "weapon_shield") || equal(class, "grenade") || equal(class, "item_thighpack") || equal(class, "pack") || equal(class, "sentpack"))
	{
		lie_flat(weapon)
	}
	
	return FMRES_IGNORED
}

//lieflat by nomexous
stock lie_flat(ent)
{
	// If the entity is not on the ground, don't bother continuing.
	if (pev(ent, pev_flags) & ~FL_ONGROUND) return
	
	// I decided to make all the variables static; suprisingly, the touch function can be called upwards of 5 times per drop.
	// I dunno why, but I suspect it's because the item "skips" on the ground.
	static Float:origin[3], Float:traceto[3], trace = 0, Float:fraction, Float:angles[3], Float:angles2[3]
	
	pev(ent, pev_origin, origin)
	pev(ent, pev_angles, angles)
	
	// We want to trace downwards 10 units.
	xs_vec_sub(origin, Float:{0.0, 0.0, 10.0}, traceto)
	
	engfunc(EngFunc_TraceLine, origin, traceto, IGNORE_MONSTERS, ent, trace)
	
	// Most likely if the entity has the FL_ONGROUND flag, flFraction will be less than 1.0, but we need to make sure.
	get_tr2(trace, TR_flFraction, fraction)
	if (fraction == 1.0) return
	
	// Normally, once an item is dropped, the X and Y-axis rotations (aka roll and pitch) are set to 0, making them lie "flat."
	// We find the forward vector: the direction the ent is facing before we mess with its angles.
	static Float:original_forward[3]
	angle_vector(angles, ANGLEVECTOR_FORWARD, original_forward)
	
	// If your head was an entity, no matter which direction you face, these vectors would be sticking out of your right ear,
	// up out the top of your head, and forward out from your nose.
	static Float:right[3], Float:up[3], Float:fwd[3]
	
	// The plane's normal line will be our new ANGLEVECTOR_UP.
	get_tr2(trace, TR_vecPlaneNormal, up)
	
	// This checks to see if the ground is flat. If it is, don't bother continuing.
	if (up[2] == 1.0) return
	
	// The cross product (aka vector product) will give us a vector, which is in essence our ANGLEVECTOR_RIGHT.
	xs_vec_cross(original_forward, up, right)
	// And this cross product will give us our new ANGLEVECTOR_FORWARD.
	xs_vec_cross(up, right, fwd)
	
	// Converts from the forward vector to angles. Unfortunately, vectors don't provide enough info to determine X-axis rotation (roll),
	// so we have to find it by pretending our right anglevector is a forward, calculating the angles, and pulling the corresponding value
	// that would be the roll.
	vector_to_angle(fwd, angles)
	vector_to_angle(right, angles2)
	
	// Multiply by -1 because pitch increases as we look down.
	angles[2] = -1.0 * angles2[0]
	
	// Finally, we turn our entity to lie flat.
	set_pev(ent, pev_angles, angles)
}
//volume effects
public volume_up_1(id) {
  client_cmd(id , "volume 0.2");
  set_task(0.2 , "volume_up_2" , id);
}

public volume_up_2(id) {
  client_cmd(id , "volume 0.4");
  set_task(0.2 , "volume_up_3" , id);
}

public volume_up_3(id) {
  client_cmd(id , "volume 0.6");
  set_task(0.2 , "volume_up_4" , id);
}

public volume_up_4(id) {
  client_cmd(id , "volume 0.8");
  set_task(0.2 , "volume_up_5" , id);
}

public volume_up_5(id) {
  client_cmd(id , "volume 1.0");
}

public eEndRound()
{
	for ( new i = 1; i <= g_maxplayers; i++ )
	{
		max_kills[i] = 0;
		limit_ks[i] = 0;
		user_controll[i] = 0;
		nalot[i] = 0;
		predator[i] = 0;
		nuke[i] = 0;
		cuav[i] = 0;
		uav[i] = 0;
		emp[i] = 0;
		pack[i] = 0;
		sentrys[i] = 0;
		
		choose_cp[i] = false;
		disable_cp[i] = false;
		choose_predator[i] = false;
		disable_predator[i] = false;
		choose_uav[i] = false;
		choose_cuav[i] = false;
		disable_cuav[i] = false;
		choose_emp[i] = false;
		choose_nalot[i] = false;
		choose_sentrys[i] = false;
		disable_sentrys[i] = false;
	}
	return PLUGIN_CONTINUE;
}

//stripweapons
public StripWeaponsNuke(i) 
{ 
	strip_user_weapons(i) 
	set_pdata_int(i, OFFSET_PRIMARYWEAPON, 0) 
}

//winround via nuke
			
public victoryend(id)
{
	acg_drawtext(id, 0.5, 0.25, "Victory!", 104, 216, 151, 200, 0.1, 0.3, 12.0, 1, TS_BORDER, 0, 0, 5)
	acg_drawtext(id, 0.5, 0.30, "Tactical Nuke", 255, 255, 255, 200, 0.1, 0.1, 12.0, 1, TS_BORDER, 0, 0, 6)
}

public defeatend(id)
{
	acg_drawtext(id, 0.5, 0.25, "Victory!", 216, 114, 103, 200, 0.1, 0.3, 12.0, 1, TS_BORDER, 0, 0, 5)
	acg_drawtext(id, 0.5, 0.30, "Tactical Nuke", 255, 255, 255, 200, 0.1, 0.1, 12.0, 1, TS_BORDER, 0, 0, 6)
}

//temporary weapondisable during killstreak used

public startkillstreak( const PlayerId )
{
	if ( g_IsAlive[ PlayerId ] )
	{
		CacheWeaponInfo ( PlayerId );
		UTIL_SetNextAttack ( g_WeaponIndex[ PlayerId ], 5.0 );
		UTIL_ResetZoom ( PlayerId );
		UTIL_SetModel ( PlayerId, 0 );
	}

}

public stopkillstreak( const PlayerId )
{
	if ( g_IsAlive[ PlayerId ] )
	{
		UTIL_SetNextAttack ( g_WeaponIndex[ PlayerId ], 0.0 );
		UTIL_ResetZoom ( PlayerId );
		ExecuteHamB( Ham_Item_Deploy, g_WeaponIndex[ PlayerId ], 1 );
	}
}

public Event_PlayerSpawn2 ( const PlayerId )
{
	if ( is_user_alive( PlayerId ) )
	{
		g_IsAlive[ PlayerId ] = true;
		if(ksmenu[ PlayerId ] == true)
		{
			//current reward removal
			uav[ PlayerId ] = 0;
			cuav[ PlayerId ] = 0;
			pack[ PlayerId] = 0;
			predator[ PlayerId ] = 0;
			nalot[ PlayerId ] = 0;
			sentrys[ PlayerId ] = 0;
			emp[ PlayerId ] = 0;
			nuke[ PlayerId ] = 0;
			//sentry removal
			new ent = -1
			while((ent = find_ent_by_class(ent, "sentry")))
			{
				if(entity_get_int(ent, EV_INT_iuser2) == PlayerId)
					remove_entity(ent);
			}
			//corereset( PlayerId );
		}
	}
}


public Event_PlayerKilled2 ( const VictimId, const AttackerId, const ShouldGib )
{
	g_IsAlive[ VictimId ] = false;
}


//stock weaponcaching
UTIL_SetNextAttack ( const WeapIndex, const Float:Delay )
{
	set_pdata_float( WeapIndex, m_flNextPrimaryAttack, Delay );
	set_pdata_float( WeapIndex, m_flNextSecondaryAttack, Delay );
}

CacheWeaponInfo ( const PlayerId )
{
	g_WeaponIndex[ PlayerId ] = get_pdata_cbase( PlayerId, m_pActiveItem );
	g_WeaponId   [ PlayerId ] = get_pdata_int( g_WeaponIndex[ PlayerId ], m_iId, 4 );
}

UTIL_SetModel ( const PlayerId, const Model )
{
	set_pev( PlayerId, pev_viewmodel, Model );
	set_pev( PlayerId, pev_weaponmodel, Model );
}


UTIL_ResetZoom ( const PlayerId )
{
	set_pdata_int( PlayerId, m_iFOV, 90 );
}