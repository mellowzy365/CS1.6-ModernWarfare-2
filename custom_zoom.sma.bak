/* Plugin generated by AMXX-Studio */

#include <amxmodx>
#include <amxmisc>
#include <fakemeta_util>
#include <hamsandwich>
#include <fakemeta>
#include <metadrawer>
#include <csx>
#include <engine>

#define PLUGIN "Custom Weapon Zoom"
#define VERSION "1.0"
#define AUTHOR "Infractm remade Mellowzy"

#define weapon(%1) get_user_weapon(%1, clip, ammo)
#define BUTTON(%1) (pev(id, pev_button) & IN_%1 && !(pev(id, pev_oldbuttons) & IN_%1))
#define id2 get_pdata_cbase(ent, m_pPlayer, 4)
#define MAX 40
// CS zoom (cstrike.h)
#define CS_FIRST_ZOOM			0x28
#define CS_SECOND_AWP_ZOOM		0xA
#define CS_SECOND_NONAWP_ZOOM		0xF
#define CS_AUGSG552_ZOOM		0x37
#define CS_NO_ZOOM			0x5A

#define MAX 40
#define ACR_SPEED 0.0800
#define AUG_SPEED 0.0800
#define XO_WEAPON 4
#define M4A1_SILENCED			(1<<2)
#define USP_SILENCED			(1<<0)
#define m_flNextPrimaryAttack 46

new V_MODEL[MAX][64];
new SIGHT[MAX][64];
new cvar_recoil_name[MAX][64];

new c_wpnchange[MAX];
new cvar_recoil[MAX];
new Float:cl_pushangle[33][3];

new const NO_RELOAD = (1<<2)|(1<<CSW_KNIFE)|(1<<CSW_C4)|(1<<CSW_HEGRENADE)|(1<<CSW_FLASHBANG)|(1<<CSW_SMOKEGRENADE);
const m_pPlayer = 41;
const m_fInReload = 54;
const m_bSilencerOn = 74;
new clip, ammo,idwpn
new Zoom[33], Reloading[33], WeaponName[24], bool:Zooming[MAX], bool:sightacg[MAX]
public plugin_init(){
	register_plugin(PLUGIN, VERSION, AUTHOR);
	md_init()
      
	register_forward(FM_CmdStart, "CmdStart");
 	register_forward(FM_PlayerPreThink,"PreThink");
	

	register_event("CurWeapon","CurWeapon","be","1=1");
	register_event("SetFOV", "Event_SetFOV", "be");
      
	for(new i = CSW_P228; i <= CSW_P90; i++){
		if(NO_RELOAD & (1<<i))
			continue;
   
		get_weaponname(i, WeaponName, 23);

		RegisterHam(Ham_Weapon_Reload, WeaponName, "ReloadWeapon", 1);
		//RegisterHam(Ham_Weapon_PrimaryAttack, WeaponName, "opencrosshair");
		RegisterHam(Ham_Weapon_PrimaryAttack, WeaponName, "primary_attack_post", 1);
		RegisterHam(Ham_Item_Holster, WeaponName, "Item_Holster");
	}
    
}

public plugin_precache(){
	new configfile[200];
	get_configsdir(configfile,199);
	format(configfile,199,"%s/cwz_weapon.ini",configfile);
	if(file_exists(configfile)){
		new row[200], left[64], trash, right[64];
		new size=file_size(configfile,1);
		for(new i=0;i<size;i++){
                  
			new model[64], wchange, recoil[32], sight_model[64];
			read_file(configfile,i,row,200,trash);
			if((contain(row,";")!=0) && strlen(row) && idwpn<MAX){
				replace(row, 199, " ", "_");
				replace(row, 199, "[model]", " ");
				replace(row, 199, "[wchange]", " ");
				replace(row, 199, "[recoil]", " ");
				replace(row, 199, "[sight_model]", " ");
				
				strbreak(row,left,63,right,63);
				format(row, 199, "%s", right);
				format(model, 63, "%s", left);
	 
				strbreak(row,left,63,right,63);
				format(row, 199, "%s", right);
				wchange = str_to_num(left);
	 
				strbreak(row,left,63,right,63);
				format(row, 199, "%s", right);
				format(recoil, 31, "%s", left);
	 
				strbreak(row,left,63,right,63);
				format(row, 199, "%s", right);
				format(sight_model, 63, "%s", left);
				
				c_wpnchange[idwpn] = wchange;
				      
				format(cvar_recoil_name[idwpn], 63, "cwz_%s_recoil", model);
				cvar_recoil[idwpn] = register_cvar(cvar_recoil_name[idwpn], recoil);
	 
				format(V_MODEL[idwpn], 63, "models/%s.mdl", model);
				format(SIGHT[idwpn], 63, "models/%s.mdl", sight_model);
				precache_model(V_MODEL[idwpn]);
				precache_model(SIGHT[idwpn]);
				idwpn++;
			}
		}
	}
	precache_generic("gfx/crosshairs/vertical.tga")
	precache_generic("gfx/crosshairs/horizontal.tga")
}

public md_init()
{
	md_loadimage("gfx/crosshairs/vertical.tga")
	md_loadimage("gfx/crosshairs/horizontal.tga")
}
public client_putinserver(id){
	Zoom[id] = false;
	Zooming[id] = false;
	sightacg[id] = false;
	hidecrosshair(id)
}
public Event_SetFOV(id)
{
	if( is_user_connected(id) && is_user_alive(id) )
	{
		new iFov = read_data(1);
		if( iFov<=0 )
			iFov = 90;
		
		player_fov_changed(id, iFov);
	}
}

player_fov_changed(id, iFov)
{
	if( iFov>=90 )
	{
		Zooming[id] = false;
		remove_crosshair(id)
		client_cmd(id, "cl_bob 0.01")
	}
	else
	{
		Zooming[id] = true;
		client_cmd(id, "cl_bob 0");
	}
}
public CurWeapon(id){
	if(!is_user_alive(id))
		return PLUGIN_CONTINUE;
            
	for(new i=0;i<idwpn;i++){
		if(weapon(id) == c_wpnchange[i]){
			get_weaponname(read_data(2), WeaponName, 23);
			new ent = fm_find_ent_by_owner(-1, WeaponName, id);
			
			set_pdata_float(ent, 47, 9999.0, 4);
			if(!Zoom[id])
				set_pev(id, pev_viewmodel2, V_MODEL[i]);
			else
				{
					set_pev(id, pev_viewmodel2, SIGHT[i]);
					hidecrosshair(id)
				}
		}
	}
	moving(id)
	
	return PLUGIN_CONTINUE;
}
public CmdStart(id){
	if(!is_user_alive(id))
		return FMRES_IGNORED;
      	
	for(new i=0;i<idwpn;i++){
		if(weapon(id) == c_wpnchange[i]){
			if(BUTTON(ATTACK2)){
				if(!Zoom[id] && !Reloading[id]){
					set_pdata_int(id, 363, 75, 5);
					hidecrosshair(id)
					Zoom[id] = true;
				}
				else
					ZoomFalse(id);
					
			}
		}
	}
	return FMRES_IGNORED;
}
public ReloadWeapon(ent){
	if(get_pdata_int(ent, m_fInReload, 4)){
		new Float:NextAttack = get_pdata_float(id2, 83, 5);
		
		ZoomFalse(id2);
		Reloading[id2] = true;
		Zooming[id2] = false
		set_task(NextAttack, "taskWeaponReloaded", id2);
	}
}
public Item_Holster(ent){
	if(ExecuteHamB(Ham_Item_CanHolster, ent)){
		ZoomFalse(id2);
		remove_task(id2);
		Reloading[id2] = false;
	}
}
public taskWeaponReloaded(id){
	Reloading[id] = false;  
	Zooming[id] = false
}
public moving(id)
{
	if(!Zooming[id])
	{
		if((weapon(id) != 3) && (weapon(id) != 13) && (weapon(id) != 18) && (weapon(id) != 24) )
		{
			if((weapon(id) != 5) && (weapon(id) != 21))
			{
				if((weapon(id) != 4) && (weapon(id) != 25)){
					standard_open(id);
				}
				else
					grenade_closed(id)
			}
			else
				shotgun_crosshair(id);
		}
		else
			sniper_open(id)
	}
	else
		remove_crosshair(id)
}
public standing(id)
{
	if(!Zooming[id])
	{
		if((weapon(id) != 3) && (weapon(id) != 13) && (weapon(id) != 18) && (weapon(id) != 24) )//check if sniper
		{
			if((weapon(id) != 5) && (weapon(id) != 21))											//check if shotgun
			{
				if((weapon(id) != 4) && (weapon(id) != 25)){									//check if grenade
					standard_closed(id);
				}
				else
					grenade_closed(id)
			}
			else
				shotgun_crosshair(id);
		}
		else
			sniper_closed(id)
	}
	else
		remove_crosshair(id)
}
public standard_open(id)
{
	//acg_drawtga(id, "gfx/crosshairs/vertical.tga", 255, 255, 255, 100, 0.5, 0.6144, 1, FX_NONE, 0.0, 0.0, 0.0, -1.0, 0, 0, 2) 
	md_drawimage(id, 16, 0, "gfx/crosshairs/vertical.tga", 0.5,0.6144,0,0,255,255,255,100,0.0,0.0,0.0)
		
	//acg_drawtga(id, "gfx/crosshairs/vertical.tga", 255, 255, 255, 100, 0.5, 0.3856, 1, FX_NONE, 0.0, 0.0, 0.0, -1.0, 0, 0, 3)
	md_drawimage(id, 17, 0, "gfx/crosshairs/vertical.tga", 0.5,0.3856,0,0,255,255,255,100,0.0,0.0,0.0)
		
	//acg_drawtga(id, "gfx/crosshairs/horizontal.tga", 255, 255, 255, 100, 0.564, 0.5, 1, FX_NONE, 0.0, 0.0, 0.0, -1.0, 0, 0, 4)
	md_drawimage(id, 18, 0, "gfx/crosshairs/horizontal.tga", 0.564,0.5,0,0,255,255,255,100,0.0,0.0,0.0)
		
		
	//acg_drawtga(id, "gfx/crosshairs/horizontal.tga", 255, 255, 255, 100, 0.436, 0.5, 1, FX_NONE, 0.0, 0.0, 0.0, -1.0, 0, 0, 5)
	md_drawimage(id, 19, 0, "gfx/crosshairs/horizontal.tga", 0.436,0.5,0,0,255,255,255,100,0.0,0.0,0.0)
}

public standard_closed(id)
{
	//acg_drawtga(id, "gfx/crosshairs/vertical.tga", 255, 255, 255, 155, 0.5, 0.56, 1, FX_NONE, 0.0, 0.0, 0.0, -1.0, 0, 0, 2) 
	md_drawimage(id, 16, 0, "gfx/crosshairs/vertical.tga", 0.5,0.56,0,0,255,255,255,155,0.0,0.0,0.0)
	
	//acg_drawtga(id, "gfx/crosshairs/vertical.tga", 255, 255, 255, 155, 0.5, 0.44, 1, FX_NONE, 0.0, 0.0, 0.0, -1.0, 0, 0, 3)
	md_drawimage(id, 17, 0, "gfx/crosshairs/vertical.tga", 0.5,0.44,0,0,255,255,255,155,0.0,0.0,0.0)
	
	//acg_drawtga(id, "gfx/crosshairs/horizontal.tga", 255, 255, 255, 155, 0.5335, 0.5, 1, FX_NONE, 0.0, 0.0, 0.0, -1.0, 0, 0, 4)
	md_drawimage(id, 18, 0, "gfx/crosshairs/horizontal.tga", 0.5335,0.5,0,0,255,255,255,155,0.0,0.0,0.0)
	
	//acg_drawtga(id, "gfx/crosshairs/horizontal.tga", 255, 255, 255, 155, 0.4665, 0.5, 1, FX_NONE, 0.0, 0.0, 0.0, -1.0, 0, 0, 5)
	md_drawimage(id, 19, 0, "gfx/crosshairs/horizontal.tga", 0.4665,0.5,0,0,255,255,255,155,0.0,0.0,0.0)
	
}

public sniper_open(id)
{
	//acg_drawtga(id, "gfx/crosshairs/vertical.tga", 255, 255, 255, 100, 0.5, 0.302, 1, FX_NONE, 0.0, 0.0, 0.0, -1.0, 0, 0, 2) 
	md_drawimage(id, 16, 0, "gfx/crosshairs/vertical.tga", 0.5,0.302,0,0,255,255,255,100,0.0,0.0,0.0)
	
	//acg_drawtga(id, "gfx/crosshairs/vertical.tga", 255, 255, 255, 100, 0.5, 0.698, 1, FX_NONE, 0.0, 0.0, 0.0, -1.0, 0, 0, 3)
	md_drawimage(id, 17, 0, "gfx/crosshairs/vertical.tga", 0.5,0.698,0,0,255,255,255,100,0.0,0.0,0.0)
	
	//acg_drawtga(id, "gfx/crosshairs/horizontal.tga", 255, 255, 255, 100, 0.39, 0.5, 1, FX_NONE, 0.0, 0.0, 0.0, -1.0, 0, 0, 4)
	md_drawimage(id, 18, 0, "gfx/crosshairs/horizontal.tga", 0.39,0.5,0,0,255,255,255,100,0.0,0.0,0.0)
	
	//acg_drawtga(id, "gfx/crosshairs/horizontal.tga", 255, 255, 255, 100, 0.61, 0.5, 1, FX_NONE, 0.0, 0.0, 0.0, -1.0, 0, 0, 5)
	md_drawimage(id, 19, 0, "gfx/crosshairs/horizontal.tga", 0.61,0.5,0,0,255,255,255,100,0.0,0.0,0.0)
}

public sniper_closed(id)
{

	//acg_drawtga(id, "gfx/crosshairs/vertical.tga", 255, 255, 255, 155, 0.5, 0.3416, 1, FX_NONE, 0.0, 0.0, 0.0, -1.0, 0, 0, 2) 
	md_drawimage(id, 16, 0, "gfx/crosshairs/vertical.tga", 0.5,0.3416,0,0,255,255,255,155,0.0,0.0,0.0)
	
	//acg_drawtga(id, "gfx/crosshairs/vertical.tga", 255, 255, 255, 155, 0.5, 0.6584, 1, FX_NONE, 0.0, 0.0, 0.0, -1.0, 0, 0, 3) 
	md_drawimage(id, 17, 0, "gfx/crosshairs/vertical.tga", 0.5,0.6584,0,0,255,255,255,155,0.0,0.0,0.0)
	
	//acg_drawtga(id, "gfx/crosshairs/horizontal.tga", 255, 255, 255, 155, 0.412, 0.5, 1, FX_NONE, 0.0, 0.0, 0.0, -1.0, 0, 0, 4) 
	md_drawimage(id, 18, 0, "gfx/crosshairs/horizontal.tga", 0.412,0.5,0,0,255,255,255,155,0.0,0.0,0.0)
	
	//acg_drawtga(id, "gfx/crosshairs/horizontal.tga", 255, 255, 255, 155, 0.588, 0.5, 1, FX_NONE, 0.0, 0.0, 0.0, -1.0, 0, 0, 5) 
	md_drawimage(id, 19, 0, "gfx/crosshairs/horizontal.tga", 0.588,0.5,0,0,255,255,255,155,0.0,0.0,0.0)
}

public shotgun_crosshair(id)
{

	//acg_drawtga(id, "gfx/crosshairs/vertical.tga", 255, 255, 255, 155, 0.5, 0.412, 1, FX_NONE, 0.0, 0.0, 0.0, -1.0, 0, 0, 2) 
	md_drawimage(id, 16, 0, "gfx/crosshairs/vertical.tga", 0.5,0.412,0,0,255,255,255,155,0.0,0.0,0.0)
	
	//acg_drawtga(id, "gfx/crosshairs/vertical.tga", 255, 255, 255, 155, 0.5, 0.588, 1, FX_NONE, 0.0, 0.0, 0.0, -1.0, 0, 0, 3) 
	md_drawimage(id, 17, 0, "gfx/crosshairs/vertical.tga", 0.5,0.588,0,0,255,255,255,155,0.0,0.0,0.0)
	
	//acg_drawtga(id, "gfx/crosshairs/horizontal.tga", 255, 255, 255, 155, 0.452, 0.5, 1, FX_NONE, 0.0, 0.0, 0.0, -1.0, 0, 0, 4) 
	md_drawimage(id, 18, 0, "gfx/crosshairs/horizontal.tga", 0.452,0.5,0,0,255,255,255,155,0.0,0.0,0.0)
	
	//acg_drawtga(id, "gfx/crosshairs/horizontal.tga", 255, 255, 255, 155, 0.548, 0.5, 1, FX_NONE, 0.0, 0.0, 0.0, -1.0, 0, 0, 5) 
	md_drawimage(id, 18, 0, "gfx/crosshairs/horizontal.tga", 0.548,0.5,0,0,255,255,255,155,0.0,0.0,0.0)
}

public grenade_closed(id)
{

	//acg_drawtga(id, "gfx/crosshairs/vertical.tga", 255, 255, 255, 155, 0.5, 0.53, 1, FX_NONE, 0.0, 0.0, 0.0, -1.0, 0, 0, 2) 
	md_drawimage(id, 16, 0, "gfx/crosshairs/vertical.tga", 0.5,0.53,0,0,255,255,255,155,0.0,0.0,0.0)
	
	//acg_drawtga(id, "gfx/crosshairs/vertical.tga", 255, 255, 255, 155, 0.5, 0.47, 1, FX_NONE, 0.0, 0.0, 0.0, -1.0, 0, 0, 3)
	md_drawimage(id, 17, 0, "gfx/crosshairs/vertical.tga", 0.5,0.47,0,0,255,255,255,155,0.0,0.0,0.0)
	
	//acg_drawtga(id, "gfx/crosshairs/horizontal.tga", 255, 255, 255, 155, 0.51675, 0.5, 1, FX_NONE, 0.0, 0.0, 0.0, -1.0, 0, 0, 4)
	md_drawimage(id, 18, 0, "gfx/crosshairs/horizontal.tga", 0.51675,0.5,0,0,255,255,255,155,0.0,0.0,0.0)
	
	//acg_drawtga(id, "gfx/crosshairs/horizontal.tga", 255, 255, 255, 155, 0.48325, 0.5, 1, FX_NONE, 0.0, 0.0, 0.0, -1.0, 0, 0, 5)
	md_drawimage(id, 19, 0, "gfx/crosshairs/horizontal.tga", 0.48325,0.5,0,0,255,255,255,155,0.0,0.0,0.0)
	
}
public remove_crosshair(id)
{
	md_removedrawing(id, 1, 16)
	md_removedrawing(id, 1, 17)
	md_removedrawing(id, 1, 18)
	md_removedrawing(id, 1, 19)
}
public ZoomFalse(id){
	set_pdata_int(id, 363, 90, 5);
	hidecrosshair(id)
	Zoom[id] = false;
	Zooming[id] = false
}
public PreThink(id)
{
	if(!is_user_alive(id))
		return FMRES_IGNORED
	
	new Float:fVelocity[ 3 ];
	pev( id , pev_velocity , fVelocity );  
	
	if(!is_user_bot(id) && (fVelocity[0] != 0 || fVelocity[1] != 0 || fVelocity[2] != 0)) //crosshair cod style
		moving(id)
	else
		standing(id)
		
	/*new ent = fm_find_ent_by_owner(-1, "weapon_m4a1", id);
	//new ent1 = fm_find_ent_by_owner(-1, "weapon_famas", id);
	//new ent2 = fm_find_ent_by_owner(-1, "weapon_usp", id);
	//new ent3 = fm_find_ent_by_owner(-1, "weapon_glock18", id);
	
	for(new i=0;i<idwpn;i++){
		cs_set_weapon_silen(ent, 1)

	}*/
	return FMRES_IGNORED;
}
public hidecrosshair(id)
{
	if(!is_user_bot(id))
	{
		message_begin( MSG_ONE_UNRELIABLE, get_user_msgid("HideWeapon"), _, id );
		write_byte( (1<<6) );
		message_end();
	}
}
public primary_attack(ent){

	pev(id2,pev_punchangle,cl_pushangle[id2]);
	for(new i=0;i<idwpn;i++)
	{
		hidecrosshair(id2)
	}
	return HAM_IGNORED;
}
 
public primary_attack_post(ent){

	for(new i=0;i<idwpn;i++){
		if(weapon(id2) == c_wpnchange[i] && Zoom[id2]){
			new Float:push[3];
			pev(id2,pev_punchangle,push);
			xs_vec_sub(push,cl_pushangle[id2],push);
				  
			xs_vec_mul_scalar(push, get_pcvar_float(cvar_recoil[i]),push);
			xs_vec_add(push,cl_pushangle[id2],push);
			set_pev(id2,pev_punchangle,push);
			hidecrosshair(id2)
		}
		if(weapon(id2) == 27)
		{
			set_pdata_float(ent, m_flNextPrimaryAttack, ACR_SPEED, XO_WEAPON)
		}
		if(weapon(id2) == 8)
		{
			set_pdata_float(ent, m_flNextPrimaryAttack, AUG_SPEED, XO_WEAPON)
		}
	}
	return HAM_IGNORED;
} 


/*UTIL_IsFiring ( const PlayerId )
{
	static Buttons;
	Buttons = pev( PlayerId, pev_button );

	return ( Buttons == IN_ATTACK );
}*/
stock cs_set_weapon_burst(entity, burstmode){
	new weapon = get_pdata_int(entity, 43, 4);
	if(weapon != CSW_GLOCK18 && weapon != CSW_FAMAS) 
		return;
	
	static TextMsg;
	static const messages[3][] = {"#Switch_To_BurstFire", "#Switch_To_SemiAuto", "#Switch_To_FullAuto"};
	
	static type;
	new firemode = get_pdata_int(entity, m_bSilencerOn, 4);
	
	switch(weapon){
		case CSW_GLOCK18:{
			if(burstmode && firemode == GLOCK18_SEMIAUTOMATIC){
				type = 0;
				firemode = GLOCK18_BURST;
			}
			else if(!burstmode && firemode == GLOCK18_BURST){
				type = 1;
				firemode = GLOCK18_SEMIAUTOMATIC;
			}
			else return;
		}
		case CSW_FAMAS:{
			if(burstmode && firemode == FAMAS_AUTOMATIC){
				type = 0;
				firemode = FAMAS_BURST;
			}
			else if(!burstmode && firemode == FAMAS_BURST){
				type = 2;
				firemode = FAMAS_AUTOMATIC;
			}
			else return;
		}
	}
	set_pdata_int(entity, m_bSilencerOn, firemode, 4);
	
	new client = pev(entity, pev_owner);
	if(is_user_alive(client)){
		if(TextMsg || (TextMsg = get_user_msgid("TextMsg"))){
			emessage_begin(MSG_ONE_UNRELIABLE, TextMsg, _, client);
			ewrite_byte(4);
			ewrite_string(messages[type]);
			emessage_end();
		}
	}
}

stock cs_set_weapon_silen(entity, silence){
	new weapon = get_pdata_int(entity, 43, 4);
	if(weapon != CSW_M4A1 && weapon != CSW_USP) 
		return;
	
	new silencemode = get_pdata_int(entity, m_bSilencerOn, 4);
	
	switch(weapon){
		case CSW_M4A1:{
			if(silence && !(silencemode & M4A1_SILENCED)){
				silencemode |= M4A1_SILENCED;
			}
			else if(!silence && (silencemode & M4A1_SILENCED)){
				silencemode &= ~M4A1_SILENCED;
			}
			else return;
		}
		case CSW_USP:{
			if(silence && !(silencemode & USP_SILENCED)){
				silencemode |= USP_SILENCED;
			}
			else if(!silence && (silencemode & USP_SILENCED)){
				silencemode &= ~USP_SILENCED;
			}
			else return;
		}
	}
	set_pdata_int(entity, m_bSilencerOn, silencemode, 4);
}
