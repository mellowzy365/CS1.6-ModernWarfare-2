/* Plugin generated by AMXX-Studio */

#include <amxmodx>
#include <amxmisc>
#include <metadrawer>
#include <engine>  
#include <hamsandwich>
#include <fakemeta>
#include <cstrike>

#define PLUGIN "MW2_Misc"
#define VERSION "1.0"
#define AUTHOR "Infractm Remade Mellowzy"

#define weapon(%1) get_user_weapon(%1, clip, ammo)

#define XO_PLAYER            5
#define m_pPlayer	     41
#define m_flTimeWeaponIdle   48
#define m_fInReload          54
#define m_fInSpecialReload   55
#define m_flFlashedUntil     514
#define m_flFlashedAt        515
#define m_flFlashHoldTime    516
#define m_flFlashDuration    517
#define m_iFlashAlpha        518
#define ALPHA_FULLBLINDED    255

#define MAX 32

new clip
new ammo
new bool:roundended[33]
//new g_maxplayers
//new bool:disable_pos[33], bool:emp_active[33], bool:roundended[33];
new const maxAmmo[31]={
		0,
		30,	//CSW_P228
		0,
		10,	//CSW_SCOUT
		1,	//CSW_HEGRENADE
		24,	//CSW_XM1014
		1,	//CSW_C4
		64, //CSW_MAC10
		84,	//CSW_AUG
		1,	//CSW_SMOKEGRENADE
		24, //CSW_ELITE
		14, //CSW_FIVESEVEN
		60, //CSW_UMP45
		18,	//CSW_SG550
		60,	//CSW_GALIL
		60,	//CSW_FAMAS
		24, //CSW_USP
		40, //CSW_GLOCK18
		20,	//CSW_AWP
		60, //CSW_MP5NAVY
		100, //CSW_M249
		24,	//CSW_M3
		60,	//CSW_M4A1
		50, //CSW_TMP
		30,	//CSW_G3SG1
		2,	//CSW_FLASHBANG
		14,	//CSW_DEAGLE
		60,	//CSW_SG552
		60,	//CSW_AK47
		0,	//CSW_KNIFE
		100 //CSW_P90
};

new max_kills[MAX+1], bool:radar[2], nalot[MAX+1], predator[MAX+1], nuke[MAX+1], emp[MAX+1], cuav[MAX+1], uav[MAX+1], pack[MAX+1], sentrys[MAX+1], stealth[MAX+1];
new limit_ks[MAX+1], bool:choose_uav[MAX+1], bool:choose_cp[MAX+1], bool:disable_cp[MAX+1], bool:choose_cuav[MAX+1], bool:disable_cuav[MAX+1], bool:choose_nalot[MAX+1];
new bool:choose_stealth[MAX+1], bool:choose_predator[MAX+1], bool:disable_predator[MAX+1], bool:choose_emp[MAX+1], bool:choose_sentrys[MAX+1], bool:disable_sentrys[MAX+1], bool:choose_nuke[MAX+1], bool:ksmenu[2];
new bool:unlockedks[MAX+1], bool:unlockedks1[MAX+1], bool:unlockedks2[MAX+1], bool:unlockedks3[MAX+1], bool:unlockedks4[MAX+1], bool:unlockedks5[MAX+1], bool:unlockedks6[MAX+1];

new bool:aerial_active[MAX+1], bool:cd_active[MAX+1], bool:predator_active[MAX+1], bool:package_active[MAX+1], bool:sentry_package_active[MAX+1]

new bool:receivedsentry[MAX+1];
new g_maxplayers,bool:ksdisabled[MAX+1];
public plugin_init() {
	register_plugin(PLUGIN, VERSION, AUTHOR)
	
	register_event("CurWeapon", "Event_CurWeapon", "be", "1=1")
	
	/*register_event("HLTV", "NewRound", "a", "1=0", "2=0");
	register_event("SendAudio", "eEndRound", "a", "2&%!MRAD_terwin", "2&%!MRAD_ctwin", "2&%!MRAD_rounddraw")
	
	g_maxplayers = get_maxplayers();
	
	new command1[] = "Killstreak_Menu"
	register_clcmd("say /ks", command1);
	register_clcmd("say /killstreak", command1);
	register_clcmd("killstreak", command1);
	
	new command2[] = "Choose_Killstreak"
	register_clcmd("say /ksmenu", command2);
	register_clcmd("ksmenu", command2);
	
	register_clcmd("unlockks", "Killstreak_Give");*/
}

public NewRound()
{
	for ( new i = 1; i <= g_maxplayers; i++ )
	{
		max_kills[i] = 0;
		limit_ks[i] = 0;
		nalot[i] = 0;
		stealth[i] = 0;
		predator[i] = 0;
		nuke[i] = 0;
		cuav[i] = 0;
		uav[i] = 0;
		emp[i] = 0;
		pack[i] = 0;
		sentrys[i] = 0;	
		
		choose_cp[i] = false;
		disable_cp[i] = false;
		choose_predator[i] = false;
		disable_predator[i] = false;
		choose_uav[i] = false;
		choose_cuav[i] = false;
		disable_cuav[i] = false;
		choose_emp[i] = false;
		choose_nalot[i] = false;
		choose_stealth[i] = false;
		choose_sentrys[i] = false;
		disable_sentrys[i] = false;
		choose_nuke[i] = false;
		
		ksdisabled[i] = false;
		
		cd_active[i] = false;
		aerial_active[i] = false;
		sentry_package_active[i] = false;
		package_active[i] = false;
		predator_active[i] = false;
		
		unlockedks[i] = false;
		unlockedks1[i] = false;
		unlockedks2[i] = false;
		unlockedks3[i] = false;
		unlockedks4[i] = false;
		unlockedks5[i] = false;
		unlockedks6[i] = false;
		
		receivedsentry[i] = false;
		
		//client_cmd(i, "mp3 play sound/mw/background2.mp3");
		//set_task(342.0, "background", i, _, _, "b")

	}
}
public eEndRound()
{
	for ( new i = 1; i <= g_maxplayers; i++ )
	{
		max_kills[i] = 0;
		limit_ks[i] = 0;
		//user_controll[i] = 0;
		nalot[i] = 0;
		predator[i] = 0;
		nuke[i] = 0;
		cuav[i] = 0;
		uav[i] = 0;
		emp[i] = 0;
		pack[i] = 0;
		sentrys[i] = 0;
		
		choose_cp[i] = false;
		disable_cp[i] = false;
		choose_predator[i] = false;
		disable_predator[i] = false;
		choose_uav[i] = false;
		choose_cuav[i] = false;
		disable_cuav[i] = false;
		choose_emp[i] = false;
		choose_nalot[i] = false;
		choose_sentrys[i] = false;
		disable_sentrys[i] = false;
		choose_nuke[i] = false;
		ksdisabled[i] = false;
		
		cd_active[i] = false;
		aerial_active[i] = false;
		sentry_package_active[i] = false;
		package_active[i] = false;
		predator_active[i] = false;
		
		unlockedks[i] = false;
		unlockedks1[i] = false;
		unlockedks2[i] = false;
		unlockedks3[i] = false;
		unlockedks4[i] = false;
		unlockedks5[i] = false;
		unlockedks6[i] = false;
		
		roundended[i] = true;
		
		disableks(i)
	}
	return PLUGIN_CONTINUE;
}
public disableks(id)
{
	ksdisabled[id] = true;
	remove_entity_name("sentry")
}

public Killstreak_Menu(id)
{
	if(!ksdisabled[id]){
		new menu = menu_create("KillStreak:", "Killstreak_Handler");
		new cb = menu_makecallback("Killstreak_Callback");
		menu_additem(menu, "UAV", _, _, cb);
		menu_additem(menu, "Care Package", _, _, cb);
		menu_additem(menu, "Counter-UAV", _, _, cb);
		menu_additem(menu, "Precision Airstrike", _, _, cb);
		menu_additem(menu, "Predator Missile", _, _, cb);
		menu_additem(menu, "Stealth Bomber", _, _, cb);
		menu_additem(menu, "Sentry Gun", _, _, cb);
		menu_additem(menu, "EMP", _, _, cb);
		menu_additem(menu, "Tactical Nuke", _, _, cb);
		menu_additem(menu, "Kill Streak Loadout Menu", _, _, cb);
		menu_setprop(menu, MPROP_EXITNAME, "Exit^n^n\yKill Streak Menu");
		menu_display(id, menu)
	}
}

public Choose_Killstreak(id)
{
	new menu = menu_create("Select 3 Kill Streaks:", "Choose_Handler");
	new cb2 = menu_makecallback("Choose_Callback");
	menu_additem(menu, "UAV \y[3] - Unlocked at level 1", _, _, cb2);
	menu_additem(menu, "Care Package \y[4] - Unlocked at level 1", _, _, cb2);
	menu_additem(menu, "Counter-UAV \y[4] - Unlocked at level 6)", _, _, cb2);
	menu_additem(menu, "Predator Missile \y[5] - Unlocked at level 1", _, _, cb2);
	menu_additem(menu, "Sentry Gun \y[5] - Unlocked at level 8)", _, _, cb2);
	menu_additem(menu, "Precision Airstrike \y[6] - Unlocked at level 4)", _, _, cb2);
	menu_additem(menu, "Stealth Bomber \y[8] - Unlocked at level 10)", _, _, cb2);
	menu_additem(menu, "EMP \y[15] - Unlocked at level 12", _, _, cb2);
	menu_additem(menu, "Tactical Nuke \y[25] - Unlocked at level 12)", _, _, cb2);
	menu_additem(menu, "Reset \y- Reset loadout upon next respawn", _, _, cb2);
	menu_setprop(menu, MPROP_EXITNAME, "Exit^n^n\yOpen this menu by typing /ksmenu in chat or pressing F4");
	menu_display(id, menu)
}
//killstreak secret unlock test
public Killstreak_Give(id)
{
	uav[id]++;
	cuav[id]++;
	pack[id]++;
	predator[id]++;
	nalot[id]++;
	sentrys[id]++;
	stealth[id]++;
	emp[id]++;
	nuke[id]++;
}

public Killstreak_Callback(id, menu, item)
{
	if(uav[id] <= 0 && item == 0 || pack[id] <= 0 && item == 1 || cuav[id] <= 0 && item == 2 || nalot[id] <= 0 && item == 3 || predator[id] <= 0 && item == 4 || sentrys[id] <= 0 && item == 6 || stealth[id] <= 0 && item == 5 || emp[id] <= 0 && item == 7 || nuke[id] <= 0 && item == 8)
		return ITEM_DISABLED;
	
	return ITEM_ENABLED;
}

public Choose_Callback(id, menu, item)
{
	if(choose_uav[id] && item == 0 || choose_cuav[id] && item == 1 || disable_cuav[id] && item == 1	|| choose_cp[id] && item == 2 || disable_cp[id] && item == 2 || choose_predator[id] && item == 3 || disable_predator[id] && item == 3 || choose_sentrys[id] && item == 4 || disable_sentrys[id] && item == 4 || choose_nalot[id] && item == 5 || choose_stealth[id] && item == 6 || choose_emp[id] && item == 7 || choose_nuke[id] && item == 8)
		return ITEM_DISABLED;

	
	return ITEM_ENABLED;
}

public Choose_Handler(id, menu, item)
{
	//if(!is_user_alive(id))
	//	return PLUGIN_HANDLED;
	
	if(item == MENU_EXIT)
	{
		menu_destroy(menu);
		return PLUGIN_HANDLED;
	}
	
	
	
	switch(item)
	{
		case 0:
		{
			if(unlockedks[id])
			{
				limit_ks[id]++
				if(limit_ks[id] < 4)
				{
					choose_uav[id] = true;
					client_cmd(id, "spk sound/mw/select.wav");
					if(limit_ks[id] == 1)
					{
						client_print(id, print_chat, "[KILLSTREAK] (1/3) UAV selected.");
					}
					if(limit_ks[id] == 2)
					{
						client_print(id, print_chat, "[KILLSTREAK] (2/3) UAV selected.");
					}
					if(limit_ks[id] == 3)
					{
						client_print(id, print_chat, "[KILLSTREAK] (3/3) UAV selected. Your kill streak loadout is now set.");
						ksmenu[id] = false;
					}
					if(limit_ks[id] < 3)
					{
						Choose_Killstreak(id)
					}
				}
				if(limit_ks[id] == 4)
				{
					client_print(id, print_chat, "[KILLSTREAK] You have already reached the three kill streak loadout limit.");
				}
			}
			else
			{
				client_print(id, print_chat, "[KILLSTREAK] You haven't unlocked this killstreak yet.");
				if(limit_ks[id] < 3)
				{
					Choose_Killstreak(id)
				}
			}
		}
		case 1:{
			if(unlockedks[id])
			{
				limit_ks[id]++
				if(limit_ks[id] < 4)
				{
					choose_cp[id] = true;
					disable_cuav[id] = true;
					client_cmd(id, "spk sound/mw/select.wav");
					if(limit_ks[id] == 1)
					{
						client_print(id, print_chat, "[KILLSTREAK] (1/3) Care Package selected.");
					}
					if(limit_ks[id] == 2)
					{
						client_print(id, print_chat, "[KILLSTREAK] (2/3) Care Package selected.");
					}
					if(limit_ks[id] == 3)
					{
						client_print(id, print_chat, "[KILLSTREAK] (3/3) Care Package selected. Your kill streak loadout is now set.");
						ksmenu[id] = false;
					}
					if(limit_ks[id] < 3)
					{
						Choose_Killstreak(id)
					}

					
				}
				if(limit_ks[id] == 4)
				{
					client_print(id, print_chat, "[KILLSTREAK] You have already reached the three kill streak loadout limit.");
				}
			}
			else
			{
				client_print(id, print_chat, "[KILLSTREAK] You haven't unlocked this killstreak yet.");
				if(limit_ks[id] < 3)
				{
					Choose_Killstreak(id)
				}
			}
		} 
		case 2:{
			if(unlockedks1[id])
			{
				limit_ks[id]++
				if(limit_ks[id] < 4)
				{
					choose_cuav[id] = true;
					disable_cp[id] = true;
					client_cmd(id, "spk sound/mw/select.wav");
					if(limit_ks[id] == 1)
					{
						client_print(id, print_chat, "[KILLSTREAK] (1/3) Counter-UAV selected.");
					}
					if(limit_ks[id] == 2)
					{
						client_print(id, print_chat, "[KILLSTREAK] (2/3) Counter-UAV selected.");
					}
					if(limit_ks[id] == 3)
					{
						client_print(id, print_chat, "[KILLSTREAK] (3/3) Counter-UAV selected. Your kill streak loadout is now set.");
						ksmenu[id] = false;
					}
					if(limit_ks[id] < 3)
					{
						Choose_Killstreak(id)
					}
				}
				if(limit_ks[id] == 4)
				{
					client_print(id, print_chat, "[KILLSTREAK] You have already reached the three kill streak loadout limit.");
				}

			}
			else
			{
				client_print(id, print_chat, "[KILLSTREAK] You haven't unlocked this killstreak yet.");
				if(limit_ks[id] < 3)
				{
					Choose_Killstreak(id)
				}
			}
		} 
		case 3:{
			if(unlockedks[id])
			{
				limit_ks[id]++
				if(limit_ks[id] < 4)
				{
					choose_predator[id] = true;
					disable_sentrys[id] = true;
					client_cmd(id, "spk sound/mw/select.wav");
					if(limit_ks[id] == 1)
					{
						client_print(id, print_chat, "[KILLSTREAK] (1/3) Predator Missile selected.");
					}
					if(limit_ks[id] == 2)
					{
						client_print(id, print_chat, "[KILLSTREAK] (2/3) Predator Missile selected.");
					}
					if(limit_ks[id] == 3)
					{
						client_print(id, print_chat, "[KILLSTREAK] (3/3) Predator Missile selected. Your kill streak loadout is now set.");
						ksmenu[id] = false;
					}
					if(limit_ks[id] < 3)
					{
						Choose_Killstreak(id)
					}
				}
				if(limit_ks[id] == 4)
				{
					client_print(id, print_chat, "[KILLSTREAK] You have already reached the three kill streak loadout limit.");
				}
			}
			else
			{
				client_print(id, print_chat, "[KILLSTREAK] You haven't unlocked this killstreak yet.");
				if(limit_ks[id] < 3)
				{
					Choose_Killstreak(id)
				}
			}
		} 
		case 4:{
			if(unlockedks2[id])
			{
				limit_ks[id]++
				if(limit_ks[id] < 4)
				{
					choose_sentrys[id] = true;
					disable_predator[id] = true;
					client_cmd(id, "spk sound/mw/select.wav");
					if(limit_ks[id] == 1)
					{
						client_print(id, print_chat, "[KILLSTREAK] (1/3) Sentry Gun selected.");
					}
					if(limit_ks[id] == 2)
					{
						client_print(id, print_chat, "[KILLSTREAK] (2/3) Sentry Gun selected.");
					}
					if(limit_ks[id] == 3)
					{
						client_print(id, print_chat, "[KILLSTREAK] (3/3) Sentry Gun selected. Your kill streak loadout is now set.");
						ksmenu[id] = false;
					}
					if(limit_ks[id] < 3)
					{
						Choose_Killstreak(id)
					}
				}
				if(limit_ks[id] == 4)
				{
					client_print(id, print_chat, "[KILLSTREAK] You have already reached the three kill streak loadout limit.");
				}
			}
			else
			{
				client_print(id, print_chat, "[KILLSTREAK] You haven't unlocked this killstreak yet.");
				if(limit_ks[id] < 3)
				{
					Choose_Killstreak(id)
				}
			}
		} 
		case 5:{
			if(unlockedks3[id])
			{
				limit_ks[id]++
				if(limit_ks[id] < 4)
				{
					choose_nalot[id] = true;
					client_cmd(id, "spk sound/mw/select.wav");
					if(limit_ks[id] == 1)
					{
						client_print(id, print_chat, "[KILLSTREAK] (1/3) Precision Airstrike selected.");
					}
					if(limit_ks[id] == 2)
					{
						client_print(id, print_chat, "[KILLSTREAK] (2/3) Precision Airstrike selected.");
					}
					if(limit_ks[id] == 3)
					{
						client_print(id, print_chat, "[KILLSTREAK] (3/3) Precision Airstrike selected. Your kill streak loadout is now set.");
						ksmenu[id] = false;
					}
					if(limit_ks[id] < 3)
					{
						Choose_Killstreak(id)
					}
				}
				if(limit_ks[id] == 4)
				{
					client_print(id, print_chat, "[KILLSTREAK] You have already reached the three kill streak loadout limit.");
				}
			}
			else
			{
				client_print(id, print_chat, "[KILLSTREAK] You haven't unlocked this killstreak yet.");
				if(limit_ks[id] < 3)
				{
					Choose_Killstreak(id)
				}
			}
		} 
		case 6:{
			if(unlockedks4[id])
			{
				limit_ks[id]++
				if(limit_ks[id] < 4)
				{
					choose_stealth[id] = true;
					client_cmd(id, "spk sound/mw/select.wav");
					if(limit_ks[id] == 1)
					{
						client_print(id, print_chat, "[KILLSTREAK] (1/3) Stealth Bomber selected.");
					}
					if(limit_ks[id] == 2)
					{
						client_print(id, print_chat, "[KILLSTREAK] (2/3) Stealth Bomber selected.");
					}
					if(limit_ks[id] == 3)
					{
						client_print(id, print_chat, "[KILLSTREAK] (3/3) Stealth Bomber selected. Your kill streak loadout is now set.");
						ksmenu[id] = false;
					}
					if(limit_ks[id] < 3)
					{
						Choose_Killstreak(id)
					}
				}
				if(limit_ks[id] == 4)
				{
					client_print(id, print_chat, "[KILLSTREAK] You have already reached the three kill streak loadout limit.");
				}
			}
			else
			{
				client_print(id, print_chat, "[KILLSTREAK] You haven't unlocked this killstreak yet.");
				if(limit_ks[id] < 3)
				{
					Choose_Killstreak(id)
				}
			}
		} 
		case 7:{
			if(unlockedks5[id])
			{
				limit_ks[id]++
				if(limit_ks[id] < 4)
				{
					choose_emp[id] = true;
					client_cmd(id, "spk sound/mw/select.wav");
					if(limit_ks[id] == 1)
					{
						client_print(id, print_chat, "[KILLSTREAK] (1/3) EMP selected.");
					}
					if(limit_ks[id] == 2)
					{
						client_print(id, print_chat, "[KILLSTREAK] (2/3) EMP selected.");
					}
					if(limit_ks[id] == 3)
					{
						client_print(id, print_chat, "[KILLSTREAK] (3/3) EMP selected. Your kill streak loadout is now set.");
						ksmenu[id] = false;
					}
					if(limit_ks[id] < 3)
					{
						Choose_Killstreak(id)
					}
				}
				if(limit_ks[id] == 4)
				{
					client_print(id, print_chat, "[KILLSTREAK] You have already reached the three kill streak loadout limit.");
				}
			}
			else
			{
				client_print(id, print_chat, "[KILLSTREAK] You haven't unlocked this killstreak yet.");
				if(limit_ks[id] < 3)
				{
					Choose_Killstreak(id)
				}
			}
		} 
		case 8:{
			if(unlockedks6[id])
			{
				limit_ks[id]++
				if(limit_ks[id] < 4)
				{
					choose_nuke[id] = true;
					client_cmd(id, "spk sound/mw/select.wav");
					if(limit_ks[id] == 1)
					{
						client_print(id, print_chat, "[KILLSTREAK] (1/3) Tactical Nuke selected.");
					}
					if(limit_ks[id] == 2)
					{
						client_print(id, print_chat, "[KILLSTREAK] (2/3) Tactical Nuke selected.");
					}
					if(limit_ks[id] == 3)
					{
						client_print(id, print_chat, "[KILLSTREAK] (3/3) Tactical Nuke selected. Your kill streak loadout is now set.");
						ksmenu[id] = false;
					}
					if(limit_ks[id] < 3)
					{
						Choose_Killstreak(id)
					}
				}
				if(limit_ks[id] == 4)
				{
					client_print(id, print_chat, "[KILLSTREAK] You have already reached the three kill streak loadout limit.");
				}
			}
			else
			{
				client_print(id, print_chat, "[KILLSTREAK] You haven't unlocked this killstreak yet.");
				if(limit_ks[id] < 3)
				{
					Choose_Killstreak(id)
				}
			}
		} 
		case 9:{
		resetstreaks(id)
		client_cmd(id, "spk sound/mw/select.wav");
		}
	}
	return PLUGIN_HANDLED;
}

public resetstreaks(id)
{
	client_print(id, print_chat, "[KILLSTREAK] Your settings and current rewards will be reset on your next respawn.");
	ksmenu[id] = true;
}

public unlockks(id){
	unlockedks[id] = true;
}
public unlockks1(id){
	unlockedks1[id] = true;
}
public unlockks2(id){
	unlockedks2[id] = true;
}
public unlockks3(id){
	unlockedks3[id] = true;
}
public unlockks4(id){
	unlockedks4[id] = true;
}
public unlockks5(id){
	unlockedks5[id] = true;
	unlockedks6[id] = true;
}

public Event_CurWeapon(id){
	if(!is_user_bot(id) && is_user_alive(id))
	{
		get_user_weapon(id, clip, ammo);
		if (clip < 0)
			clip = 0
		if (ammo < 0)
			ammo = 0
		switch(get_user_weapon(id, clip, ammo))
		{
			case CSW_P228: 
			{
				if(is_user_alive(id) && clip >= 0 && clip <= 7)
					reloadtextflash(id)
				else
					if(task_exists(id+450))
						remove_task(id+450);
				//gun name
				//acg_drawtext(id, 0.74, 0.835, "M9 w/ Silencer", 255, 255, 255, 200, 0.2, 0.2, 5.0, 0, TS_BORDER, 1, 0, 21)
					
			}
			case CSW_SCOUT: 
			{

				if(is_user_alive(id) && clip >= 0 && clip <= 3)
					reloadtextflash(id)
				else
					if(task_exists(id+450))
						remove_task(id+450);
				//gun name
				//acg_drawtext(id, 0.745, 0.835, "Intervention", 255, 255, 255, 200, 0.2, 0.2, 5.0, 0, TS_BORDER, 1, 0, 21)
			}
			case CSW_XM1014: 
			{
				if(is_user_alive(id) && clip >= 0 && clip <= 8)
					reloadtextflash(id)
				else
					if(task_exists(id+450))
						remove_task(id+450);
				//gun name
				//acg_drawtext(id, 0.725,0.835, "Striker", 255, 255, 255, 200, 0.2, 0.2, 5.0, 0, TS_BORDER, 1, 0, 21)
			}
			case CSW_MAC10: 
			{
				if(is_user_alive(id) && clip >= 0 && clip <= 20)
					reloadtextflash(id)
				else
					if(task_exists(id+450))
						remove_task(id+450);
				//gun name
				//acg_drawtext(id, 0.775, 0.835, "Mini-Uzi", 255, 255, 255, 200, 0.2, 0.2, 5.0, 0, TS_BORDER, 1, 0, 21)
			}
			case CSW_AUG: 
			{
				if(is_user_alive(id) && clip >= 0 && clip <= 20)
					reloadtextflash(id)
				else
					if(task_exists(id+450))
						remove_task(id+450);
				//gun name
				//acg_drawtext(id, 0.735, 0.835, "AUG HBAR", 255, 255, 255, 200, 0.2, 0.2, 5.0, 0, TS_BORDER, 1, 0, 21)
			}
			case CSW_ELITE:
			{
				if(is_user_alive(id) && clip >= 0 && clip <= 8)
					reloadtextflash(id)
				else
					if(task_exists(id+450))
						remove_task(id+450);
				//acg_drawtext(id, 0.735, 0.835, "Akimbo .45 Magnum", 255, 255, 255, 200, 0.2, 0.2, 5.0, 0, TS_BORDER, 1, 0, 21)
			}
			case CSW_FIVESEVEN: 
			{

				if(is_user_alive(id) && clip >= 0 && clip <= 4)
					reloadtextflash(id)
				else
					if(task_exists(id+450))
						remove_task(id+450);
				//acg_drawtext(id, 0.745, 0.835, "M1911 .45", 255, 255, 255, 200, 0.2, 0.2, 5.0, 0, TS_BORDER, 1, 0, 21)
			}
			case CSW_UMP45: 
			{

				if(is_user_alive(id) && clip >= 0 && clip <= 20)
					reloadtextflash(id)
				else
					if(task_exists(id+450))
						remove_task(id+450);
				//acg_drawtext(id, 0.76, 0.835, "Vector", 255, 255, 255, 200, 0.2, 0.2, 5.0, 0, TS_BORDER, 1, 0, 21)
			}
			case CSW_SG550: 
			{

				if(is_user_alive(id) && clip >= 0 && clip <= 4)
					reloadtextflash(id)
				else
					if(task_exists(id+450))
						remove_task(id+450);
				//acg_drawtext(id, 0.76, 0.835, "WA2000", 255, 255, 255, 200, 0.2, 0.2, 5.0, 0, TS_BORDER, 1, 0, 21)
			}
			case CSW_GALIL: 
			{

				if(is_user_alive(id) && clip >= 0 && clip <= 20)
					reloadtextflash(id)
				else
					if(task_exists(id+450))
						remove_task(id+450);
				//acg_drawtext(id, 0.76, 0.835, "TAR-21", 255, 255, 255, 200, 0.2, 0.2, 5.0, 0, TS_BORDER, 1, 0, 21)
			}
			case CSW_FAMAS: 
			{
				if(is_user_alive(id) && clip >= 0 && clip <= 20)
					reloadtextflash(id)
				else
					if(task_exists(id+450))
						remove_task(id+450);
			//	acg_drawtext(id, 0.765, 0.835, "Famas", 255, 255, 255, 200, 0.2, 0.2, 5.0, 0, TS_BORDER, 1, 0, 21)
			}
			case CSW_USP:
			{

				if(is_user_alive(id) && clip >= 0 && clip <= 8)
					reloadtextflash(id)
				else
					if(task_exists(id+450))
						remove_task(id+450);
			//	acg_drawtext(id, 0.755, 0.835, "USP .45", 255, 255, 255, 200, 0.2, 0.2, 5.0, 0, TS_BORDER, 1, 0, 21)
			}
			case CSW_GLOCK18:
			{

				if(is_user_alive(id) && clip >= 0 && clip <= 11)
					reloadtextflash(id)
				else
					if(task_exists(id+450))
						remove_task(id+450);
			//	acg_drawtext(id, 0.74, 0.835, "M93 Raffica", 255, 255, 255, 200, 0.2, 0.2, 5.0, 0, TS_BORDER, 1, 0, 21)
			}
			case CSW_AWP: 
			{

				if(is_user_alive(id) && clip >= 0 && clip <= 6)
					reloadtextflash(id)
				else
					if(task_exists(id+450))
						remove_task(id+450);
				//acg_drawtext(id, 0.735, 0.835, "Barrett .50cal", 255, 255, 255, 200, 0.2, 0.2, 5.0, 0, TS_BORDER, 1, 0, 21)
			}
			case CSW_MP5NAVY: 
			{

				if(is_user_alive(id) && clip >= 0 && clip <= 20)
					reloadtextflash(id)
				else
					if(task_exists(id+450))
						remove_task(id+450);
				//acg_drawtext(id, 0.755, 0.835, "MP5K", 255, 255, 255, 200, 0.2, 0.2, 5.0, 0, TS_BORDER, 1, 0, 21)
			}
			case CSW_M249: 
			{
				if(is_user_alive(id) && clip >= 0 && clip <= 60)
					reloadtextflash(id)
				else
					if(task_exists(id+450))
						remove_task(id+450);
				//acg_drawtext(id, 0.765, 0.835, "Rpd", 255, 255, 255, 200, 0.2, 0.2, 5.0, 0, TS_BORDER, 1, 0, 21)
			}
			case CSW_M3: 
			{
				if(is_user_alive(id) && clip >= 0 && clip <= 5)
					reloadtextflash(id)
				else
					if(task_exists(id+450))
						remove_task(id+450);
				//acg_drawtext(id, 0.745, 0.835, "SPAS-12", 255, 255, 255, 200, 0.2, 0.2, 5.0, 0, TS_BORDER, 1, 0, 21)
			}
			case CSW_M4A1: 
			{
				if(is_user_alive(id) && clip >= 0 && clip <= 20)
					reloadtextflash(id)
				else
					if(task_exists(id+450))
						remove_task(id+450);
				//acg_drawtext(id, 0.745, 0.835, "M4 Carbine", 255, 255, 255, 200, 0.2, 0.2, 5.0, 0, TS_BORDER, 1, 0, 21)
			}
			case CSW_TMP: 
			{
				if(is_user_alive(id) && clip >= 0 && clip <= 15)
					reloadtextflash(id)
				else
					if(task_exists(id+450))
						remove_task(id+450);
				//acg_drawtext(id, 0.78, 0.835, "TMP", 255, 255, 255, 200, 0.2, 0.2, 5.0, 0, TS_BORDER, 1, 0, 21)
			}
			case CSW_G3SG1: 
			{

				if(is_user_alive(id) && clip >= 0 && clip <= 15)
					reloadtextflash(id)
				else
					if(task_exists(id+450))
						remove_task(id+450);
				//acg_drawtext(id, 0.755, 0.835, "M21 EBR", 255, 255, 255, 200, 0.2, 0.2, 5.0, 0, TS_BORDER, 1, 0, 21)
			}
			case CSW_DEAGLE: 
			{

				if(is_user_alive(id) && clip >= 0 && clip <= 4)
					reloadtextflash(id)
				else
					if(task_exists(id+450))
						remove_task(id+450);
				//acg_drawtext(id, 0.745, 0.835, "Desert Eagle", 255, 255, 255, 200, 0.2, 0.2, 5.0, 0, TS_BORDER, 1, 0, 21)
			}
			case CSW_SG552: 
			{

				if(is_user_alive(id) && clip >= 0 && clip <= 20)
					reloadtextflash(id)
				else
					if(task_exists(id+450))
						remove_task(id+450);
				//acg_drawtext(id, 0.78, 0.835, "ACR", 255, 255, 255, 200, 0.2, 0.2, 5.0, 0, TS_BORDER, 1, 0, 21)
				
			}
			case CSW_AK47: 
			{
				if(is_user_alive(id) && clip >= 0 && clip <= 20)
					reloadtextflash(id)
				else
					if(task_exists(id+450))
						remove_task(id+450);
				//acg_drawtext(id, 0.765, 0.835, "AK47", 255, 255, 255, 200, 0.2, 0.2, 5.0, 0, TS_BORDER, 1, 0, 21)
			}
			case CSW_P90: 
			{
				if(is_user_alive(id) && clip >= 0 && clip <= 33)
					reloadtextflash(id)
				else
					if(task_exists(id+450))
						remove_task(id+450);
			}
		}	
	}
	return PLUGIN_CONTINUE;
}
//clip position or ammotext
//1920x1080
//0.825, 0.913

//1600x900
//0.786, 0.90

//1280x768
//0.739, 0.877

//gun names
//1920x1080
// x: currently not on default, add 5 to current values to return to default value
//0.875

//1600x900
// x: -3
//0.862

//1280x768
// x: -5
//0.835

public reloadtextflash(id)
{
	if(!task_exists(id+450))
		set_task(1.2, "reloadtext", id+450, _, _, "b")
}

public reloadtext(taskid)
{
	new id = (taskid - 450)
	if(is_user_alive(id) && !roundended[id])
	{
		
		get_user_weapon(id, ammo, clip)
		if((ammo < (maxAmmo[weapon(id)]*0.45)))
			//acg_drawtext(id, 0.5, 0.55, "Low Ammo", 250, 107, 116, 200, 0.2, 0.2, 0.8, 0, TS_BORDER, 1, 0, 20)
			md_drawtext(id, 7, "Low Ammo", 0.5, 0.55, 0, 0, 250,107,116,200, 0.2, 0.2, 0.8, ALIGN_NORMAL)
		if((ammo == 0)  && (clip == 0))
			//acg_drawtext(id, 0.5, 0.55, "No Ammo", 250, 107, 116, 200, 0.2, 0.2, 0.8, 0, TS_BORDER, 1, 0, 20)
			md_drawtext(id, 7, "No Ammo", 0.5, 0.55, 0, 0, 250,107,116,200, 0.2, 0.2, 0.8, ALIGN_NORMAL)
		if(ammo >= (maxAmmo[weapon(id)]*0.45))
			//acg_drawtext(id, 0.5, 0.55, "Reload", 255, 255, 255, 200, 0.2, 0.2, 0.8, 0, TS_BORDER, 1, 0, 20)
			md_drawtext(id, 7, "Reload", 0.5, 0.55, 0, 0, 255,255,255,200, 0.2, 0.2, 0.8, ALIGN_NORMAL)
		
	}
}
public round_end(id)
{
	roundended[id] = true;
}
public weapon_refill(id)
{
	if(!is_user_connected(id)) return;
	new a = get_user_weapon(id,clip,ammo)
	
	if(is_valid_ent(a))
	{
		switch(a)
		{
			case CSW_GLOCK18:cs_set_user_bpammo(id, CSW_GLOCK18, 120)
			case CSW_USP:cs_set_user_bpammo(id, CSW_USP, 120)
			case CSW_P228:cs_set_user_bpammo(id, CSW_P228, 120)
			case CSW_ELITE:cs_set_user_bpammo(id, CSW_ELITE, 120)\
			case CSW_FIVESEVEN:cs_set_user_bpammo(id, CSW_FIVESEVEN, 120)
			case CSW_DEAGLE:cs_set_user_bpammo(id, CSW_DEAGLE, 35)
			
			//SMG
			case CSW_GLOCK18:cs_set_user_bpammo(id, CSW_TMP, 120)
		}
	}
}
/* AMXX-Studio Notes - DO NOT MODIFY BELOW HERE
*{\\ rtf1\\ ansi\\ deff0{\\ fonttbl{\\ f0\\ fnil Tahoma;}}\n\\ viewkind4\\ uc1\\ pard\\ lang1033\\ f0\\ fs16 \n\\ par }
*/
